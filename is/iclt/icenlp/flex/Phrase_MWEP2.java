/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:40 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */
 
/* This transducer groups specific (adverb,prep) pairs  */

package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:40 from the specification file
 * <tt>Phrase_MWEP2.flex</tt>
 */
public class Phrase_MWEP2 {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\66\1\0\1\1\1\0\22\0\1\1\13\0\1\0"+
    "\1\0\3\0\3\0\15\0\1\23\1\10\1\0\1\0\1\34\1\52"+
    "\1\53\1\54\1\56\3\0\1\32\1\26\1\60\1\24\1\0\1\61"+
    "\1\27\1\0\1\62\1\30\1\33\1\0\1\64\1\0\1\22\1\0"+
    "\1\25\1\0\1\35\1\0\1\16\1\10\1\0\1\7\1\5\1\3"+
    "\1\14\1\42\1\31\1\43\1\51\1\17\1\13\1\6\1\4\1\21"+
    "\1\0\1\40\1\15\1\20\1\45\1\11\1\0\1\2\1\41\107\0"+
    "\1\47\13\0\1\57\14\0\1\63\3\0\1\65\2\0\1\37\7\0"+
    "\1\55\3\0\1\44\2\0\1\36\2\0\1\50\2\0\1\0\3\0"+
    "\1\46\3\0\1\12\uff01\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\23\1\1\2\274\0\1\1\2\0\1\3\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\67\0\u044c\0\u0483\0\u04ba"+
    "\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca"+
    "\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a"+
    "\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2"+
    "\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa"+
    "\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562"+
    "\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a"+
    "\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2"+
    "\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a"+
    "\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42"+
    "\0\u2c79\0\u2cb0\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d1e\0\u2d55\0\u2d8c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\2\1\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\13\3\2\1\14\1\13"+
    "\2\2\1\5\1\12\1\7\1\15\5\2\1\16\1\17"+
    "\1\20\1\21\1\2\1\22\1\23\1\24\1\16\2\2"+
    "\1\3\1\11\1\21\1\2\1\15\1\22\1\4\1\17"+
    "\1\23\1\24\1\20\1\10\1\25\127\0\1\26\31\0"+
    "\1\27\67\0\1\30\1\31\23\0\1\32\53\0\1\33"+
    "\55\0\1\34\120\0\1\35\1\36\33\0\1\37\126\0"+
    "\1\40\24\0\1\41\41\0\1\42\53\0\1\43\42\0"+
    "\1\44\61\0\1\45\1\0\1\46\140\0\1\47\14\0"+
    "\1\50\101\0\1\51\36\0\1\52\12\0\1\53\105\0"+
    "\1\27\1\54\65\0\1\55\64\0\1\56\66\0\1\57"+
    "\110\0\1\60\64\0\1\27\66\0\1\61\101\0\1\62"+
    "\32\0\1\63\52\0\1\64\124\0\1\65\43\0\1\66"+
    "\60\0\1\67\27\0\1\70\50\0\1\71\63\0\1\41"+
    "\104\0\1\72\41\0\1\73\61\0\1\45\14\0\1\74"+
    "\110\0\1\75\46\0\1\76\77\0\1\77\43\0\1\100"+
    "\120\0\1\101\27\0\1\53\14\0\1\102\71\0\1\103"+
    "\46\0\1\104\27\0\1\105\50\0\1\106\61\0\1\107"+
    "\116\0\1\71\70\0\1\110\4\0\1\77\22\0\1\111"+
    "\105\0\1\112\47\0\1\64\14\0\1\113\70\0\1\114"+
    "\54\0\1\115\66\0\1\27\125\0\1\77\37\0\1\57"+
    "\26\0\1\77\55\0\1\116\33\0\1\104\14\0\1\57"+
    "\12\0\1\107\53\0\1\117\66\0\1\120\70\0\1\121"+
    "\106\0\1\107\35\0\1\122\60\0\1\123\103\0\1\124"+
    "\51\0\1\104\27\0\1\125\36\0\1\104\14\0\1\126"+
    "\51\0\1\127\66\0\1\104\11\0\1\110\2\0\1\57"+
    "\51\0\1\104\116\0\1\107\36\0\1\111\4\0\1\130"+
    "\76\0\1\71\66\0\1\131\70\0\1\132\47\0\1\133"+
    "\122\0\1\134\32\0\1\135\3\0\1\136\5\0\1\136"+
    "\66\0\1\35\54\0\1\137\103\0\1\140\51\0\1\123"+
    "\14\0\1\141\51\0\1\142\3\0\1\143\5\0\1\143"+
    "\54\0\1\144\103\0\1\145\51\0\1\127\14\0\1\146"+
    "\52\0\1\147\6\0\1\147\30\0\1\147\6\0\1\147"+
    "\16\0\1\150\3\0\1\151\5\0\1\151\54\0\1\152"+
    "\66\0\1\133\14\0\1\153\74\0\1\154\43\0\1\135"+
    "\3\0\1\155\5\0\1\156\31\0\1\157\22\0\1\135"+
    "\66\0\1\137\14\0\1\160\56\0\1\161\76\0\1\162"+
    "\51\0\1\142\12\0\1\163\34\0\1\164\16\0\1\142"+
    "\66\0\1\144\14\0\1\165\51\0\1\166\3\0\1\167"+
    "\5\0\1\167\71\0\1\170\53\0\1\171\1\0\1\171"+
    "\62\0\1\150\1\0\1\172\1\0\1\173\3\0\1\174"+
    "\1\0\1\175\2\0\1\176\1\0\1\177\16\0\1\200"+
    "\1\0\1\201\1\202\1\0\1\200\1\203\1\204\21\0"+
    "\1\150\66\0\1\152\14\0\1\205\66\0\1\206\74\0"+
    "\1\207\45\0\1\210\70\0\1\211\23\0\1\212\16\0"+
    "\1\213\24\0\1\214\76\0\1\215\51\0\1\216\66\0"+
    "\1\217\3\0\1\220\5\0\1\220\60\0\1\221\121\0"+
    "\1\222\44\0\1\223\51\0\1\166\1\0\1\224\1\0"+
    "\1\155\3\0\1\225\1\0\1\226\2\0\1\227\1\0"+
    "\1\230\16\0\1\231\1\0\1\232\1\233\1\0\1\231"+
    "\1\234\1\235\21\0\1\166\66\0\1\236\3\0\1\237"+
    "\5\0\1\237\57\0\3\240\3\0\1\240\114\0\1\241"+
    "\1\242\30\0\1\243\114\0\1\244\42\0\1\244\64\0"+
    "\1\200\32\0\1\200\61\0\1\245\36\0\1\246\70\0"+
    "\1\247\126\0\1\241\31\0\1\250\4\0\1\200\113\0"+
    "\1\200\44\0\1\251\51\0\1\252\3\0\1\253\5\0"+
    "\1\253\53\0\32\207\1\254\34\207\20\0\1\255\104\0"+
    "\1\256\47\0\1\257\67\0\1\260\55\0\1\261\60\0"+
    "\1\262\3\0\1\263\5\0\1\263\54\0\1\216\14\0"+
    "\1\264\51\0\1\217\1\0\1\265\5\0\1\225\25\0"+
    "\1\231\2\0\1\233\1\0\1\231\1\266\22\0\1\217"+
    "\101\0\1\267\103\0\1\270\36\0\1\271\3\0\1\272"+
    "\5\0\1\272\113\0\1\273\1\274\56\0\1\275\42\0"+
    "\1\275\64\0\1\231\32\0\1\231\61\0\1\276\36\0"+
    "\1\277\70\0\1\255\126\0\1\273\31\0\1\300\4\0"+
    "\1\231\113\0\1\231\27\0\1\236\7\0\1\225\25\0"+
    "\1\231\4\0\1\231\23\0\1\236\66\0\1\301\12\0"+
    "\1\302\111\0\1\200\67\0\1\247\46\0\1\247\104\0"+
    "\1\200\47\0\1\200\50\0\1\246\14\0\1\303\101\0"+
    "\1\204\44\0\1\247\60\0\1\304\3\0\1\305\5\0"+
    "\1\305\54\0\1\252\43\0\1\306\22\0\1\252\65\0"+
    "\32\207\1\254\1\307\33\207\31\0\1\235\53\0\1\276"+
    "\67\0\1\260\100\0\1\231\53\0\1\310\51\0\1\262"+
    "\7\0\1\225\25\0\1\231\2\0\1\233\1\0\1\231"+
    "\23\0\1\262\103\0\1\311\111\0\1\274\33\0\1\300"+
    "\66\0\1\312\66\0\1\313\61\0\1\271\35\0\1\231"+
    "\4\0\1\231\23\0\1\271\124\0\1\231\67\0\1\255"+
    "\64\0\1\231\47\0\1\231\50\0\1\277\14\0\1\314"+
    "\57\0\1\255\60\0\1\301\7\0\1\225\56\0\1\301"+
    "\71\0\2\315\4\0\1\315\55\0\1\304\1\0\1\265"+
    "\64\0\1\304\100\0\1\231\53\0\32\207\1\254\1\207"+
    "\1\316\32\207\6\0\1\231\61\0\1\317\3\0\1\320"+
    "\5\0\1\320\120\0\1\306\35\0\1\312\56\0\2\321"+
    "\4\0\1\321\55\0\1\322\3\0\1\323\5\0\1\323"+
    "\53\0\32\207\1\254\2\207\1\324\31\207\1\0\1\317"+
    "\1\0\1\224\5\0\1\225\4\0\1\227\22\0\1\232"+
    "\2\0\1\231\1\306\22\0\1\317\66\0\1\325\3\0"+
    "\1\326\5\0\1\326\54\0\1\322\65\0\24\207\1\327"+
    "\5\207\1\254\34\207\1\0\1\325\65\0\24\207\1\330"+
    "\5\207\1\254\61\207\1\2\4\207\1\254\34\207";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11715];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\11\274\0\1\1\2\0\1\1"+
    "\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String Open=" [MWE_PP ";
  String Close=" MWE_PP] ";
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Phrase_MWEP2(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Phrase_MWEP2(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
		out.write("\n");
          }
        case 4: break;
        case 1: 
          { out.write(yytext());
          }
        case 5: break;
        case 3: 
          { out.write(Open+yytext()+Close);
          }
        case 6: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Phrase_MWEP2 <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Phrase_MWEP2 scanner = null;
        try {
          scanner = new Phrase_MWEP2( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
