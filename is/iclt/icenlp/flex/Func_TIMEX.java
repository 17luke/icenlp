/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:42 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */
 
/* This transducer marks temporal expressions like 	  */
/* [NP árið nheog 1982 ta NP] as having a *TIMEX function */

package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:42 from the specification file
 * <tt>Func_TIMEX.flex</tt>
 */
public class Func_TIMEX {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\64\1\0\1\1\1\2\22\0\1\33\11\0\1\37"+
    "\1\0\1\0\1\0\1\57\2\0\3\0\10\0\1\46\1\0\1\46"+
    "\2\0\1\24\1\44\1\30\1\0\1\35\3\0\1\50\1\45\1\0"+
    "\1\42\1\34\1\27\1\47\1\25\1\40\1\0\1\31\1\51\1\41"+
    "\1\0\1\0\1\52\2\0\1\23\1\0\1\26\1\0\1\0\1\0"+
    "\1\17\1\11\1\0\1\10\1\6\1\4\1\15\1\3\1\32\1\56"+
    "\1\62\1\20\1\14\1\7\1\5\1\22\1\0\1\55\1\16\1\21"+
    "\1\0\1\12\1\0\1\3\2\0\1\36\1\0\1\43\143\0\1\61"+
    "\13\0\1\53\2\0\1\54\2\0\1\63\2\0\1\0\3\0\1\60"+
    "\3\0\1\13\uff01\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\154\0\2\3\144\0\1\3\5\0"+
    "\1\3\3\0\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\65\0\324\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376"+
    "\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e"+
    "\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6"+
    "\0\u16fb\0\65\0\u0f52\0\u1730\0\u1765\0\u179a\0\u17cf\0\u1804"+
    "\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac"+
    "\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54"+
    "\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc"+
    "\0\u1d31\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c"+
    "\0\u2081\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4"+
    "\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c"+
    "\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544"+
    "\0\u2579\0\u25ae\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7\0\u26ec"+
    "\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894"+
    "\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07\0\u2a3c"+
    "\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf\0\u12d7"+
    "\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u0350\0\u2ced\0\u2d22"+
    "\0\u2d57\0\65";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\23\2\1\3\12\2\1\4\25\2\1\5\112\0\1\6"+
    "\1\0\1\7\74\0\1\10\52\0\1\11\64\0\1\12"+
    "\67\0\1\13\1\14\6\0\1\15\6\0\1\16\1\17"+
    "\1\20\13\0\33\11\1\21\31\11\1\22\1\23\1\0"+
    "\5\22\1\24\6\22\1\25\13\22\1\23\30\22\50\0"+
    "\1\26\56\0\1\27\64\0\1\30\67\0\1\31\67\0"+
    "\1\32\65\0\1\33\14\0\25\11\1\34\5\11\1\21"+
    "\31\11\1\22\1\35\1\0\30\22\1\35\30\22\1\0"+
    "\1\22\1\23\1\0\30\22\1\23\30\22\1\0\1\24"+
    "\1\36\1\37\24\24\1\40\3\24\1\36\30\24\1\37"+
    "\1\41\1\42\1\0\30\41\1\42\30\41\35\0\1\43"+
    "\74\0\1\44\44\0\1\45\105\0\1\46\63\0\1\47"+
    "\54\0\1\50\30\0\25\11\1\51\5\11\1\21\31\11"+
    "\1\0\1\35\17\0\1\52\11\0\1\35\31\0\1\37"+
    "\1\36\17\37\1\53\5\37\1\54\3\37\1\36\60\37"+
    "\1\54\35\37\1\24\1\36\1\37\22\24\1\55\1\24"+
    "\1\40\3\24\1\36\30\24\1\37\1\41\1\56\1\0"+
    "\30\41\1\56\30\41\1\0\1\57\1\42\1\0\16\57"+
    "\1\60\1\57\1\61\7\57\1\42\30\57\26\0\1\62"+
    "\104\0\1\63\61\0\1\64\46\0\1\65\2\0\1\66"+
    "\16\0\1\67\63\0\1\70\54\0\1\71\27\0\26\11"+
    "\1\2\4\11\1\21\31\11\5\0\1\72\11\0\1\72"+
    "\45\0\5\37\1\73\11\37\1\73\7\37\1\54\62\37"+
    "\1\74\1\37\1\54\35\37\1\24\1\36\1\37\23\24"+
    "\1\75\1\40\3\24\1\36\30\24\1\37\1\0\1\56"+
    "\5\0\1\76\11\0\1\52\11\0\1\56\31\0\1\57"+
    "\1\77\1\0\30\57\1\77\30\57\1\0\1\57\1\77"+
    "\1\0\2\57\1\100\11\57\1\100\13\57\1\77\30\57"+
    "\1\0\1\57\1\77\1\0\21\57\1\101\6\57\1\77"+
    "\30\57\1\0\37\62\1\102\25\62\37\63\1\103\25\63"+
    "\37\64\1\104\25\64\25\0\1\105\106\0\1\106\15\0"+
    "\37\67\1\107\25\67\46\0\1\110\70\0\1\111\13\0"+
    "\1\112\31\0\1\112\31\0\1\37\1\113\25\37\1\54"+
    "\3\37\1\113\57\37\1\114\1\54\35\37\1\22\1\115"+
    "\1\0\30\22\1\115\30\22\4\0\1\116\6\0\1\116"+
    "\47\0\1\116\3\0\1\77\5\0\1\76\23\0\1\77"+
    "\31\0\1\57\1\117\1\0\30\57\1\117\30\57\1\0"+
    "\1\57\1\77\1\0\22\57\1\120\5\57\1\77\30\57"+
    "\1\0\30\62\1\121\6\62\1\102\25\62\31\63\1\122"+
    "\5\63\1\103\25\63\37\64\1\104\1\123\24\64\46\0"+
    "\1\67\52\0\1\105\30\0\37\67\1\107\7\67\1\124"+
    "\15\67\37\110\1\125\25\110\37\111\1\126\25\111\1\0"+
    "\1\112\25\0\1\127\3\0\1\112\31\0\1\37\1\113"+
    "\25\37\1\130\3\37\1\113\31\37\1\0\1\131\31\0"+
    "\1\131\32\0\1\115\17\0\1\52\1\0\1\132\7\0"+
    "\1\115\35\0\1\133\1\0\1\133\57\0\1\117\5\0"+
    "\1\76\17\0\1\127\3\0\1\117\31\0\1\120\1\134"+
    "\1\135\21\120\1\136\6\120\1\134\30\120\1\135\37\62"+
    "\1\102\7\62\1\137\15\62\37\63\1\103\1\63\1\140"+
    "\23\63\37\64\1\104\1\64\1\141\23\64\37\67\1\107"+
    "\4\67\1\142\20\67\37\110\1\125\10\110\1\143\14\110"+
    "\37\111\1\126\11\111\1\144\13\111\25\0\1\145\37\0"+
    "\25\37\1\146\1\37\1\54\35\37\1\0\1\131\21\0"+
    "\1\132\7\0\1\131\55\0\1\147\45\0\3\150\3\0"+
    "\1\150\51\0\1\135\1\134\5\135\1\151\14\135\1\152"+
    "\6\135\1\134\55\135\1\152\40\135\1\120\1\134\1\135"+
    "\21\120\1\136\1\153\5\120\1\134\30\120\1\135\34\62"+
    "\1\154\2\62\1\102\25\62\37\63\1\103\4\63\1\155"+
    "\20\63\24\64\1\156\12\64\1\104\25\64\37\67\1\107"+
    "\5\67\1\157\17\67\37\110\1\125\7\110\1\160\15\110"+
    "\37\111\1\126\10\111\1\161\14\111\26\0\1\162\36\0"+
    "\26\37\1\163\1\54\35\37\10\0\1\164\55\0\1\23"+
    "\13\0\1\165\15\0\1\23\31\0\3\135\1\166\6\135"+
    "\1\166\11\135\1\152\35\135\1\166\26\135\1\152\1\167"+
    "\37\135\1\120\1\134\1\135\21\120\1\136\1\120\1\170"+
    "\4\120\1\134\30\120\1\135\25\62\1\171\11\62\1\102"+
    "\25\62\37\63\1\103\5\63\1\172\17\63\37\64\1\104"+
    "\2\64\1\173\22\64\24\67\1\174\2\67\1\175\7\67"+
    "\1\107\6\67\1\176\16\67\37\110\1\125\4\110\1\177"+
    "\20\110\34\111\1\200\2\111\1\126\25\111\12\0\1\201"+
    "\53\0\1\23\31\0\1\23\31\0\4\135\1\202\1\135"+
    "\1\202\15\135\1\152\64\135\1\152\1\135\1\203\36\135"+
    "\1\57\1\204\1\0\30\57\1\204\30\57\1\0\37\62"+
    "\1\102\3\62\1\2\2\62\1\205\16\62\37\63\1\103"+
    "\3\63\1\2\2\63\1\206\16\63\37\64\1\104\3\64"+
    "\1\2\21\64\25\67\1\207\11\67\1\107\64\67\1\107"+
    "\7\67\1\210\54\67\1\107\3\67\1\2\21\67\37\110"+
    "\1\125\5\110\1\211\17\110\35\111\1\212\1\111\1\126"+
    "\25\111\25\0\1\213\37\0\5\135\3\214\3\135\1\214"+
    "\10\135\1\152\40\135\1\0\1\215\31\0\1\215\32\0"+
    "\1\204\2\0\1\216\1\217\1\0\1\220\1\221\3\0"+
    "\1\222\1\0\1\223\1\224\13\0\1\204\22\0\1\225"+
    "\2\0\1\226\3\0\37\62\1\102\3\62\1\2\21\62"+
    "\37\63\1\103\3\63\1\2\21\63\37\67\1\107\6\67"+
    "\1\176\52\67\1\207\2\67\1\107\25\67\37\110\1\125"+
    "\6\110\1\227\16\110\37\111\1\126\12\111\1\230\12\111"+
    "\1\0\1\231\31\0\1\231\31\0\1\135\1\232\13\135"+
    "\1\233\6\135\1\152\6\135\1\232\31\135\1\0\1\215"+
    "\2\0\1\216\1\217\1\0\1\234\1\221\3\0\1\222"+
    "\1\0\1\223\1\224\13\0\1\215\22\0\1\225\2\0"+
    "\1\226\11\0\1\235\140\0\1\236\5\0\1\116\6\0"+
    "\1\116\47\0\1\116\1\237\7\0\1\240\75\0\1\241"+
    "\53\0\1\242\100\0\1\243\61\0\1\244\40\0\1\245"+
    "\21\0\1\246\47\0\37\110\1\125\3\110\1\2\21\110"+
    "\37\111\1\126\3\111\1\2\21\111\1\0\1\231\14\0"+
    "\1\247\14\0\1\231\31\0\1\250\1\232\1\135\21\250"+
    "\1\251\6\250\1\232\30\250\2\135\1\232\22\135\1\152"+
    "\6\135\1\232\31\135\63\0\1\237\12\0\1\252\74\0"+
    "\1\253\55\0\1\254\70\0\1\254\121\0\1\255\1\0"+
    "\1\256\31\0\1\257\117\0\1\260\16\0\1\261\64\0"+
    "\1\262\10\0\1\262\124\0\1\263\12\0\1\264\44\0"+
    "\1\265\11\0\1\250\1\266\1\135\21\250\1\251\6\250"+
    "\1\266\30\250\1\135\1\250\1\266\1\135\21\250\1\251"+
    "\1\267\5\250\1\266\30\250\1\135\55\0\1\270\1\0"+
    "\1\255\64\0\1\255\3\0\1\271\7\0\1\272\50\0"+
    "\1\255\6\0\1\273\31\0\1\273\47\0\1\255\40\0"+
    "\1\255\26\0\1\274\35\0\1\255\60\0\1\275\3\0"+
    "\1\255\64\0\1\255\1\276\57\0\1\255\3\0\1\255"+
    "\23\0\1\277\40\0\1\255\37\0\1\300\106\0\1\301"+
    "\10\0\1\135\1\266\17\135\1\302\2\135\1\152\6\135"+
    "\1\266\31\135\1\250\1\266\1\135\21\250\1\251\1\250"+
    "\1\303\4\250\1\266\30\250\1\135\60\0\1\276\15\0"+
    "\1\304\67\0\1\271\51\0\1\273\5\0\1\305\23\0"+
    "\1\273\37\0\1\272\76\0\1\255\63\0\1\306\66\0"+
    "\1\255\52\0\1\307\74\0\1\310\45\0\5\135\1\311"+
    "\11\135\1\311\4\135\1\152\40\135\1\22\1\312\1\0"+
    "\30\22\1\312\30\22\7\0\1\306\61\0\1\313\6\0"+
    "\1\313\47\0\1\313\57\0\1\255\16\0\1\314\132\0"+
    "\1\315\7\0\1\135\1\316\22\135\1\152\6\135\1\316"+
    "\31\135\1\0\1\312\2\0\1\216\1\217\1\0\1\234"+
    "\1\221\3\0\1\222\1\0\1\223\1\224\1\0\1\52"+
    "\11\0\1\312\22\0\1\225\2\0\1\226\7\0\1\317"+
    "\1\0\1\317\75\0\1\315\46\0\1\320\31\0\1\320"+
    "\31\0\1\135\1\316\22\135\1\152\2\135\1\321\3\135"+
    "\1\316\31\135\5\0\3\322\3\0\1\322\52\0\1\320"+
    "\15\0\1\323\13\0\1\320\31\0\24\135\1\152\1\324"+
    "\37\135\1\0\1\325\13\0\1\326\15\0\1\325\50\0"+
    "\1\327\45\0\24\135\1\152\1\135\1\330\36\135\1\22"+
    "\1\325\1\0\24\22\1\331\3\22\1\325\30\22\2\0"+
    "\1\325\31\0\1\325\32\0\1\332\4\0\1\333\5\0"+
    "\1\333\16\0\1\332\31\0\1\22\1\35\1\0\22\22"+
    "\1\334\5\22\1\35\30\22\2\0\1\332\22\0\1\335"+
    "\6\0\1\332\32\0\1\332\31\0\1\332\31\0\1\22"+
    "\1\35\1\0\23\22\1\336\4\22\1\35\30\22\11\0"+
    "\1\337\66\0\1\340\77\0\1\341\65\0\1\342\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\154\0\1\11\1\1\144\0"+
    "\1\1\5\0\1\1\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String TempOpen = " {*TIMEX ";
  String TempClose=" *TIMEX} ";  
  
  int theIndex = 0;
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Func_TIMEX(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Func_TIMEX(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /* Find where the AdvP started and insert the Temporal label */
			StringSearch.splitString(yytext(),"[AdvP", true, -1);
			out.write(TempOpen+StringSearch.firstString+TempClose+StringSearch.nextString);
          }
        case 5: break;
        case 3: 
          { out.write(TempOpen+yytext()+TempClose);
          }
        case 6: break;
        case 1: 
          { out.write(yytext());
          }
        case 7: break;
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
			out.write("\n");
          }
        case 8: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Func_TIMEX <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Func_TIMEX scanner = null;
        try {
          scanner = new Func_TIMEX( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
