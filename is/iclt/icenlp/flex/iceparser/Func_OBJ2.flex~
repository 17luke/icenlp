/* This transducer marks indirect objects of ditransitive verbs 		*/
/* The direct object has been marked by a previous transducer			*/
/* Nominative adjective phrases which have not been assigned a function 	*/
/* are marked as complements as well as past participle verbs 			*/
/* Additionally, it marks objects and complements of past participle verbs 	*/
/* and nominative objects of verbs that demand oblique case subjects 		*/

package is.ru.cs.nlp.icenlp.core.iceparser;
import is.ru.cs.nlp.icenlp.core.iceparser.utils.*;
import java.io.*;
%%

%public
%class Func_OBJ2
%standalone
%line

%unicode

%{
  String Obj1Open=" {*OBJ< ";
  String Obj1Close=" *OBJ<} ";
  String Obj2Open=" {*OBJ> ";
  String Obj2Close=" *OBJ>} ";  
  String IObjOpen=" {*IOBJ< ";
  String IObjClose=" *IOBJ<} ";
  
  
  String Comp0Open=" {*COMP ";
  String Comp0Close=" *COMP} ";
  String Comp1Open=" {*COMP< ";
  String Comp1Close=" *COMP<} ";
  
  String ObjNomOpen=" {*OBJNOM< ";
  String ObjNomClose=" *OBJNOM<} ";
  
  int theIndex = 0;
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  

%}

%eof{
	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }
%eof}


%include regularDef.txt
%include funcDef.txt
%include verbLexicon.txt

//VP = {OpenVP}" "~{CloseVP}
VP = {OpenVP}(" "|s)~({CloseVP}|{CloseVPs})
VPInf = {OpenVPi}~{CloseVPi}
VPPast = {OpenVPp}~{CloseVPp}
PP = {OpenPP}~{ClosePP}
//NPOblique = {OpenNP}[adg]~{CloseNP}
NPOblique = {NPAcc}|{NPDat}|{NPGen}
NPsOblique = {NPsAcc}|{NPsDat}|{NPsGen}

// Verbs that demand oblique case subjects
VPDat = {OpenVP}{WhiteSpace}+{VerbDat}~{CloseVP} 
VPAcc = {OpenVP}{WhiteSpace}+{VerbAcc}~{CloseVP} 

Object = ({NPOblique}|{NPsOblique})({WhiteSpace}+{FuncQualifier})?
NPDObj = "{*OBJ<"{WhiteSpace}+{DatObj}{WhiteSpace}+"*OBJ<}"
NPAObj = "{*OBJ<"{WhiteSpace}+{AccObj}{WhiteSpace}+"*OBJ<}"
AccObj = {NPAcc} | {NPsAcc}
DatObj = {NPDat} | {NPsDat}

CloseObj = "*OBJ"[<>]"}"
/* Intervening PP is possible: bera okkur [PP á brýn PP] bókmenntasmekk */
VerbDatObjAccObj = ({VP}|{VPInf}){WhiteSpace}+{NPDObj}{WhiteSpace}+({PP}{WhiteSpace}+)?{AccObj}
VerbAccObjDatObj = ({VP}|{VPInf}){WhiteSpace}+{NPAObj}{WhiteSpace}+({PP}{WhiteSpace}+)?{DatObj}

VPPastCompl = {OpenComp}{WhiteSpace}+{OpenVPp}~{CloseVPp}{WhiteSpace}+{CloseComp} 

NPPhrases = {OpenNP}~{CloseNP} | {OpenNPs}~{CloseNPs}

Complement1 = {APsNom}
Complement2 = {APNom} | {VPPast}

// Complement of a complement: "Hún var orðin húsfrú"

ComplCompl = {VPPastCompl}{WhiteSpace}+({Complement1}|{Complement2}|({NPNom}|{NPsNom})({WhiteSpace}+{FuncQualifier})?)

// An object that follows a past participle complement
ComplObj = {VPPastCompl}{WhiteSpace}+({NPAcc}|{NPDat}|{NPGen}|{NPsAcc}|{NPsDat}|{NPsGen})({WhiteSpace}+{FuncQualifier})?

// An object which follows an infinitive verb phrase inside a PP 
PPVPInfObj = {VPInf}{WhiteSpace}*{ClosePP}{WhiteSpace}+{Object}

// A nominative object which follows a verb which demands an oblique case subject
FuncSubjectOblique = {OpenSubj}{WhiteSpace}+({NPOblique}|{NPsOblique})~{CloseSubj}
SubjVerbObjNom = {FuncSubjectOblique}{WhiteSpace}+{VPDat}{WhiteSpace}+{NomSubject}
VerbSubjObjNom = {VPDat}{WhiteSpace}+{FuncSubjectOblique}{WhiteSpace}+{NomSubject}

%%

{VerbDatObjAccObj}	{ 
			/* First mark the object as an indirect object */
			String matchedStr = yytext();
			String newStr = matchedStr.replaceAll("\\*OBJ<","*IOBJ<");	/* change to indirect object */
			
			if (newStr.contains("PP]")) {	
				StringSearch.splitString(newStr,"PP]", true, 3);		
			}
			else {
				/* Find where the FuncObject phrase ended and insert the OBJ label */
				StringSearch.splitString(newStr,"*IOBJ<}", false, 7);		
			}
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
		} 		
{VerbAccObjDatObj}	{ 
			/* The first object is the direct object */
			String matchedStr = yytext();
			
			if (matchedStr.contains("PP]")) {	
				StringSearch.splitString(matchedStr,"PP]", true, 3);		
			}
			else {
				/* Find where the FuncObject phrase ended and insert the IOBJ label */
				StringSearch.splitString(matchedStr,"*OBJ<}", false, 6);		
			}
			out.write(StringSearch.firstString+IObjOpen+StringSearch.nextString+IObjClose);
		} 		

{ComplObj}	{ 
			/* Find where the Complement function ended and insert the OBJ label */
			theIndex = StringSearch.splitString(yytext(),"*COMP<}", true, 7);		
			if (theIndex == -1)
				theIndex = StringSearch.splitString(yytext(),"*COMP}", true, 6);			
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
		}

{ComplCompl}	{ 
			/* Find where the Complement function ended and insert the COMP label */
			theIndex = StringSearch.splitString(yytext(),"*COMP<}", true, 7);		
			if (theIndex == -1)
				theIndex = StringSearch.splitString(yytext(),"*COMP}", true, 6);			
			out.write(StringSearch.firstString+Comp1Open+StringSearch.nextString+Comp1Close);
		}
		
{SubjVerbObjNom}  { 
			StringSearch.splitString(yytext(),"VP]", false, 3);		
			out.write(StringSearch.firstString+ObjNomOpen+StringSearch.nextString+ObjNomClose);
		  } 
{VerbSubjObjNom}  { 
			theIndex = StringSearch.splitString(yytext(),"*SUBJ<}", true, 7);		
			if (theIndex == -1)
				theIndex = StringSearch.splitString(yytext(),"*SUBJ}", true, 6);	
			out.write(StringSearch.firstString+ObjNomOpen+StringSearch.nextString+ObjNomClose);
		  } 

{PPVPInfObj}	{ 
			//System.err.print("FOUND " + yytext() + " FOUND ");
			/* Find where the PP phrase ended and insert the OBJ label */
			StringSearch.splitString(yytext(),"PP]", false, 3);		
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
		} 

{Function}	{out.write(yytext());}	/* Don't touch the phrases that have already been function marked */

{NPPhrases}	{out.write(yytext());}	/* Don't touch NPs phrases */
{Complement1}	{out.write(Comp0Open+yytext()+Comp0Close);} 
{Complement2}	{out.write(Comp0Open+yytext()+Comp0Close);} 

"\n"		{ //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
		out.write("\n"); }
.		{ out.write(yytext());}

