/* This transducer marks adverb phrases, conjunction phrases and interjection phrases */
package is.ru.cs.nlp.icenlp.core.iceparser;
import java.io.*;
%%

%public
%class Phrase_AdvP
%standalone
%line

%unicode

%{
  String APOpen=" [AdvP ";
  String APClose=" AdvP] ";
  String CPOpen=" [CP ";
  String CPClose=" CP] ";
  String SCPOpen=" [SCP ";
  String SCPClose=" SCP] ";
  String InjOpen=" [InjP ";
  String InjClose=" InjP] ";
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  
%}

%eof{
	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }
%eof}

%include regularDef.txt

InterjectionTag = au{WhiteSpace}+
Interjection = {WordSpaces}{InterjectionTag}

AdverbPhrase = {Adverb}
InterjectionPhrase = {Interjection} 

MainConjWords = [oO]g|[eE](n(da)?|ða|llegar)|[hH]eldur|[nN]é
MainConjTag = c{WhiteSpace}+
MainConj = {WhiteSpace}*{MainConjWords}{WhiteSpace}+{MainConjTag}
MainConjPhrase = {MainConj} 
SubConjPhrase = {Conj}

%%
{MWE}			{ out.write(yytext());}
{MainConjPhrase}	{ out.write(CPOpen+yytext()+CPClose);}
{SubConjPhrase}		{ out.write(SCPOpen+yytext()+SCPClose);}
{AdverbPhrase}		{ out.write(APOpen+yytext()+APClose);}
{InterjectionPhrase}	{ out.write(InjOpen+yytext()+InjClose);}
"\n"			{ //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
			out.write("\n"); }
.			{ out.write(yytext());}
