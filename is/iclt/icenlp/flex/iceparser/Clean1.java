/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:42 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */

/* This transducer cleans the output file 			*/
/* (1. Removes NP info from a MWE phrase) phrase_NP now doen't touch MWE */
/* 2. Converts a sequence of adverbial phrases into one		*/
/* 3. Finds the occurence of a nominative adjective phrase inside a dative noun phrase */
/* like, [NPd [APn nátengdara lhenvm AP] sögu nveþ NP]					*/
/* and converts it to [APn nátengdara lhenvm AP] [NPd sögu nveþ NP] 			*/
/* 4. Finds the occurence of a noun phrase which includes two proper nouns, in which 	*/
/* the second one is a qualifier, like [NP Háskóla nkeo-s Íslands nhee-ö NP]		*/
/* Converts it to [NP Háskóla nkeo-s NP] [NP Íslands nhee-ö NP]				*/

package is.iclt.icenlp.flex.iceparser;
import java.util.regex.*;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:42 from the specification file
 * <tt>Clean1.flex</tt>
 */
public class Clean1 {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\22\1\0\1\1\1\2\22\0\1\1\11\0\1\0"+
    "\1\0\1\0\1\14\3\0\3\0\10\0\1\0\1\0\1\0\2\0"+
    "\1\16\1\0\1\0\1\0\1\0\3\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\21\1\0\1\17\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\2\0\1\15\1\0\1\20\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\10\1\6\1\4\1\13\1\3\1\0\1\0\1\3"+
    "\1\0\1\12\1\7\1\5\1\0\2\0\1\12\1\0\1\0\1\11"+
    "\1\0\1\3\2\0\1\0\1\0\1\0\170\0\1\12\7\0\1\5"+
    "\uff01\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\35\0\1\3\23\0\1\4\14\0"+
    "\1\5\2\0\1\5\12\0\1\4\12\0\1\4\12\0"+
    "\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\23\0\46\0\23\0\71\0\114\0\137\0\162"+
    "\0\205\0\230\0\253\0\276\0\321\0\344\0\367\0\u010a"+
    "\0\u011d\0\u0130\0\u0143\0\u0156\0\u0169\0\u017c\0\u018f\0\u01a2"+
    "\0\u01b5\0\u01c8\0\u01db\0\u01ee\0\u0201\0\u0214\0\u0227\0\u023a"+
    "\0\u024d\0\23\0\u0260\0\u0273\0\u0286\0\u0299\0\u02ac\0\u02bf"+
    "\0\u02d2\0\u02e5\0\u02f8\0\u030b\0\u031e\0\u0331\0\u0344\0\u0357"+
    "\0\u036a\0\u037d\0\u0390\0\u03a3\0\u03b6\0\u03c9\0\u03dc\0\u03ef"+
    "\0\u0402\0\u0415\0\u0428\0\u043b\0\u044e\0\u0461\0\u0474\0\u0487"+
    "\0\u049a\0\u04ad\0\u02ac\0\u04c0\0\u04d3\0\23\0\u04e6\0\u04f9"+
    "\0\u050c\0\u051f\0\u0532\0\u0545\0\u0558\0\u056b\0\u057e\0\u0591"+
    "\0\u05a4\0\u05b7\0\u05ca\0\u05dd\0\u05f0\0\u0603\0\u0616\0\u0629"+
    "\0\u063c\0\u064f\0\u0662\0\u0675\0\u0688\0\u069b\0\u06ae\0\u06c1"+
    "\0\u06d4\0\u06e7\0\u06fa\0\u070d\0\u0720\0\u0733\0\u0733";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\15\2\1\3\4\2\1\4\41\0\1\5\2\0\1\6"+
    "\11\0\1\7\31\0\1\10\14\0\1\11\21\0\1\12"+
    "\2\0\1\13\26\0\1\14\4\0\1\15\21\0\1\16"+
    "\1\13\1\0\17\16\1\0\16\14\1\17\4\14\1\0"+
    "\1\15\13\0\1\20\5\0\1\16\1\21\1\0\17\16"+
    "\1\0\10\14\1\22\5\14\1\17\4\14\16\0\1\23"+
    "\5\0\1\21\5\0\1\24\13\0\11\14\1\25\4\14"+
    "\1\17\4\14\17\0\1\26\6\0\1\27\5\0\1\27"+
    "\11\0\16\14\1\17\1\30\3\14\7\0\1\31\17\0"+
    "\1\32\1\0\1\32\14\0\16\14\1\17\1\14\1\33"+
    "\2\14\21\31\1\34\1\31\5\0\1\35\1\0\1\35"+
    "\14\0\1\36\21\0\17\31\1\37\1\31\1\34\1\31"+
    "\13\0\2\40\7\0\1\36\13\0\1\41\5\0\20\31"+
    "\1\42\1\34\1\31\12\0\1\43\26\0\1\44\5\0"+
    "\1\45\31\0\1\46\12\0\1\47\1\45\1\0\17\47"+
    "\12\0\1\50\11\0\1\47\1\51\1\0\17\47\20\0"+
    "\1\52\4\0\1\51\5\0\1\53\13\0\16\52\1\54"+
    "\4\52\3\0\1\55\5\0\1\55\11\0\10\52\1\56"+
    "\5\52\1\54\4\52\4\0\1\57\1\0\1\57\14\0"+
    "\11\52\1\60\4\52\1\54\4\52\6\0\1\61\14\0"+
    "\16\52\1\54\1\62\3\52\13\0\2\63\6\0\16\52"+
    "\1\54\1\52\1\64\2\52\12\0\1\65\11\0\1\66"+
    "\22\0\1\67\22\0\1\66\13\0\1\70\5\0\1\71"+
    "\1\67\1\72\16\71\1\73\1\72\16\0\1\74\4\0"+
    "\1\71\1\75\1\72\16\71\1\73\22\72\1\76\1\72"+
    "\1\71\1\75\1\72\14\71\1\77\1\71\1\73\1\72"+
    "\10\0\1\100\12\0\1\72\1\75\5\72\1\101\11\72"+
    "\1\76\20\72\1\102\1\72\1\76\1\72\1\71\1\75"+
    "\1\72\15\71\1\103\1\73\1\72\11\0\1\104\11\0"+
    "\3\72\1\105\5\72\1\105\7\72\1\76\21\72\1\106"+
    "\1\76\1\72\17\0\1\107\3\0\4\72\1\110\1\72"+
    "\1\110\12\72\1\76\1\72\16\107\1\111\4\107\6\72"+
    "\1\112\12\72\1\76\1\72\10\107\1\113\5\107\1\111"+
    "\4\107\13\72\2\114\4\72\1\76\1\72\11\107\1\115"+
    "\4\107\1\111\4\107\12\72\1\116\6\72\1\76\1\72"+
    "\16\107\1\111\1\117\3\107\1\72\1\67\17\72\1\76"+
    "\1\72\16\107\1\111\1\107\1\120\2\107\1\0\1\121"+
    "\22\0\1\121\13\0\1\122\23\0\1\123\14\0\1\124"+
    "\23\0\1\125\30\0\1\126\3\0\16\126\1\127\14\126"+
    "\1\130\5\126\1\127\15\126\1\131\4\126\1\127\22\126"+
    "\1\127\1\132\21\126\1\127\1\126\1\133\2\126\1\0"+
    "\1\134\22\0\1\134\13\0\1\135\23\0\1\136\14\0"+
    "\1\137\23\0\1\140\30\0\1\141\3\0\16\141\1\142"+
    "\14\141\1\143\5\141\1\142\15\141\1\144\4\141\1\142"+
    "\22\141\1\142\1\145\21\141\1\142\1\141\1\146\2\141"+
    "\1\0\1\147\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1862];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\35\0\1\11\23\0\1\1"+
    "\14\0\1\1\2\0\1\11\12\0\1\1\12\0\1\1"+
    "\12\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[103];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String nomStr = "n";
  String accStr = "a";
  String datStr = "d";
  String genStr = "g";
  
  private String analyseCase(char cas)
  {
  	switch (cas) {
  		case 'n' : return nomStr;
  		case 'o' : return accStr;
  		case 'þ' : return datStr;
  		case 'e' : return genStr;
  		default  : return "";
  	}
  }
  
  private String analyseTag(String tag)
  {
  	String result="";
  	
  	if ( (tag.charAt(0) == 'n') && (tag.length() >= 4))	/* noun */
          	return analyseCase(tag.charAt(3));	
        if ( ((tag.charAt(0) == 'f') || (tag.charAt(0) == 't')) && (tag.length() >= 5)) /* pronoun or numeral */
        	return analyseCase(tag.charAt(4));	
        	
        return result;
  }
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
      public void parse(java.io.Writer _out) throws java.io.IOException
      {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  
 


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Clean1(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Clean1(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
		out.write("\n");
          }
        case 6: break;
        case 3: 
          { String str = yytext();
				str = str.replaceAll("\\[NPd","");
				str = str.replaceAll("AP]","AP] [NPd");
				out.write(str);
          }
        case 7: break;
        case 4: 
          { String str = yytext();
			str = str.replaceAll("\\[AdvP","");	/* First remove all instances of adverb labels */
			str = str.replaceAll("AdvP]","");
			str = "[AdvP" + str + "AdvP] ";		/* Then add one instance */
		  	out.write(str);
          }
        case 8: break;
        case 1: 
          { out.write(yytext());
          }
        case 9: break;
        case 5: 
          { String str = yytext();
					// Search for the first nom/acc/dat proper noun tag 
					Pattern p = Pattern.compile("n[kvh][ef][noþ](g|-)[msö]");
					Matcher m = p.matcher(str);
					if (m.find())
					{
						// Return the indexes of the start char matched and the last character matched, plus one.
						int startIdx = m.start();
						int endIdx = m.end();
						String tag = str.substring(startIdx,endIdx);
						//System.err.println("Tag: " + tag);
						String caseStr = analyseTag(tag);
						String firstPart = str.substring(0,endIdx);
						String secondPart = str.substring(endIdx);
						// Need to replace [NPg at the beginning for [NPx 
						String replacementStr = "[NP" + caseStr;
						//System.err.println("First part: " + firstPart);
						//System.err.println("Second  part: " + secondPart);
						firstPart = firstPart.replaceFirst("\\[NPg",replacementStr);
						out.write(firstPart + " NP]" + " [NPg " + secondPart);
					}
					//else
					//	System.err.print("Did not match\n");
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Clean1 <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Clean1 scanner = null;
        try {
          scanner = new Clean1( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
