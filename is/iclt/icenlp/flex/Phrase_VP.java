/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:42 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */
 
/* This transducer marks verb phrases 	*/
/* Infinitive verb phrases and verb BE phrases are specially marked for use in later transducers */
package is.iclt.icenlp.flex.iceparser;
import java.util.regex.Pattern;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:42 from the specification file
 * <tt>Phrase_VP.flex</tt>
 */
public class Phrase_VP {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\53\1\0\1\1\1\2\22\0\1\1\13\0\1\0"+
    "\1\0\3\0\3\10\15\0\1\25\1\0\1\30\1\0\1\35\1\0"+
    "\1\0\1\44\2\0\1\46\1\0\1\33\1\0\1\0\1\26\1\0"+
    "\1\50\1\0\1\0\1\42\1\31\1\34\1\0\1\43\1\0\1\24"+
    "\1\0\1\27\1\0\1\36\1\0\1\20\1\12\1\22\1\11\1\6"+
    "\1\4\1\16\1\45\1\32\1\52\1\47\1\21\1\15\1\7\1\5"+
    "\1\0\1\0\1\37\1\17\1\23\1\40\1\13\1\0\1\3\1\51"+
    "\2\0\1\0\171\0\1\0\7\0\1\14\ufefe\0\1\41\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\15\1\1\2\107\0\1\3\1\4\15\0\1\5"+
    "\25\0\1\6\14\0\1\7\22\0\1\10\35\0\1\5"+
    "\7\0\1\3\1\4\7\0\1\3\1\4\7\0\1\3"+
    "\1\4\20\0\1\5\11\0\1\5\11\0\1\5\15\0"+
    "\1\3\1\4\42\0\1\7\2\0\1\5\13\0\1\6"+
    "\7\0\1\6\7\0\1\6\22\0\1\7\4\0\1\7"+
    "\4\0\1\7\12\0\1\6\35\0\1\7\11\0\1\5"+
    "\2\0\1\1\3\0\1\5\5\0\1\5\2\0\1\7"+
    "\17\0\1\1\20\0\1\5\6\0\1\1\17\0\1\7"+
    "\2\0\1\7\2\0\1\7\33\0\1\7\10\0\1\1"+
    "\12\0\1\7\34\0\1\7\4\0\1\7\4\0\1\7"+
    "\31\0\1\7\27\0\1\1\10\0\1\1\6\0\3\7"+
    "\7\0\1\7\2\1\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[655];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\204\0\54"+
    "\0\u0268\0\130\0\260\0\334\0\u0108\0\u0160\0\u018c\0\u01b8"+
    "\0\u01e4\0\u0210\0\u023c\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344"+
    "\0\u0370\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4"+
    "\0\u04d0\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604"+
    "\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84"+
    "\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\204"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18"+
    "\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78"+
    "\0\u0cb8\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac"+
    "\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c"+
    "\0\u1238\0\u1264\0\u1290\0\204\0\u12bc\0\u12e8\0\u1314\0\u1340"+
    "\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0"+
    "\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600"+
    "\0\u162c\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760"+
    "\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868\0\u1894\0\u18c0"+
    "\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20"+
    "\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80"+
    "\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0"+
    "\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40"+
    "\0\u1e6c\0\u1e98\0\u136c\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74"+
    "\0\u1fa0\0\u1fcc\0\u1ff8\0\u13f0\0\u2024\0\u2050\0\u207c\0\u20a8"+
    "\0\u20d4\0\u2100\0\u212c\0\u2158\0\u1474\0\u2184\0\u21b0\0\u21dc"+
    "\0\u2208\0\u2234\0\u2260\0\u1d38\0\u228c\0\u22b8\0\u22e4\0\u2310"+
    "\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470"+
    "\0\u1e98\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578\0\u25a4"+
    "\0\u25d0\0\u25fc\0\u1ff8\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8"+
    "\0\u2704\0\u2730\0\u275c\0\u2788\0\u2158\0\u27b4\0\u27e0\0\u280c"+
    "\0\u2838\0\u2864\0\u2890\0\u28bc\0\u28e8\0\u2914\0\u2940\0\u296c"+
    "\0\u1868\0\u2998\0\u29c4\0\u29f0\0\u2a1c\0\u2a48\0\u2a74\0\u2aa0"+
    "\0\u2acc\0\u2af8\0\u2b24\0\u2b50\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00"+
    "\0\u2c2c\0\u2c58\0\u2c84\0\u2cb0\0\u2cdc\0\u2d08\0\u2d34\0\u2d60"+
    "\0\u2d8c\0\u2db8\0\u2de4\0\u2e10\0\u2e3c\0\u2e68\0\u2e94\0\u2ec0"+
    "\0\u2eec\0\u2f18\0\u2f44\0\u2f70\0\u2f9c\0\u2fc8\0\u2ff4\0\u3020"+
    "\0\u304c\0\u296c\0\u3078\0\u30a4\0\u30d0\0\u30fc\0\u3128\0\u3154"+
    "\0\u3180\0\u31ac\0\u136c\0\u31d8\0\u3204\0\u3230\0\u325c\0\u3288"+
    "\0\u32b4\0\u32e0\0\u13f0\0\u330c\0\u3338\0\u3364\0\u3390\0\u33bc"+
    "\0\u33e8\0\u3414\0\u1474\0\u3440\0\u346c\0\u3498\0\u34c4\0\u2f70"+
    "\0\u34f0\0\u351c\0\u3548\0\u3574\0\u35a0\0\u35cc\0\u35f8\0\u3624"+
    "\0\u3650\0\u367c\0\u36a8\0\u36d4\0\u3700\0\u372c\0\u3758\0\u3784"+
    "\0\u37b0\0\u37dc\0\u3808\0\u3834\0\u3860\0\u388c\0\u38b8\0\u38e4"+
    "\0\u3910\0\u393c\0\u3968\0\u3994\0\u39c0\0\u39ec\0\u3a18\0\u3a44"+
    "\0\u3a70\0\u3a9c\0\u1868\0\u3ac8\0\u3af4\0\u3b20\0\u3b4c\0\u3b78"+
    "\0\u3ba4\0\u3bd0\0\u3bfc\0\u3c28\0\u3c54\0\u3c80\0\u3cac\0\u3cd8"+
    "\0\u3d04\0\u3d30\0\u3d5c\0\u3d88\0\u3db4\0\u3de0\0\u3e0c\0\u3e38"+
    "\0\u3e64\0\u3e90\0\u3ebc\0\u3ee8\0\u3f14\0\u3f40\0\u3f6c\0\u3f98"+
    "\0\u3fc4\0\u3ff0\0\u401c\0\u4048\0\u4074\0\u40a0\0\u40cc\0\u40f8"+
    "\0\u4124\0\u4150\0\u417c\0\u41a8\0\u41d4\0\u0ce4\0\u4200\0\u422c"+
    "\0\u4258\0\u4284\0\u42b0\0\u42dc\0\u4308\0\u4334\0\u4360\0\u438c"+
    "\0\u43b8\0\u43e4\0\u4410\0\u443c\0\u4468\0\u4494\0\u44c0\0\u44ec"+
    "\0\u4518\0\u4544\0\u4570\0\u459c\0\u45c8\0\u45f4\0\u4620\0\u464c"+
    "\0\u417c\0\u4678\0\u0f78\0\u46a4\0\u46d0\0\u46fc\0\u4284\0\u4728"+
    "\0\u4754\0\u4780\0\u47ac\0\u438c\0\u47d8\0\u4410\0\u4804\0\u4830"+
    "\0\u485c\0\u4888\0\u48b4\0\u48e0\0\u490c\0\u4938\0\u4964\0\u4990"+
    "\0\u49bc\0\u49e8\0\u10d8\0\u4a14\0\u4a40\0\u4a6c\0\u4a98\0\u4ac4"+
    "\0\u4af0\0\u4b1c\0\u4b48\0\u4b74\0\u4ba0\0\u4bcc\0\u48e0\0\u4bf8"+
    "\0\u4c24\0\u4c50\0\u4c7c\0\u4ca8\0\u4cd4\0\u4d00\0\u4d2c\0\u4d58"+
    "\0\u4d84\0\u4db0\0\u4ddc\0\u4e08\0\u4e34\0\u4e60\0\u4e8c\0\u4eb8"+
    "\0\u4ee4\0\u4c7c\0\u4f10\0\u4f3c\0\u4f68\0\u4f94\0\u4fc0\0\u4d00"+
    "\0\u4fec\0\u5018\0\u5044\0\u5070\0\u509c\0\u4d84\0\u50c8\0\u50f4"+
    "\0\u5120\0\u514c\0\u5178\0\u51a4\0\u51d0\0\u51fc\0\u5228\0\u5254"+
    "\0\u5280\0\u52ac\0\u52d8\0\u5304\0\u5330\0\u178c\0\u535c\0\u5388"+
    "\0\u53b4\0\u53e0\0\u540c\0\u5438\0\u5464\0\u5490\0\u54bc\0\u54e8"+
    "\0\u5514\0\u51d0\0\u5540\0\u556c\0\u5598\0\u55c4\0\u55f0\0\u561c"+
    "\0\u5648\0\u5674\0\u56a0\0\u56cc\0\u56f8\0\u5724\0\u5750\0\u577c"+
    "\0\u57a8\0\u57d4\0\u5800\0\u582c\0\u5858\0\u5884\0\u58b0\0\u58dc"+
    "\0\u5908\0\u5934\0\u5960\0\u598c\0\u59b8\0\u59e4\0\u5a10\0\u5a3c"+
    "\0\u5a68\0\u5a94\0\u5ac0\0\u5aec\0\u5b18\0\u5b44\0\u5b70\0\u5b9c"+
    "\0\u5bc8\0\u5bf4\0\u5c20\0\u5c4c\0\u5c78\0\u5ca4\0\u5cd0\0\u5cfc"+
    "\0\u5d28\0\u5d54\0\u59e4\0\u5d80\0\u5dac\0\u5dd8\0\u5e04\0\u5ac0"+
    "\0\u5e30\0\u5e5c\0\u5e88\0\u5eb4\0\u5b9c\0\u5ee0\0\u5f0c\0\u5f38"+
    "\0\u5f64\0\u5f90\0\u5fbc\0\u5fe8\0\u6014\0\u6040\0\u606c\0\u6098"+
    "\0\u60c4\0\u60f0\0\u611c\0\u6148\0\u6174\0\u61a0\0\u61cc\0\u61f8"+
    "\0\u6224\0\u6250\0\u5f90\0\u627c\0\u62a8\0\u62d4\0\u6300\0\u632c"+
    "\0\u6358\0\u2f9c\0\u6384\0\u63b0\0\u63dc\0\u6408\0\u6434\0\u6460"+
    "\0\u648c\0\u64b8\0\u351c\0\u64e4\0\u6510\0\u653c\0\u6568\0\u6594"+
    "\0\u65c0\0\u65ec\0\u6618\0\u6644\0\u6670\0\u669c\0\u66c8\0\u66f4"+
    "\0\u6720\0\u674c\0\u6778\0\u67a4\0\u4830\0\u4b1c\0\u67d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[655];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\2\1\5\4\2\1\6\3\2"+
    "\1\7\4\2\1\10\4\2\1\6\3\2\1\5\1\2"+
    "\1\11\1\12\1\13\1\12\1\14\2\15\2\16\1\11"+
    "\1\14\1\2\1\17\1\20\1\21\1\0\50\20\1\0"+
    "\1\20\1\22\1\0\3\20\1\23\4\20\1\24\3\20"+
    "\1\25\11\20\1\24\3\20\1\23\1\20\1\26\1\27"+
    "\1\30\1\27\1\31\2\32\2\33\1\26\1\31\1\20"+
    "\55\0\1\20\1\21\1\0\34\20\1\34\13\20\1\0"+
    "\1\20\1\21\1\0\2\20\1\35\1\36\11\20\1\37"+
    "\11\20\1\40\6\20\1\41\11\20\1\0\1\20\1\21"+
    "\1\0\36\20\1\42\11\20\1\0\1\20\1\21\1\0"+
    "\30\20\1\43\17\20\1\0\1\20\1\21\1\0\3\20"+
    "\1\44\44\20\1\0\1\20\1\21\1\0\34\20\1\45"+
    "\13\20\1\0\1\20\1\21\1\0\36\20\1\46\7\20"+
    "\1\47\1\20\1\0\1\20\1\21\1\0\34\20\1\50"+
    "\13\20\1\0\1\20\1\21\1\0\3\20\1\51\32\20"+
    "\1\52\11\20\1\0\1\20\1\21\1\0\15\20\1\53"+
    "\20\20\1\54\11\20\2\0\1\21\15\0\1\55\2\0"+
    "\1\56\31\0\1\20\1\57\1\0\20\20\1\60\14\20"+
    "\1\61\12\20\1\0\1\20\1\21\1\0\34\20\1\62"+
    "\13\20\1\0\1\20\1\21\1\0\34\20\1\63\13\20"+
    "\1\0\1\20\1\21\1\0\34\20\1\64\13\20\1\0"+
    "\1\20\1\21\1\0\34\20\1\65\13\20\1\0\1\20"+
    "\1\21\1\0\34\20\1\66\13\20\1\0\1\20\1\57"+
    "\1\0\34\20\1\67\1\61\12\20\1\0\1\20\1\21"+
    "\1\0\31\20\1\70\16\20\1\0\1\20\1\21\1\0"+
    "\46\20\1\71\1\20\1\0\1\20\1\21\1\0\36\20"+
    "\1\62\11\20\1\0\1\20\1\21\1\0\20\20\1\72"+
    "\27\20\1\0\1\20\1\21\1\0\44\20\1\73\3\20"+
    "\1\0\1\20\1\21\1\0\36\20\1\66\11\20\1\0"+
    "\1\20\1\21\1\0\27\20\1\74\20\20\1\0\1\20"+
    "\1\21\1\0\14\20\1\67\3\20\1\75\27\20\1\0"+
    "\1\20\1\21\1\0\16\20\1\76\31\20\1\0\1\20"+
    "\1\21\1\0\16\20\1\77\31\20\5\0\1\100\2\0"+
    "\1\101\2\0\2\100\1\102\2\0\1\103\1\0\1\104"+
    "\41\0\1\105\45\0\1\57\15\0\1\106\2\0\1\56"+
    "\31\0\1\20\1\57\1\0\50\20\1\0\1\20\1\57"+
    "\1\0\12\20\1\60\23\20\1\60\11\20\1\0\1\20"+
    "\1\21\1\0\35\20\1\61\12\20\1\0\1\20\1\21"+
    "\1\0\20\20\1\107\15\20\1\110\11\20\1\0\1\20"+
    "\1\57\1\0\14\20\1\67\21\20\1\111\11\20\1\0"+
    "\1\20\1\21\1\0\20\20\1\112\15\20\1\112\11\20"+
    "\1\0\1\20\1\21\1\0\27\20\1\113\5\20\1\61"+
    "\12\20\1\0\1\20\1\21\1\0\20\20\1\60\27\20"+
    "\1\0\1\20\1\21\1\0\32\20\1\114\15\20\1\0"+
    "\1\20\1\21\1\0\4\20\1\115\43\20\1\0\1\20"+
    "\1\21\1\0\20\20\1\116\27\20\1\0\1\20\1\21"+
    "\1\0\27\20\1\117\17\20\1\120\1\0\1\20\1\21"+
    "\1\0\20\20\1\121\27\20\1\0\1\20\1\57\1\0"+
    "\27\20\1\113\5\20\1\61\12\20\1\0\1\20\1\21"+
    "\1\0\16\20\1\122\31\20\1\0\1\20\1\21\1\0"+
    "\16\20\1\123\31\20\16\0\2\124\52\0\2\125\52\0"+
    "\2\126\52\0\2\127\53\0\1\130\35\0\1\131\1\105"+
    "\1\0\50\131\5\0\1\132\2\0\1\101\2\0\2\132"+
    "\1\102\2\0\1\103\1\0\1\104\32\0\1\20\1\21"+
    "\1\0\35\20\1\60\12\20\1\0\1\20\1\57\1\0"+
    "\15\20\1\60\11\20\1\133\5\20\1\134\12\20\1\0"+
    "\1\20\1\57\1\0\14\20\1\67\33\20\1\0\1\20"+
    "\1\21\1\0\15\20\1\135\11\20\1\135\5\20\1\136"+
    "\12\20\1\0\1\20\1\57\1\0\34\20\1\60\13\20"+
    "\1\0\1\20\1\21\1\0\33\20\1\137\14\20\1\0"+
    "\1\20\1\21\1\0\6\20\1\112\6\20\1\135\11\20"+
    "\1\135\5\20\1\136\12\20\1\0\1\20\1\21\1\0"+
    "\27\20\1\140\5\20\1\141\12\20\1\0\1\20\1\57"+
    "\1\0\14\20\1\67\17\20\1\60\1\20\1\60\11\20"+
    "\1\0\1\20\1\21\1\0\15\20\1\111\17\20\1\142"+
    "\12\20\1\0\1\20\1\21\1\0\15\20\1\60\11\20"+
    "\1\133\5\20\1\143\12\20\1\0\1\20\1\21\1\0"+
    "\15\20\1\135\11\20\1\135\20\20\1\0\1\20\1\21"+
    "\1\0\35\20\1\144\12\20\11\0\1\145\44\0\1\146"+
    "\55\0\1\147\7\0\1\147\31\0\1\147\1\0\1\147"+
    "\4\0\1\150\1\151\1\0\50\150\1\0\1\131\1\152"+
    "\1\0\50\131\16\0\2\153\35\0\1\20\1\57\1\0"+
    "\34\20\1\60\1\20\1\60\11\20\1\0\1\20\1\21"+
    "\1\0\12\20\1\60\21\20\1\60\13\20\1\0\1\20"+
    "\1\21\1\0\14\20\1\67\33\20\1\0\1\20\1\21"+
    "\1\0\12\20\1\135\1\20\1\67\33\20\1\0\1\20"+
    "\1\21\1\0\22\20\1\154\1\155\1\20\1\156\22\20"+
    "\1\0\1\20\1\57\1\0\14\20\1\67\17\20\1\60"+
    "\13\20\1\0\1\20\1\57\1\0\12\20\1\111\1\20"+
    "\1\67\21\20\1\60\11\20\1\0\1\20\1\21\1\0"+
    "\12\20\1\111\35\20\1\0\1\20\1\21\1\0\12\20"+
    "\1\60\35\20\1\0\1\20\1\21\1\0\12\20\1\135"+
    "\23\20\1\157\11\20\5\0\1\160\1\0\1\160\45\0"+
    "\1\161\1\146\1\0\50\161\5\0\1\162\1\0\1\162"+
    "\45\0\1\150\1\163\1\0\50\150\2\0\1\152\15\0"+
    "\1\164\44\0\1\165\43\0\1\20\1\21\1\0\6\20"+
    "\1\166\14\20\1\167\24\20\1\0\1\20\1\21\1\0"+
    "\23\20\1\170\24\20\1\0\1\20\1\21\1\0\23\20"+
    "\1\171\24\20\1\0\1\20\1\21\1\0\35\20\1\136"+
    "\12\20\10\0\1\172\4\0\1\172\37\0\1\161\1\173"+
    "\1\0\50\161\6\0\3\174\4\0\1\174\40\0\1\163"+
    "\15\0\1\175\43\0\1\101\50\0\1\176\1\0\1\176"+
    "\45\0\1\20\1\21\1\0\10\20\1\177\37\20\1\0"+
    "\1\167\1\200\1\201\30\167\1\202\17\167\1\201\1\170"+
    "\1\203\1\204\30\170\1\205\17\170\1\204\1\171\1\206"+
    "\1\207\30\171\1\210\17\171\1\207\1\0\1\211\53\0"+
    "\1\173\15\0\1\212\53\0\1\103\43\0\1\213\4\0"+
    "\1\213\37\0\1\20\1\21\1\0\23\20\1\214\24\20"+
    "\1\0\1\201\1\200\15\201\1\215\2\201\1\216\10\201"+
    "\1\217\53\201\1\217\20\201\1\167\1\200\1\201\30\167"+
    "\1\202\1\220\16\167\1\201\1\204\1\203\15\204\1\221"+
    "\2\204\1\222\10\204\1\223\53\204\1\223\20\204\1\170"+
    "\1\203\1\204\30\170\1\205\1\224\16\170\1\204\1\207"+
    "\1\206\15\207\1\225\2\207\1\226\10\207\1\227\53\207"+
    "\1\227\20\207\1\171\1\206\1\207\30\171\1\210\1\230"+
    "\16\171\1\207\1\231\1\211\1\0\21\231\1\232\26\231"+
    "\20\0\1\233\35\0\1\234\52\0\1\214\1\235\1\236"+
    "\30\214\1\237\17\214\1\236\4\201\1\240\2\201\1\241"+
    "\2\201\2\240\1\242\2\201\1\243\1\201\1\244\11\201"+
    "\1\217\27\201\1\245\23\201\1\217\53\201\1\217\1\246"+
    "\17\201\1\167\1\200\1\201\30\167\1\202\1\167\1\247"+
    "\15\167\1\201\4\204\1\250\2\204\1\251\2\204\2\250"+
    "\1\252\2\204\1\253\1\204\1\254\11\204\1\223\27\204"+
    "\1\255\23\204\1\223\53\204\1\223\1\256\17\204\1\170"+
    "\1\203\1\204\30\170\1\205\1\170\1\257\15\170\1\204"+
    "\4\207\1\260\2\207\1\261\2\207\2\260\1\262\2\207"+
    "\1\263\1\207\1\264\11\207\1\227\27\207\1\265\23\207"+
    "\1\227\53\207\1\227\1\266\17\207\1\171\1\206\1\207"+
    "\30\171\1\210\1\171\1\267\15\171\1\207\1\231\1\270"+
    "\1\0\50\231\1\0\1\231\1\270\1\0\22\231\1\271"+
    "\25\231\16\0\2\272\35\0\1\231\1\234\1\0\21\231"+
    "\1\232\26\231\1\0\1\236\1\235\15\236\1\273\2\236"+
    "\1\274\10\236\1\275\53\236\1\275\20\236\1\214\1\235"+
    "\1\236\30\214\1\237\1\276\16\214\1\236\15\201\2\277"+
    "\14\201\1\217\35\201\2\300\14\201\1\217\35\201\2\301"+
    "\14\201\1\217\35\201\2\302\14\201\1\217\36\201\1\303"+
    "\14\201\1\217\20\201\1\304\1\245\1\201\30\304\1\305"+
    "\17\304\34\201\1\217\1\201\1\306\16\201\1\167\1\200"+
    "\1\201\30\167\1\202\2\167\1\307\14\167\1\201\15\204"+
    "\2\310\14\204\1\223\35\204\2\311\14\204\1\223\35\204"+
    "\2\312\14\204\1\223\35\204\2\313\14\204\1\223\36\204"+
    "\1\314\14\204\1\223\20\204\1\315\1\255\1\204\30\315"+
    "\1\316\17\315\34\204\1\223\1\204\1\317\16\204\1\170"+
    "\1\203\1\204\30\170\1\205\2\170\1\320\14\170\1\204"+
    "\15\207\2\321\14\207\1\227\35\207\2\322\14\207\1\227"+
    "\35\207\2\323\14\207\1\227\35\207\2\324\14\207\1\227"+
    "\36\207\1\325\14\207\1\227\20\207\1\326\1\265\1\207"+
    "\30\326\1\327\17\326\34\207\1\227\1\207\1\330\16\207"+
    "\1\171\1\206\1\207\30\171\1\210\2\171\1\331\14\171"+
    "\1\207\1\0\1\270\15\0\1\332\34\0\1\231\1\270"+
    "\1\0\6\231\1\333\41\231\1\0\1\161\1\334\1\0"+
    "\50\161\1\0\4\236\1\335\2\236\1\336\2\236\2\335"+
    "\1\337\2\236\1\340\1\236\1\341\11\236\1\275\27\236"+
    "\1\342\23\236\1\275\53\236\1\275\1\343\17\236\1\214"+
    "\1\235\1\236\30\214\1\237\1\214\1\344\15\214\1\236"+
    "\10\201\1\345\22\201\1\217\21\201\1\346\31\201\1\217"+
    "\23\201\1\347\7\201\1\347\17\201\1\217\11\201\1\347"+
    "\1\201\1\347\4\201\1\350\1\351\1\201\30\350\1\352"+
    "\17\350\1\201\1\304\1\353\1\201\30\304\1\305\17\304"+
    "\1\201\1\304\1\353\1\201\30\304\1\305\1\354\16\304"+
    "\34\201\1\217\2\201\1\355\15\201\1\167\1\200\1\201"+
    "\22\167\1\356\5\167\1\202\17\167\1\201\10\204\1\357"+
    "\22\204\1\223\21\204\1\360\31\204\1\223\23\204\1\361"+
    "\7\204\1\361\17\204\1\223\11\204\1\361\1\204\1\361"+
    "\4\204\1\362\1\363\1\204\30\362\1\364\17\362\1\204"+
    "\1\315\1\365\1\204\30\315\1\316\17\315\1\204\1\315"+
    "\1\365\1\204\30\315\1\316\1\366\16\315\34\204\1\223"+
    "\2\204\1\367\15\204\1\170\1\203\1\204\23\170\1\370"+
    "\4\170\1\205\17\170\1\204\10\207\1\371\22\207\1\227"+
    "\21\207\1\372\31\207\1\227\23\207\1\373\7\207\1\373"+
    "\17\207\1\227\11\207\1\373\1\207\1\373\4\207\1\374"+
    "\1\375\1\207\30\374\1\376\17\374\1\207\1\326\1\377"+
    "\1\207\30\326\1\327\17\326\1\207\1\326\1\377\1\207"+
    "\30\326\1\327\1\u0100\16\326\34\207\1\227\2\207\1\u0101"+
    "\15\207\1\171\1\206\1\207\25\171\1\u0102\2\171\1\210"+
    "\17\171\1\207\17\0\1\u0103\34\0\1\231\1\270\1\0"+
    "\10\231\1\u0104\37\231\1\0\15\236\2\u0105\14\236\1\275"+
    "\35\236\2\u0106\14\236\1\275\35\236\2\u0107\14\236\1\275"+
    "\35\236\2\u0108\14\236\1\275\36\236\1\u0109\14\236\1\275"+
    "\20\236\1\u010a\1\342\1\236\30\u010a\1\u010b\17\u010a\34\236"+
    "\1\275\1\236\1\u010c\16\236\1\214\1\235\1\236\30\214"+
    "\1\237\2\214\1\u010d\14\214\1\236\4\201\1\u010e\1\201"+
    "\1\u010e\24\201\1\217\20\201\1\u010f\1\346\1\201\30\u010f"+
    "\1\u0110\17\u010f\5\201\1\u0111\1\201\1\u0111\24\201\1\217"+
    "\20\201\1\350\1\u0112\1\201\30\350\1\352\17\350\1\201"+
    "\1\350\1\u0112\1\201\30\350\1\352\1\u0113\16\350\2\201"+
    "\1\353\15\201\1\u0114\13\201\1\217\20\201\1\304\1\353"+
    "\1\201\30\304\1\305\1\304\1\u0115\15\304\26\201\1\u0116"+
    "\5\201\1\217\20\201\1\167\1\200\1\201\23\167\1\u0117"+
    "\4\167\1\202\17\167\1\201\4\204\1\u0118\1\204\1\u0118"+
    "\24\204\1\223\20\204\1\u0119\1\360\1\204\30\u0119\1\u011a"+
    "\17\u0119\5\204\1\u011b\1\204\1\u011b\24\204\1\223\20\204"+
    "\1\362\1\u011c\1\204\30\362\1\364\17\362\1\204\1\362"+
    "\1\u011c\1\204\30\362\1\364\1\u011d\16\362\2\204\1\365"+
    "\15\204\1\u011e\13\204\1\223\20\204\1\315\1\365\1\204"+
    "\30\315\1\316\1\315\1\u011f\15\315\27\204\1\u0120\4\204"+
    "\1\223\20\204\1\170\1\203\1\204\23\170\1\u0121\4\170"+
    "\1\205\17\170\1\204\4\207\1\u0122\1\207\1\u0122\24\207"+
    "\1\227\20\207\1\u0123\1\372\1\207\30\u0123\1\u0124\17\u0123"+
    "\5\207\1\u0125\1\207\1\u0125\24\207\1\227\20\207\1\374"+
    "\1\u0126\1\207\30\374\1\376\17\374\1\207\1\374\1\u0126"+
    "\1\207\30\374\1\376\1\u0127\16\374\2\207\1\377\15\207"+
    "\1\u0128\13\207\1\227\20\207\1\326\1\377\1\207\30\326"+
    "\1\327\1\326\1\u0129\15\326\31\207\1\u012a\2\207\1\227"+
    "\20\207\1\171\1\206\1\207\23\171\1\u012b\4\171\1\210"+
    "\17\171\1\207\15\0\2\u012c\35\0\1\231\1\270\1\0"+
    "\23\231\1\u012d\24\231\1\0\10\236\1\u012e\22\236\1\275"+
    "\21\236\1\u012f\31\236\1\275\23\236\1\u0130\7\236\1\u0130"+
    "\17\236\1\275\11\236\1\u0130\1\236\1\u0130\4\236\1\u0131"+
    "\1\u0132\1\236\30\u0131\1\u0133\17\u0131\1\236\1\u010a\1\u0134"+
    "\1\236\30\u010a\1\u010b\17\u010a\1\236\1\u010a\1\u0134\1\236"+
    "\30\u010a\1\u010b\1\u0135\16\u010a\34\236\1\275\2\236\1\u0136"+
    "\15\236\1\214\1\235\1\236\22\214\1\u0137\5\214\1\237"+
    "\17\214\1\236\7\201\1\u0138\4\201\1\u0138\16\201\1\217"+
    "\20\201\1\u010f\1\u0139\1\201\30\u010f\1\u0110\17\u010f\1\201"+
    "\1\u010f\1\u0139\1\201\30\u010f\1\u0110\1\u013a\16\u010f\6\201"+
    "\3\u013b\4\201\1\u013b\16\201\1\217\21\201\1\u0112\15\201"+
    "\1\u013c\13\201\1\217\20\201\1\350\1\u0112\1\201\30\350"+
    "\1\352\1\350\1\u013d\15\350\10\201\1\241\23\201\1\217"+
    "\20\201\1\304\1\353\1\201\30\304\1\305\2\304\1\u013e"+
    "\14\304\27\201\1\u013f\4\201\1\217\20\201\1\167\1\200"+
    "\1\201\24\167\1\2\3\167\1\202\17\167\1\201\7\204"+
    "\1\u0140\4\204\1\u0140\16\204\1\223\20\204\1\u0119\1\u0141"+
    "\1\204\30\u0119\1\u011a\17\u0119\1\204\1\u0119\1\u0141\1\204"+
    "\30\u0119\1\u011a\1\u0142\16\u0119\6\204\3\u0143\4\204\1\u0143"+
    "\16\204\1\223\21\204\1\u011c\15\204\1\u0144\13\204\1\223"+
    "\20\204\1\362\1\u011c\1\204\30\362\1\364\1\362\1\u0145"+
    "\15\362\10\204\1\251\23\204\1\223\20\204\1\315\1\365"+
    "\1\204\30\315\1\316\2\315\1\u0146\14\315\27\204\1\u0147"+
    "\4\204\1\223\20\204\1\170\1\203\1\204\24\170\1\2"+
    "\3\170\1\205\17\170\1\204\7\207\1\u0148\4\207\1\u0148"+
    "\16\207\1\227\20\207\1\u0123\1\u0149\1\207\30\u0123\1\u0124"+
    "\17\u0123\1\207\1\u0123\1\u0149\1\207\30\u0123\1\u0124\1\u014a"+
    "\16\u0123\6\207\3\u014b\4\207\1\u014b\16\207\1\227\21\207"+
    "\1\u0126\15\207\1\u014c\13\207\1\227\20\207\1\374\1\u0126"+
    "\1\207\30\374\1\376\1\374\1\u014d\15\374\10\207\1\261"+
    "\23\207\1\227\20\207\1\326\1\377\1\207\30\326\1\327"+
    "\2\326\1\u014e\14\326\27\207\1\u014f\4\207\1\227\20\207"+
    "\1\171\1\206\1\207\24\171\1\2\3\171\1\210\17\171"+
    "\1\207\1\231\1\u0150\1\0\50\231\1\0\1\u012d\1\u0151"+
    "\1\u0152\22\u012d\1\u0153\25\u012d\1\u0152\4\236\1\u0154\1\236"+
    "\1\u0154\24\236\1\275\20\236\1\u0155\1\u012f\1\236\30\u0155"+
    "\1\u0156\17\u0155\5\236\1\u0157\1\236\1\u0157\24\236\1\275"+
    "\20\236\1\u0131\1\u0158\1\236\30\u0131\1\u0133\17\u0131\1\236"+
    "\1\u0131\1\u0158\1\236\30\u0131\1\u0133\1\u0159\16\u0131\2\236"+
    "\1\u0134\15\236\1\u015a\13\236\1\275\20\236\1\u010a\1\u0134"+
    "\1\236\30\u010a\1\u010b\1\u010a\1\u015b\15\u010a\26\236\1\u015c"+
    "\5\236\1\275\20\236\1\214\1\235\1\236\6\214\1\u015d"+
    "\21\214\1\237\17\214\1\236\1\201\1\u015e\31\201\1\217"+
    "\21\201\1\u0139\15\201\1\u015f\13\201\1\217\20\201\1\u010f"+
    "\1\u0139\1\201\30\u010f\1\u0110\1\u010f\1\u0160\15\u010f\20\201"+
    "\1\243\13\201\1\217\20\201\1\350\1\u0112\1\201\30\350"+
    "\1\352\2\350\1\u0161\14\350\1\201\1\304\1\353\1\201"+
    "\22\304\1\u0162\5\304\1\305\17\304\30\201\1\4\3\201"+
    "\1\217\20\201\1\204\1\u0163\31\204\1\223\21\204\1\u0141"+
    "\15\204\1\u0164\13\204\1\223\20\204\1\u0119\1\u0141\1\204"+
    "\30\u0119\1\u011a\1\u0119\1\u0165\15\u0119\20\204\1\253\13\204"+
    "\1\223\20\204\1\362\1\u011c\1\204\30\362\1\364\2\362"+
    "\1\u0166\14\362\1\204\1\315\1\365\1\204\23\315\1\u0167"+
    "\4\315\1\316\17\315\30\204\1\4\3\204\1\223\20\204"+
    "\1\207\1\u0168\31\207\1\227\21\207\1\u0149\15\207\1\u0169"+
    "\13\207\1\227\20\207\1\u0123\1\u0149\1\207\30\u0123\1\u0124"+
    "\1\u0123\1\u016a\15\u0123\20\207\1\263\13\207\1\227\20\207"+
    "\1\374\1\u0126\1\207\30\374\1\376\2\374\1\u016b\14\374"+
    "\1\207\1\326\1\377\1\207\25\326\1\u016c\2\326\1\327"+
    "\17\326\30\207\1\4\3\207\1\227\20\207\1\u0152\1\u0151"+
    "\15\u0152\1\u016d\5\u0152\1\u016e\53\u0152\1\u016e\26\u0152\1\u012d"+
    "\1\u0151\1\u0152\6\u012d\1\u016f\13\u012d\1\u0153\25\u012d\1\u0152"+
    "\7\236\1\u0170\4\236\1\u0170\16\236\1\275\20\236\1\u0155"+
    "\1\u0171\1\236\30\u0155\1\u0156\17\u0155\1\236\1\u0155\1\u0171"+
    "\1\236\30\u0155\1\u0156\1\u0172\16\u0155\6\236\3\u0173\4\236"+
    "\1\u0173\16\236\1\275\21\236\1\u0158\15\236\1\u0174\13\236"+
    "\1\275\20\236\1\u0131\1\u0158\1\236\30\u0131\1\u0133\1\u0131"+
    "\1\u0175\15\u0131\10\236\1\336\23\236\1\275\20\236\1\u010a"+
    "\1\u0134\1\236\30\u010a\1\u010b\2\u010a\1\u0176\14\u010a\12\236"+
    "\1\u0177\21\236\1\275\20\236\1\214\1\235\1\236\10\214"+
    "\1\u0178\17\214\1\237\17\214\1\236\1\u0179\1\u015e\1\201"+
    "\21\u0179\1\u017a\6\u0179\1\u017b\17\u0179\20\201\1\u017c\13\201"+
    "\1\217\20\201\1\u010f\1\u0139\1\201\30\u010f\1\u0110\2\u010f"+
    "\1\u017d\14\u010f\1\201\1\350\1\u0112\1\201\22\350\1\u017e"+
    "\5\350\1\352\17\350\1\201\1\304\1\353\1\201\23\304"+
    "\1\u017f\4\304\1\305\17\304\1\201\1\u0180\1\u0163\1\204"+
    "\21\u0180\1\u0181\6\u0180\1\u0182\17\u0180\20\204\1\u0183\13\204"+
    "\1\223\20\204\1\u0119\1\u0141\1\204\30\u0119\1\u011a\2\u0119"+
    "\1\u0184\14\u0119\1\204\1\362\1\u011c\1\204\23\362\1\u0185"+
    "\4\362\1\364\17\362\1\204\1\315\1\365\1\204\23\315"+
    "\1\u0186\4\315\1\316\17\315\1\204\1\u0187\1\u0168\1\207"+
    "\21\u0187\1\u0188\6\u0187\1\u0189\17\u0187\20\207\1\u018a\13\207"+
    "\1\227\20\207\1\u0123\1\u0149\1\207\30\u0123\1\u0124\2\u0123"+
    "\1\u018b\14\u0123\1\207\1\374\1\u0126\1\207\25\374\1\u018c"+
    "\2\374\1\376\17\374\1\207\1\326\1\377\1\207\23\326"+
    "\1\u018d\4\326\1\327\17\326\1\207\17\u0152\1\u018e\5\u0152"+
    "\1\u016e\37\u0152\1\u018f\13\u0152\1\u016e\26\u0152\1\u012d\1\u0151"+
    "\1\u0152\10\u012d\1\u0190\11\u012d\1\u0153\25\u012d\1\u0152\1\236"+
    "\1\u0191\31\236\1\275\21\236\1\u0171\15\236\1\u0192\13\236"+
    "\1\275\20\236\1\u0155\1\u0171\1\236\30\u0155\1\u0156\1\u0155"+
    "\1\u0193\15\u0155\20\236\1\340\13\236\1\275\20\236\1\u0131"+
    "\1\u0158\1\236\30\u0131\1\u0133\2\u0131\1\u0194\14\u0131\1\236"+
    "\1\u010a\1\u0134\1\236\22\u010a\1\u0195\5\u010a\1\u010b\17\u010a"+
    "\14\236\1\u0196\17\236\1\275\20\236\1\214\1\235\1\236"+
    "\23\214\1\u0197\4\214\1\237\17\214\1\236\1\u0179\1\u0198"+
    "\1\201\30\u0179\1\u017b\17\u0179\1\201\1\u0179\1\u0198\1\201"+
    "\22\u0179\1\u0199\5\u0179\1\u017b\17\u0179\1\201\1\u0179\1\u0198"+
    "\1\201\30\u0179\1\u017b\1\u019a\16\u0179\16\201\2\u019b\14\201"+
    "\1\217\20\201\1\u010f\1\u0139\1\201\22\u010f\1\u019c\5\u010f"+
    "\1\u0110\17\u010f\1\201\1\350\1\u0112\1\201\23\350\1\u019d"+
    "\4\350\1\352\17\350\1\201\1\304\1\353\1\201\24\304"+
    "\1\u019e\3\304\1\305\17\304\1\201\1\u0180\1\u019f\1\204"+
    "\30\u0180\1\u0182\17\u0180\1\204\1\u0180\1\u019f\1\204\22\u0180"+
    "\1\u01a0\5\u0180\1\u0182\17\u0180\1\204\1\u0180\1\u019f\1\204"+
    "\30\u0180\1\u0182\1\u01a1\16\u0180\16\204\2\u01a2\14\204\1\223"+
    "\20\204\1\u0119\1\u0141\1\204\23\u0119\1\u01a3\4\u0119\1\u011a"+
    "\17\u0119\1\204\1\362\1\u011c\1\204\23\362\1\u01a4\4\362"+
    "\1\364\17\362\1\204\1\315\1\365\1\204\24\315\1\u019e"+
    "\3\315\1\316\17\315\1\204\1\u0187\1\u01a5\1\207\30\u0187"+
    "\1\u0189\17\u0187\1\207\1\u0187\1\u01a5\1\207\22\u0187\1\u01a6"+
    "\5\u0187\1\u0189\17\u0187\1\207\1\u0187\1\u01a5\1\207\30\u0187"+
    "\1\u0189\1\u01a7\16\u0187\16\207\2\u01a8\14\207\1\227\20\207"+
    "\1\u0123\1\u0149\1\207\25\u0123\1\u01a9\2\u0123\1\u0124\17\u0123"+
    "\1\207\1\374\1\u0126\1\207\23\374\1\u01aa\4\374\1\376"+
    "\17\374\1\207\1\326\1\377\1\207\24\326\1\u019e\3\326"+
    "\1\327\17\326\1\207\15\u0152\2\u01ab\6\u0152\1\u016e\41\u0152"+
    "\1\u01ac\11\u0152\1\u016e\26\u0152\1\u012d\1\u0151\1\u0152\22\u012d"+
    "\1\u0153\1\u01ad\24\u012d\1\u0152\1\u01ae\1\u0191\1\236\21\u01ae"+
    "\1\u01af\6\u01ae\1\u01b0\17\u01ae\20\236\1\u01b1\13\236\1\275"+
    "\20\236\1\u0155\1\u0171\1\236\30\u0155\1\u0156\2\u0155\1\u01b2"+
    "\14\u0155\1\236\1\u0131\1\u0158\1\236\22\u0131\1\u01b3\5\u0131"+
    "\1\u0133\17\u0131\1\236\1\u010a\1\u0134\1\236\6\u010a\1\u01b4"+
    "\21\u010a\1\u010b\17\u010a\27\236\1\u01b5\4\236\1\275\20\236"+
    "\1\214\1\235\1\236\24\214\1\2\3\214\1\237\17\214"+
    "\1\236\1\201\1\u0198\15\201\1\u01b6\13\201\1\217\20\201"+
    "\1\u0179\1\u0198\1\201\6\u0179\1\u01b7\21\u0179\1\u017b\17\u0179"+
    "\1\201\1\u0179\1\u0198\1\201\30\u0179\1\u017b\1\u0179\1\u01b8"+
    "\15\u0179\1\201\1\u010f\1\u01b9\1\201\30\u010f\1\u0110\17\u010f"+
    "\1\201\1\u010f\1\u0139\1\201\23\u010f\1\u01ba\4\u010f\1\u0110"+
    "\17\u010f\1\201\1\350\1\u0112\1\201\24\350\1\u01bb\3\350"+
    "\1\352\17\350\1\201\1\204\1\u019f\15\204\1\u01bc\13\204"+
    "\1\223\20\204\1\u0180\1\u019f\1\204\6\u0180\1\u01bd\21\u0180"+
    "\1\u0182\17\u0180\1\204\1\u0180\1\u019f\1\204\30\u0180\1\u0182"+
    "\1\u0180\1\u01be\15\u0180\1\204\1\u0119\1\u01bf\1\204\30\u0119"+
    "\1\u011a\17\u0119\1\204\1\u0119\1\u0141\1\204\23\u0119\1\u01c0"+
    "\4\u0119\1\u011a\17\u0119\1\204\1\362\1\u011c\1\204\24\362"+
    "\1\u01bb\3\362\1\364\17\362\1\204\1\207\1\u01a5\15\207"+
    "\1\u01c1\13\207\1\227\20\207\1\u0187\1\u01a5\1\207\6\u0187"+
    "\1\u01c2\21\u0187\1\u0189\17\u0187\1\207\1\u0187\1\u01a5\1\207"+
    "\30\u0187\1\u0189\1\u0187\1\u01c3\15\u0187\1\207\1\u0123\1\u01c4"+
    "\1\207\30\u0123\1\u0124\17\u0123\1\207\1\u0123\1\u0149\1\207"+
    "\23\u0123\1\u01c5\4\u0123\1\u0124\17\u0123\1\207\1\374\1\u0126"+
    "\1\207\24\374\1\u01bb\3\374\1\376\17\374\1\207\1\u012d"+
    "\1\u01c6\1\u0152\22\u012d\1\u0153\25\u012d\26\u0152\1\u016e\1\u01c7"+
    "\25\u0152\1\u012d\1\u0151\1\u0152\22\u012d\1\u0153\1\u012d\1\u01c8"+
    "\23\u012d\1\u0152\1\u01ae\1\u01c9\1\236\30\u01ae\1\u01b0\17\u01ae"+
    "\1\236\1\u01ae\1\u01c9\1\236\22\u01ae\1\u01ca\5\u01ae\1\u01b0"+
    "\17\u01ae\1\236\1\u01ae\1\u01c9\1\236\30\u01ae\1\u01b0\1\u01cb"+
    "\16\u01ae\16\236\2\u01cc\14\236\1\275\20\236\1\u0155\1\u0171"+
    "\1\236\22\u0155\1\u01cd\5\u0155\1\u0156\17\u0155\1\236\1\u0131"+
    "\1\u0158\1\236\6\u0131\1\u01ce\21\u0131\1\u0133\17\u0131\1\236"+
    "\1\u010a\1\u0134\1\236\10\u010a\1\u01cf\17\u010a\1\u010b\17\u010a"+
    "\30\236\1\4\3\236\1\275\20\236\17\201\1\u01d0\13\201"+
    "\1\217\20\201\1\u0179\1\u0198\1\201\10\u0179\1\u01d1\17\u0179"+
    "\1\u017b\17\u0179\1\201\1\u0179\1\u0198\1\201\30\u0179\1\u017b"+
    "\2\u0179\1\u01d2\14\u0179\1\201\1\u010f\1\u0139\1\201\24\u010f"+
    "\1\u01d3\3\u010f\1\u0110\17\u010f\1\201\17\204\1\u01d4\13\204"+
    "\1\223\20\204\1\u0180\1\u019f\1\204\10\u0180\1\u01d5\17\u0180"+
    "\1\u0182\17\u0180\1\204\1\u0180\1\u019f\1\204\30\u0180\1\u0182"+
    "\2\u0180\1\u01d6\14\u0180\1\204\1\u0119\1\u0141\1\204\24\u0119"+
    "\1\u01d3\3\u0119\1\u011a\17\u0119\1\204\17\207\1\u01d7\13\207"+
    "\1\227\20\207\1\u0187\1\u01a5\1\207\10\u0187\1\u01d8\17\u0187"+
    "\1\u0189\17\u0187\1\207\1\u0187\1\u01a5\1\207\30\u0187\1\u0189"+
    "\2\u0187\1\u01d9\14\u0187\1\207\1\u0123\1\u0149\1\207\24\u0123"+
    "\1\u01d3\3\u0123\1\u0124\17\u0123\1\207\25\u0152\1\u016e\1\u0152"+
    "\1\u01da\24\u0152\1\231\1\u01db\1\0\21\231\1\232\26\231"+
    "\1\0\1\236\1\u01c9\15\236\1\u01dc\13\236\1\275\20\236"+
    "\1\u01ae\1\u01c9\1\236\6\u01ae\1\u01dd\21\u01ae\1\u01b0\17\u01ae"+
    "\1\236\1\u01ae\1\u01c9\1\236\30\u01ae\1\u01b0\1\u01ae\1\u01de"+
    "\15\u01ae\1\236\1\u0155\1\u01df\1\236\30\u0155\1\u0156\17\u0155"+
    "\1\236\1\u0155\1\u0171\1\236\6\u0155\1\u01e0\21\u0155\1\u0156"+
    "\17\u0155\1\236\1\u0131\1\u0158\1\236\10\u0131\1\u01e1\17\u0131"+
    "\1\u0133\17\u0131\1\236\1\u010a\1\u0134\1\236\23\u010a\1\u01e2"+
    "\4\u010a\1\u010b\17\u010a\1\236\15\201\2\u01e3\14\201\1\217"+
    "\20\201\1\u0179\1\u0198\1\201\23\u0179\1\u01e4\4\u0179\1\u017b"+
    "\17\u0179\1\201\1\u0179\1\u0198\1\201\22\u0179\1\u01e5\5\u0179"+
    "\1\u017b\17\u0179\1\201\15\204\2\u01e6\14\204\1\223\20\204"+
    "\1\u0180\1\u019f\1\204\23\u0180\1\u01e7\4\u0180\1\u0182\17\u0180"+
    "\1\204\1\u0180\1\u019f\1\204\23\u0180\1\u01e8\4\u0180\1\u0182"+
    "\17\u0180\1\204\15\207\2\u01e9\14\207\1\227\20\207\1\u0187"+
    "\1\u01a5\1\207\23\u0187\1\u01ea\4\u0187\1\u0189\17\u0187\1\207"+
    "\1\u0187\1\u01a5\1\207\25\u0187\1\u01eb\2\u0187\1\u0189\17\u0187"+
    "\1\207\1\231\1\u01da\1\0\21\231\1\232\26\231\1\0"+
    "\1\231\1\u01db\1\0\14\231\1\u01ec\4\231\1\232\26\231"+
    "\1\0\17\236\1\u01ed\13\236\1\275\20\236\1\u01ae\1\u01c9"+
    "\1\236\10\u01ae\1\u01ee\17\u01ae\1\u01b0\17\u01ae\1\236\1\u01ae"+
    "\1\u01c9\1\236\30\u01ae\1\u01b0\2\u01ae\1\u01ef\14\u01ae\1\236"+
    "\1\u0155\1\u0171\1\236\10\u0155\1\u01f0\17\u0155\1\u0156\17\u0155"+
    "\1\236\1\u0131\1\u0158\1\236\23\u0131\1\u01f1\4\u0131\1\u0133"+
    "\17\u0131\1\236\1\u010a\1\u0134\1\236\24\u010a\1\u019e\3\u010a"+
    "\1\u010b\17\u010a\1\236\1\u0179\1\u01f2\1\201\30\u0179\1\u017b"+
    "\17\u0179\1\201\1\u01e4\1\u01f3\1\u01f4\22\u01e4\1\u01f5\5\u01e4"+
    "\1\u01f6\17\u01e4\1\u01f4\1\u0179\1\u0198\1\201\23\u0179\1\u01f7"+
    "\4\u0179\1\u017b\17\u0179\1\201\1\u0180\1\u01f8\1\204\30\u0180"+
    "\1\u0182\17\u0180\1\204\1\u01e7\1\u01f9\1\u01fa\22\u01e7\1\u01fb"+
    "\5\u01e7\1\u01fc\17\u01e7\1\u01fa\1\u0180\1\u019f\1\204\23\u0180"+
    "\1\u01fd\4\u0180\1\u0182\17\u0180\1\204\1\u0187\1\u01fe\1\207"+
    "\30\u0187\1\u0189\17\u0187\1\207\1\u01ea\1\u01ff\1\u0200\22\u01ea"+
    "\1\u0201\5\u01ea\1\u0202\17\u01ea\1\u0200\1\u0187\1\u01a5\1\207"+
    "\23\u0187\1\u0203\4\u0187\1\u0189\17\u0187\1\207\1\231\1\270"+
    "\1\0\14\231\1\u0204\33\231\1\0\15\236\2\u0205\14\236"+
    "\1\275\20\236\1\u01ae\1\u01c9\1\236\23\u01ae\1\u0206\4\u01ae"+
    "\1\u01b0\17\u01ae\1\236\1\u01ae\1\u01c9\1\236\22\u01ae\1\u0207"+
    "\5\u01ae\1\u01b0\17\u01ae\1\236\1\u0155\1\u0171\1\236\23\u0155"+
    "\1\u0208\4\u0155\1\u0156\17\u0155\1\236\1\u0131\1\u0158\1\236"+
    "\24\u0131\1\u01bb\3\u0131\1\u0133\17\u0131\1\236\1\u01f4\1\u01f3"+
    "\15\u01f4\1\u0209\5\u01f4\1\u020a\5\u01f4\1\u020b\45\u01f4\1\u020a"+
    "\5\u01f4\1\u020b\20\u01f4\1\u01e4\1\u01f3\1\u01f4\6\u01e4\1\u020c"+
    "\13\u01e4\1\u01f5\5\u01e4\1\u01f6\17\u01e4\1\u01f4\1\u01e4\1\u01f3"+
    "\1\u01f4\22\u01e4\1\u01f5\5\u01e4\1\u01f6\1\u020d\16\u01e4\1\u01f4"+
    "\1\u0179\1\u0198\1\201\24\u0179\1\u020e\3\u0179\1\u017b\17\u0179"+
    "\1\201\1\u01fa\1\u01f9\15\u01fa\1\u020f\5\u01fa\1\u0210\5\u01fa"+
    "\1\u0211\45\u01fa\1\u0210\5\u01fa\1\u0211\20\u01fa\1\u01e7\1\u01f9"+
    "\1\u01fa\6\u01e7\1\u0212\13\u01e7\1\u01fb\5\u01e7\1\u01fc\17\u01e7"+
    "\1\u01fa\1\u01e7\1\u01f9\1\u01fa\22\u01e7\1\u01fb\5\u01e7\1\u01fc"+
    "\1\u0213\16\u01e7\1\u01fa\1\u0180\1\u019f\1\204\24\u0180\1\u020e"+
    "\3\u0180\1\u0182\17\u0180\1\204\1\u0200\1\u01ff\15\u0200\1\u0214"+
    "\5\u0200\1\u0215\5\u0200\1\u0216\45\u0200\1\u0215\5\u0200\1\u0216"+
    "\20\u0200\1\u01ea\1\u01ff\1\u0200\6\u01ea\1\u0217\13\u01ea\1\u0201"+
    "\5\u01ea\1\u0202\17\u01ea\1\u0200\1\u01ea\1\u01ff\1\u0200\22\u01ea"+
    "\1\u0201\5\u01ea\1\u0202\1\u0218\16\u01ea\1\u0200\1\u0187\1\u01a5"+
    "\1\207\24\u0187\1\u020e\3\u0187\1\u0189\17\u0187\1\207\1\231"+
    "\1\270\1\0\12\231\2\u0219\34\231\1\0\1\u01ae\1\u021a"+
    "\1\236\30\u01ae\1\u01b0\17\u01ae\1\236\1\u0206\1\u021b\1\u021c"+
    "\22\u0206\1\u021d\5\u0206\1\u021e\17\u0206\1\u021c\1\u01ae\1\u01c9"+
    "\1\236\6\u01ae\1\u021f\21\u01ae\1\u01b0\17\u01ae\1\236\1\u0155"+
    "\1\u0171\1\236\24\u0155\1\u01d3\3\u0155\1\u0156\17\u0155\1\236"+
    "\17\u01f4\1\u0220\5\u01f4\1\u020a\5\u01f4\1\u020b\31\u01f4\1\u0221"+
    "\13\u01f4\1\u020a\5\u01f4\1\u020b\45\u01f4\1\u020a\5\u01f4\1\u020b"+
    "\1\u0222\17\u01f4\1\u01e4\1\u01f3\1\u01f4\10\u01e4\1\u0223\11\u01e4"+
    "\1\u01f5\5\u01e4\1\u01f6\17\u01e4\1\u01f4\1\u01e4\1\u01f3\1\u01f4"+
    "\22\u01e4\1\u01f5\5\u01e4\1\u01f6\1\u01e4\1\u0224\15\u01e4\1\u01f4"+
    "\17\u01fa\1\u0225\5\u01fa\1\u0210\5\u01fa\1\u0211\31\u01fa\1\u0226"+
    "\13\u01fa\1\u0210\5\u01fa\1\u0211\45\u01fa\1\u0210\5\u01fa\1\u0211"+
    "\1\u0227\17\u01fa\1\u01e7\1\u01f9\1\u01fa\10\u01e7\1\u0228\11\u01e7"+
    "\1\u01fb\5\u01e7\1\u01fc\17\u01e7\1\u01fa\1\u01e7\1\u01f9\1\u01fa"+
    "\22\u01e7\1\u01fb\5\u01e7\1\u01fc\1\u01e7\1\u0229\15\u01e7\1\u01fa"+
    "\17\u0200\1\u022a\5\u0200\1\u0215\5\u0200\1\u0216\31\u0200\1\u022b"+
    "\13\u0200\1\u0215\5\u0200\1\u0216\45\u0200\1\u0215\5\u0200\1\u0216"+
    "\1\u022c\17\u0200\1\u01ea\1\u01ff\1\u0200\10\u01ea\1\u022d\11\u01ea"+
    "\1\u0201\5\u01ea\1\u0202\17\u01ea\1\u0200\1\u01ea\1\u01ff\1\u0200"+
    "\22\u01ea\1\u0201\5\u01ea\1\u0202\1\u01ea\1\u022e\15\u01ea\1\u0200"+
    "\1\231\1\u022f\1\0\50\231\1\0\1\u021c\1\u021b\15\u021c"+
    "\1\u0230\5\u021c\1\u0231\5\u021c\1\u0232\45\u021c\1\u0231\5\u021c"+
    "\1\u0232\20\u021c\1\u0206\1\u021b\1\u021c\6\u0206\1\u0233\13\u0206"+
    "\1\u021d\5\u0206\1\u021e\17\u0206\1\u021c\1\u0206\1\u021b\1\u021c"+
    "\22\u0206\1\u021d\5\u0206\1\u021e\1\u0234\16\u0206\1\u021c\1\u01ae"+
    "\1\u01c9\1\236\10\u01ae\1\u0235\17\u01ae\1\u01b0\17\u01ae\1\236"+
    "\15\u01f4\2\u0236\6\u01f4\1\u020a\5\u01f4\1\u020b\33\u01f4\1\u0237"+
    "\11\u01f4\1\u020a\5\u01f4\1\u020b\45\u01f4\1\u020a\5\u01f4\1\u020b"+
    "\1\u01f4\1\u0238\16\u01f4\1\u01e4\1\u01f3\1\u01f4\22\u01e4\1\u01f5"+
    "\1\u0239\4\u01e4\1\u01f6\17\u01e4\1\u01f4\1\u01e4\1\u01f3\1\u01f4"+
    "\22\u01e4\1\u01f5\5\u01e4\1\u01f6\2\u01e4\1\u023a\14\u01e4\1\u01f4"+
    "\15\u01fa\2\u023b\6\u01fa\1\u0210\5\u01fa\1\u0211\33\u01fa\1\u023c"+
    "\11\u01fa\1\u0210\5\u01fa\1\u0211\45\u01fa\1\u0210\5\u01fa\1\u0211"+
    "\1\u01fa\1\u023d\16\u01fa\1\u01e7\1\u01f9\1\u01fa\22\u01e7\1\u01fb"+
    "\1\u023e\4\u01e7\1\u01fc\17\u01e7\1\u01fa\1\u01e7\1\u01f9\1\u01fa"+
    "\22\u01e7\1\u01fb\5\u01e7\1\u01fc\2\u01e7\1\u023f\14\u01e7\1\u01fa"+
    "\15\u0200\2\u0240\6\u0200\1\u0215\5\u0200\1\u0216\33\u0200\1\u0241"+
    "\11\u0200\1\u0215\5\u0200\1\u0216\45\u0200\1\u0215\5\u0200\1\u0216"+
    "\1\u0200\1\u0242\16\u0200\1\u01ea\1\u01ff\1\u0200\22\u01ea\1\u0201"+
    "\1\u0243\4\u01ea\1\u0202\17\u01ea\1\u0200\1\u01ea\1\u01ff\1\u0200"+
    "\22\u01ea\1\u0201\5\u01ea\1\u0202\2\u01ea\1\u0244\14\u01ea\1\u0200"+
    "\1\231\1\u022f\1\0\14\231\1\u01ec\33\231\1\0\17\u021c"+
    "\1\u0245\5\u021c\1\u0231\5\u021c\1\u0232\31\u021c\1\u0246\13\u021c"+
    "\1\u0231\5\u021c\1\u0232\45\u021c\1\u0231\5\u021c\1\u0232\1\u0247"+
    "\17\u021c\1\u0206\1\u021b\1\u021c\10\u0206\1\u0248\11\u0206\1\u021d"+
    "\5\u0206\1\u021e\17\u0206\1\u021c\1\u0206\1\u021b\1\u021c\22\u0206"+
    "\1\u021d\5\u0206\1\u021e\1\u0206\1\u0249\15\u0206\1\u021c\1\u01ae"+
    "\1\u01c9\1\236\23\u01ae\1\u024a\4\u01ae\1\u01b0\17\u01ae\1\236"+
    "\1\u01e4\1\u024b\1\u01f4\22\u01e4\1\u01f5\5\u01e4\1\u01f6\17\u01e4"+
    "\26\u01f4\1\u020a\1\u024c\4\u01f4\1\u020b\45\u01f4\1\u020a\5\u01f4"+
    "\1\u020b\2\u01f4\1\u024d\15\u01f4\1\u01e4\1\u01f3\1\u01f4\22\u01e4"+
    "\1\u01f5\1\u01e4\1\u024e\3\u01e4\1\u01f6\17\u01e4\1\u01f4\1\u01e4"+
    "\1\u01f3\1\u01f4\22\u01e4\1\u024f\5\u01e4\1\u01f6\17\u01e4\1\u01f4"+
    "\1\u01e7\1\u0250\1\u01fa\22\u01e7\1\u01fb\5\u01e7\1\u01fc\17\u01e7"+
    "\26\u01fa\1\u0210\1\u0251\4\u01fa\1\u0211\45\u01fa\1\u0210\5\u01fa"+
    "\1\u0211\2\u01fa\1\u0252\15\u01fa\1\u01e7\1\u01f9\1\u01fa\22\u01e7"+
    "\1\u01fb\1\u01e7\1\u0253\3\u01e7\1\u01fc\17\u01e7\1\u01fa\1\u01e7"+
    "\1\u01f9\1\u01fa\22\u01e7\1\u01fb\1\u0254\4\u01e7\1\u01fc\17\u01e7"+
    "\1\u01fa\1\u01ea\1\u0255\1\u0200\22\u01ea\1\u0201\5\u01ea\1\u0202"+
    "\17\u01ea\26\u0200\1\u0215\1\u0256\4\u0200\1\u0216\45\u0200\1\u0215"+
    "\5\u0200\1\u0216\2\u0200\1\u0257\15\u0200\1\u01ea\1\u01ff\1\u0200"+
    "\22\u01ea\1\u0201\1\u01ea\1\u0258\3\u01ea\1\u0202\17\u01ea\1\u0200"+
    "\1\u01ea\1\u01ff\1\u0200\22\u01ea\1\u0201\2\u01ea\1\u0259\2\u01ea"+
    "\1\u0202\17\u01ea\1\u0200\15\u021c\2\u025a\6\u021c\1\u0231\5\u021c"+
    "\1\u0232\33\u021c\1\u025b\11\u021c\1\u0231\5\u021c\1\u0232\45\u021c"+
    "\1\u0231\5\u021c\1\u0232\1\u021c\1\u025c\16\u021c\1\u0206\1\u021b"+
    "\1\u021c\22\u0206\1\u021d\1\u025d\4\u0206\1\u021e\17\u0206\1\u021c"+
    "\1\u0206\1\u021b\1\u021c\22\u0206\1\u021d\5\u0206\1\u021e\2\u0206"+
    "\1\u025e\14\u0206\1\u021c\1\u01ae\1\u01c9\1\236\24\u01ae\1\u020e"+
    "\3\u01ae\1\u01b0\17\u01ae\1\236\25\u01f4\1\u020a\1\u01f4\1\u025f"+
    "\3\u01f4\1\u020b\45\u01f4\1\u0260\5\u01f4\1\u020b\20\u01f4\1\u0179"+
    "\1\u0261\1\201\21\u0179\1\u017a\6\u0179\1\u017b\17\u0179\1\201"+
    "\1\u01e4\1\u01f3\1\u01f4\6\u01e4\1\u020c\13\u01e4\1\u01f5\1\u0262"+
    "\4\u01e4\1\u01f6\17\u01e4\1\u01f4\25\u01fa\1\u0210\1\u01fa\1\u0263"+
    "\3\u01fa\1\u0211\45\u01fa\1\u0210\1\u0264\4\u01fa\1\u0211\20\u01fa"+
    "\1\u0180\1\u0265\1\204\21\u0180\1\u0181\6\u0180\1\u0182\17\u0180"+
    "\1\204\1\u01e7\1\u01f9\1\u01fa\22\u01e7\1\u01fb\1\u0266\4\u01e7"+
    "\1\u01fc\17\u01e7\1\u01fa\25\u0200\1\u0215\1\u0200\1\u0267\3\u0200"+
    "\1\u0216\45\u0200\1\u0215\2\u0200\1\u0268\2\u0200\1\u0216\20\u0200"+
    "\1\u0187\1\u0269\1\207\21\u0187\1\u0188\6\u0187\1\u0189\17\u0187"+
    "\1\207\1\u01ea\1\u01ff\1\u0200\22\u01ea\1\u0201\1\u026a\4\u01ea"+
    "\1\u0202\17\u01ea\1\u0200\1\u0206\1\u026b\1\u021c\22\u0206\1\u021d"+
    "\5\u0206\1\u021e\17\u0206\26\u021c\1\u0231\1\u026c\4\u021c\1\u0232"+
    "\45\u021c\1\u0231\5\u021c\1\u0232\2\u021c\1\u026d\15\u021c\1\u0206"+
    "\1\u021b\1\u021c\22\u0206\1\u021d\1\u0206\1\u026e\3\u0206\1\u021e"+
    "\17\u0206\1\u021c\1\u0206\1\u021b\1\u021c\22\u0206\1\u026f\5\u0206"+
    "\1\u021e\17\u0206\1\u021c\1\u0179\1\u025f\1\201\21\u0179\1\u017a"+
    "\6\u0179\1\u017b\17\u0179\1\201\11\u01f4\1\u0221\13\u01f4\1\u020a"+
    "\1\u0270\4\u01f4\1\u020b\20\u01f4\1\u0179\1\u0261\1\201\14\u0179"+
    "\1\u0271\4\u0179\1\u017a\6\u0179\1\u017b\17\u0179\1\201\1\u01e4"+
    "\1\u01f3\1\u01f4\22\u01e4\1\u01f5\1\u01e4\1\u0272\3\u01e4\1\u01f6"+
    "\17\u01e4\1\u01f4\1\u0180\1\u0263\1\204\21\u0180\1\u0181\6\u0180"+
    "\1\u0182\17\u0180\1\204\25\u01fa\1\u0210\1\u0273\4\u01fa\1\u0211"+
    "\20\u01fa\1\u0180\1\u0265\1\204\14\u0180\1\u0274\4\u0180\1\u0181"+
    "\6\u0180\1\u0182\17\u0180\1\204\1\u01e7\1\u01f9\1\u01fa\22\u01e7"+
    "\1\u01fb\1\u01e7\1\u0272\3\u01e7\1\u01fc\17\u01e7\1\u01fa\1\u0187"+
    "\1\u0267\1\207\21\u0187\1\u0188\6\u0187\1\u0189\17\u0187\1\207"+
    "\25\u0200\1\u0215\1\u0275\4\u0200\1\u0216\20\u0200\1\u0187\1\u0269"+
    "\1\207\14\u0187\1\u0276\4\u0187\1\u0188\6\u0187\1\u0189\17\u0187"+
    "\1\207\1\u01ea\1\u01ff\1\u0200\22\u01ea\1\u0201\1\u01ea\1\u0272"+
    "\3\u01ea\1\u0202\17\u01ea\1\u0200\25\u021c\1\u0231\1\u021c\1\u0277"+
    "\3\u021c\1\u0232\45\u021c\1\u0278\5\u021c\1\u0232\20\u021c\1\u01ae"+
    "\1\u0279\1\236\21\u01ae\1\u01af\6\u01ae\1\u01b0\17\u01ae\1\236"+
    "\1\u0206\1\u021b\1\u021c\6\u0206\1\u027a\13\u0206\1\u021d\5\u0206"+
    "\1\u021e\17\u0206\1\u021c\25\u01f4\1\u020a\1\u01f4\1\u027b\3\u01f4"+
    "\1\u020b\20\u01f4\1\u0179\1\u0198\1\201\14\u0179\1\u027c\13\u0179"+
    "\1\u017b\17\u0179\1\201\25\u01fa\1\u0210\1\u01fa\1\u027b\3\u01fa"+
    "\1\u0211\20\u01fa\1\u0180\1\u019f\1\204\14\u0180\1\u027d\13\u0180"+
    "\1\u0182\17\u0180\1\204\25\u0200\1\u0215\1\u0200\1\u027b\3\u0200"+
    "\1\u0216\20\u0200\1\u0187\1\u01a5\1\207\14\u0187\1\u027e\13\u0187"+
    "\1\u0189\17\u0187\1\207\1\u01ae\1\u0277\1\236\21\u01ae\1\u01af"+
    "\6\u01ae\1\u01b0\17\u01ae\1\236\11\u021c\1\u027f\13\u021c\1\u0231"+
    "\5\u021c\1\u0232\20\u021c\1\u01ae\1\u0279\1\236\14\u01ae\1\u0280"+
    "\4\u01ae\1\u01af\6\u01ae\1\u01b0\17\u01ae\1\236\1\u0206\1\u021b"+
    "\1\u021c\10\u0206\1\u0281\11\u0206\1\u021d\5\u0206\1\u021e\17\u0206"+
    "\1\u021c\1\u0179\1\u0198\1\201\12\u0179\2\u0282\14\u0179\1\u017b"+
    "\17\u0179\1\201\1\u0180\1\u019f\1\204\12\u0180\2\u0283\14\u0180"+
    "\1\u0182\17\u0180\1\204\1\u0187\1\u01a5\1\207\12\u0187\2\u0284"+
    "\14\u0187\1\u0189\17\u0187\1\207\13\u021c\1\u0285\11\u021c\1\u0231"+
    "\5\u021c\1\u0232\20\u021c\1\u01ae\1\u01c9\1\236\14\u01ae\1\u0286"+
    "\13\u01ae\1\u01b0\17\u01ae\1\236\1\u0206\1\u021b\1\u021c\22\u0206"+
    "\1\u021d\1\u0287\4\u0206\1\u021e\17\u0206\1\u021c\1\u0179\1\u0288"+
    "\1\201\30\u0179\1\u017b\17\u0179\1\201\1\u0180\1\u0289\1\204"+
    "\30\u0180\1\u0182\17\u0180\1\204\1\u0187\1\u028a\1\207\30\u0187"+
    "\1\u0189\17\u0187\1\207\25\u021c\1\u0231\1\u028b\4\u021c\1\u0232"+
    "\20\u021c\1\u01ae\1\u01c9\1\236\12\u01ae\2\u028c\14\u01ae\1\u01b0"+
    "\17\u01ae\1\236\1\u0206\1\u021b\1\u021c\22\u0206\1\u021d\1\u0206"+
    "\1\u028d\3\u0206\1\u021e\17\u0206\1\u021c\1\u0179\1\u0288\1\201"+
    "\14\u0179\1\u0271\13\u0179\1\u017b\17\u0179\1\201\1\u0180\1\u0289"+
    "\1\204\14\u0180\1\u0274\13\u0180\1\u0182\17\u0180\1\204\1\u0187"+
    "\1\u028a\1\207\14\u0187\1\u0276\13\u0187\1\u0189\17\u0187\1\207"+
    "\25\u021c\1\u0231\1\u021c\1\u028e\3\u021c\1\u0232\20\u021c\1\u01ae"+
    "\1\u028f\1\236\30\u01ae\1\u01b0\17\u01ae\1\236\1\u01ae\1\u028f"+
    "\1\236\14\u01ae\1\u0280\13\u01ae\1\u01b0\17\u01ae\1\236";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\12\1\1\11\107\0\1\1\1\11"+
    "\15\0\1\1\25\0\1\11\14\0\1\1\22\0\1\1"+
    "\35\0\1\1\7\0\2\1\7\0\2\1\7\0\2\1"+
    "\20\0\1\1\11\0\1\1\11\0\1\1\15\0\2\1"+
    "\42\0\1\1\2\0\1\1\13\0\1\1\7\0\1\1"+
    "\7\0\1\1\22\0\1\1\4\0\1\1\4\0\1\1"+
    "\12\0\1\1\35\0\1\1\11\0\1\1\2\0\1\1"+
    "\3\0\1\1\5\0\1\1\2\0\1\1\17\0\1\1"+
    "\20\0\1\1\6\0\1\1\17\0\1\1\2\0\1\1"+
    "\2\0\1\1\33\0\1\1\10\0\1\1\12\0\1\1"+
    "\34\0\1\1\4\0\1\1\4\0\1\1\31\0\1\1"+
    "\27\0\1\1\10\0\1\1\6\0\3\1\7\0\3\1"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[655];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String VPOpen=" [VP ";
  String VPClose=" VP] "; 
  String VPIOpen=" [VPi ";
  String VPIClose=" VPi] "; 
  String VPBOpen=" [VPb ";
  String VPBClose=" VPb] "; 
  String VPSOpen=" [VPs ";
  String VPSClose=" VPs] "; 
  String VPPOpen=" [VPp ";
  String VPPClose=" VPp] ";
  String VPGOpen=" [VPg ";
  String VPGClose=" VPg] ";
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  
  
  private String getLastWord(String txt)
  {
  	String[] strs;
	String tag;
	String result="";
	Pattern p = Pattern.compile("\\s+");
	// Get all the individual lexemes as strings
	strs = p.split(txt);
        int len = strs.length;
        if (len >= 2)
        {
            tag = strs[len-1];
            /* if (tag.equal("ssg")) 		Is this necessary? */
            result = strs[len-2];
        }
        return result;
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Phrase_VP(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Phrase_VP(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { /* If the last word in the verb phrase is "vera" then mark as a BE phrase */
			  	String lastWord = getLastWord(yytext());
			  	if (lastWord.equals("vera"))
			  		out.write(VPBOpen+yytext()+VPBClose);
			  	else
					out.write(VPIOpen+yytext()+VPIClose);
          }
        case 9: break;
        case 4: 
          { out.write(VPGOpen+yytext()+VPGClose);
          }
        case 10: break;
        case 8: 
          { out.write(VPBOpen+yytext()+VPBClose);
          }
        case 11: break;
        case 7: 
          { /* If the last word in the verb phrase is "verið" then mark as a BE phrase */
			 	String lastWord = getLastWord(yytext());
			 	if (lastWord.equals("verið") || lastWord.equals("orðið"))
					out.write(VPBOpen+yytext()+VPBClose);
				else
					out.write(VPOpen+yytext()+VPClose);
          }
        case 12: break;
        case 6: 
          { out.write(VPPOpen+yytext()+VPPClose);
          }
        case 13: break;
        case 1: 
          { out.write(yytext());
          }
        case 14: break;
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
			out.write("\n");
          }
        case 15: break;
        case 3: 
          { /* If the last word in the verb phrase is "verið" then mark as a BE phrase */
				String lastWord = getLastWord(yytext());
				if (lastWord.equals("verið") || lastWord.equals("orðið"))
					out.write(VPBOpen+yytext()+VPBClose);
				else
					out.write(VPSOpen+yytext()+VPSClose);
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Phrase_VP <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Phrase_VP scanner = null;
        try {
          scanner = new Phrase_VP( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
