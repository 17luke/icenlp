/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:43 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */

/* This transducer marks potential complements */
package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:43 from the specification file
 * <tt>Func_COMP.flex</tt>
 */
public class Func_COMP {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\45\1\0\1\1\1\0\22\0\1\24\11\0\1\33"+
    "\1\0\1\25\1\0\3\0\3\0\10\0\1\42\1\0\1\42\2\0"+
    "\1\14\1\40\1\20\1\0\1\30\1\0\1\0\1\0\1\0\1\41"+
    "\1\0\1\36\1\26\1\17\1\0\1\15\1\34\1\0\1\21\1\0"+
    "\1\35\1\22\1\27\1\0\1\0\1\0\1\13\1\0\1\16\1\0"+
    "\1\31\1\0\1\11\1\5\1\0\1\4\1\2\1\0\1\7\1\0"+
    "\1\23\1\0\1\0\1\0\1\7\1\3\1\0\1\12\1\0\1\43"+
    "\1\10\1\0\1\0\1\6\1\0\1\0\1\0\1\0\1\32\1\0"+
    "\1\37\162\0\1\44\5\0\1\0\7\0\1\0\ufefe\0\1\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\210\0\1\3\1\0\1\4\20\0"+
    "\1\4\66\0\1\5\26\0\1\5\54\0\1\6\33\0"+
    "\1\6\63\0\1\7\37\0\1\7\12\0\1\10\24\0"+
    "\1\11\6\0\1\10\1\0\1\12\17\0\1\11\11\0"+
    "\1\12\202\0\1\13\13\0\1\14\5\0\1\13\11\0"+
    "\1\14\20\0\1\15\15\0\1\15\47\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[692];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\46\0\230\0\276\0\344"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4"+
    "\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804"+
    "\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934"+
    "\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64"+
    "\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94"+
    "\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4"+
    "\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8\0\u0dce\0\u0df4"+
    "\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24"+
    "\0\u0f4a\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u1008\0\u102e\0\u1054"+
    "\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112\0\u1138\0\u115e\0\u1184"+
    "\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242\0\u1268\0\u128e\0\u12b4"+
    "\0\u12da\0\u1300\0\u1326\0\u134c\0\u1372\0\u1398\0\u13be\0\u13e4"+
    "\0\u140a\0\u1430\0\u1456\0\u147c\0\u14a2\0\46\0\u14c8\0\46"+
    "\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac\0\u15d2\0\u15f8"+
    "\0\u161e\0\u1644\0\u166a\0\u1690\0\u16b6\0\u16dc\0\u1702\0\u1728"+
    "\0\u174e\0\u1774\0\u179a\0\u17c0\0\u17e6\0\u180c\0\u1832\0\u1858"+
    "\0\u187e\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988"+
    "\0\u19ae\0\u19d4\0\u19fa\0\u1a20\0\u1a46\0\u1a6c\0\u1a92\0\u1ab8"+
    "\0\u1ade\0\u1b04\0\u1b2a\0\u1b50\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8"+
    "\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80\0\u1ca6\0\u1ccc\0\u1cf2\0\u1d18"+
    "\0\u1d3e\0\u1d64\0\u1d8a\0\u1db0\0\u1dd6\0\u1dfc\0\u1e22\0\u1e48"+
    "\0\u1e6e\0\u1e94\0\u1eba\0\u1ee0\0\u1f06\0\u1f2c\0\u1f52\0\46"+
    "\0\u1f78\0\u1f9e\0\u1fc4\0\u1fea\0\u2010\0\u2036\0\u205c\0\u2082"+
    "\0\u20a8\0\u20ce\0\u20f4\0\u211a\0\u2140\0\u2166\0\u218c\0\u21b2"+
    "\0\u21d8\0\u21fe\0\u2224\0\u224a\0\u2270\0\u2296\0\u22bc\0\u22e2"+
    "\0\u2308\0\u232e\0\u2354\0\u237a\0\u23a0\0\u23c6\0\u23ec\0\u2412"+
    "\0\u2438\0\u245e\0\u2484\0\u24aa\0\u24d0\0\u24f6\0\u251c\0\u2542"+
    "\0\u2568\0\u258e\0\u25b4\0\u25da\0\u2600\0\u2626\0\u264c\0\u2672"+
    "\0\u2698\0\u26be\0\u26e4\0\u270a\0\u2730\0\u2756\0\u277c\0\u27a2"+
    "\0\u27c8\0\u27ee\0\u2814\0\u283a\0\u2860\0\u2886\0\u28ac\0\u28d2"+
    "\0\u28f8\0\u291e\0\u2944\0\46\0\u296a\0\u2990\0\u29b6\0\u29dc"+
    "\0\u2a02\0\u2a28\0\u2a4e\0\u2a74\0\u2a9a\0\u2ac0\0\u2ae6\0\u2b0c"+
    "\0\u2b32\0\u2b58\0\u2b7e\0\u2ba4\0\u2bca\0\u2bf0\0\u2c16\0\u2c3c"+
    "\0\u2c62\0\u2c88\0\u2cae\0\u2cd4\0\u2cfa\0\u2d20\0\u2d46\0\u2d6c"+
    "\0\u2d92\0\u2db8\0\u2dde\0\u2e04\0\u2e2a\0\u2e50\0\u2e76\0\u2e9c"+
    "\0\u2ec2\0\u2ee8\0\u2f0e\0\u2f34\0\u2f5a\0\u2f80\0\u2fa6\0\u2fcc"+
    "\0\u2ff2\0\u3018\0\u303e\0\u3064\0\u308a\0\u30b0\0\u30d6\0\u30fc"+
    "\0\u3122\0\u3148\0\u316e\0\u3194\0\u31ba\0\u31e0\0\u3206\0\u322c"+
    "\0\u3252\0\u3278\0\u329e\0\u32c4\0\u32ea\0\u3310\0\u3336\0\u335c"+
    "\0\u3382\0\u33a8\0\u33ce\0\u33f4\0\u341a\0\u3440\0\u3466\0\u348c"+
    "\0\u34b2\0\u34d8\0\u34fe\0\46\0\u3524\0\u354a\0\u3570\0\u3596"+
    "\0\u35bc\0\u35e2\0\u3608\0\u362e\0\u3654\0\u367a\0\u36a0\0\u36c6"+
    "\0\u36ec\0\u3712\0\u3738\0\u375e\0\u3784\0\u37aa\0\u37d0\0\u37f6"+
    "\0\u381c\0\u3842\0\u3868\0\u388e\0\u38b4\0\u38da\0\u3900\0\u3926"+
    "\0\u394c\0\u3972\0\u3998\0\u39be\0\u39e4\0\u3a0a\0\u3a30\0\u3a56"+
    "\0\u3a7c\0\u3aa2\0\u3ac8\0\u3aee\0\u3b14\0\u3b3a\0\46\0\u3b60"+
    "\0\u3b86\0\u3bac\0\u3bd2\0\u3bf8\0\u3c1e\0\u3c44\0\u3c6a\0\u3c90"+
    "\0\u3cb6\0\u3cdc\0\u3d02\0\u3d28\0\u3d4e\0\u3d74\0\u3d9a\0\u3dc0"+
    "\0\u3de6\0\u3e0c\0\u3e32\0\46\0\u3e58\0\u3e7e\0\u3ea4\0\u3eca"+
    "\0\u3ef0\0\u3f16\0\u3f3c\0\u3f62\0\46\0\u3f88\0\u3fae\0\u3fd4"+
    "\0\u3ffa\0\u4020\0\u4046\0\u406c\0\u4092\0\u40b8\0\u40de\0\u4104"+
    "\0\u412a\0\u4150\0\u4176\0\u419c\0\u41c2\0\u41e8\0\u420e\0\u4234"+
    "\0\u425a\0\u4280\0\u42a6\0\u42cc\0\u42f2\0\u4318\0\u433e\0\u4364"+
    "\0\u438a\0\u43b0\0\u43d6\0\u43fc\0\u4422\0\u4448\0\u446e\0\u4494"+
    "\0\u44ba\0\u44e0\0\u4506\0\u452c\0\u4552\0\u4578\0\u459e\0\u45c4"+
    "\0\u45ea\0\u4610\0\u4636\0\u465c\0\u4682\0\u46a8\0\u46ce\0\u46f4"+
    "\0\u471a\0\u4740\0\u4766\0\u478c\0\u47b2\0\u47d8\0\u47fe\0\u4824"+
    "\0\u484a\0\u4870\0\u4896\0\u48bc\0\u48e2\0\u4908\0\u492e\0\u4954"+
    "\0\u497a\0\u49a0\0\u49c6\0\u49ec\0\u4a12\0\u4a38\0\u4a5e\0\u4a84"+
    "\0\u4aaa\0\u4ad0\0\u4af6\0\u4b1c\0\u4b42\0\u4b68\0\u4b8e\0\u4bb4"+
    "\0\u4bda\0\u4c00\0\u4c26\0\u4c4c\0\u4c72\0\u4c98\0\u4cbe\0\u4ce4"+
    "\0\u4d0a\0\u4d30\0\u4d56\0\u4d7c\0\u4da2\0\u4dc8\0\u4dee\0\u4e14"+
    "\0\u4e3a\0\u4e60\0\u4e86\0\u4eac\0\u4ed2\0\u4ef8\0\u4f1e\0\u4f44"+
    "\0\u4f6a\0\u4f90\0\u4fb6\0\u4fdc\0\u5002\0\u5028\0\u504e\0\u5074"+
    "\0\u509a\0\u50c0\0\u50e6\0\u510c\0\u5132\0\u5158\0\u517e\0\u51a4"+
    "\0\u51ca\0\u51f0\0\u5216\0\u523c\0\u5262\0\u5288\0\u52ae\0\u52d4"+
    "\0\u52fa\0\u5320\0\u5346\0\u536c\0\u5392\0\u53b8\0\u53de\0\u5404"+
    "\0\u542a\0\u5450\0\u5476\0\u549c\0\u54c2\0\u54e8\0\u550e\0\u5534"+
    "\0\u555a\0\u5580\0\u55a6\0\u55cc\0\u55f2\0\u5618\0\u563e\0\u5664"+
    "\0\u568a\0\46\0\u56b0\0\u56d6\0\u56fc\0\u5722\0\u5748\0\u576e"+
    "\0\u5794\0\u57ba\0\u57e0\0\u5806\0\u582c\0\46\0\u5852\0\u5878"+
    "\0\u589e\0\u58c4\0\u58ea\0\u5910\0\u5936\0\u595c\0\u5982\0\u59a8"+
    "\0\u59ce\0\u59f4\0\u5a1a\0\u5a40\0\u5a66\0\u5a8c\0\u5ab2\0\u5ad8"+
    "\0\u5afe\0\u5b24\0\u5b4a\0\u5b70\0\u5b96\0\u5bbc\0\u5be2\0\u5c08"+
    "\0\u5c2e\0\u5c54\0\u5c7a\0\u5ca0\0\u5cc6\0\u5cec\0\46\0\u5d12"+
    "\0\u5d38\0\u5d5e\0\u5d84\0\u5daa\0\u5dd0\0\u5df6\0\u5e1c\0\u5e42"+
    "\0\u5e68\0\u5e8e\0\u5eb4\0\u5eda\0\u5f00\0\u5f26\0\u5f4c\0\u5f72"+
    "\0\u5f98\0\u5fbe\0\u5fe4\0\u600a\0\u6030\0\u6056\0\u607c\0\u60a2"+
    "\0\u60c8\0\u60ee\0\u6114\0\u613a\0\u6160\0\u6186\0\u61ac\0\u61d2"+
    "\0\u61f8\0\u621e\0\u6244\0\u626a\0\u6290\0\u62b6\0\u62dc\0\u6302"+
    "\0\u6328\0\u634e\0\u6374\0\u639a\0\u63c0\0\u63e6\0\u640c\0\u6432"+
    "\0\u6458\0\u647e\0\u64a4\0\u64ca";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[692];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\13\2\1\3\16\2\1\4\12\2\1\5\62\0\1\6"+
    "\2\0\1\7\2\0\1\10\56\0\1\11\27\0\1\12"+
    "\45\0\1\13\45\0\1\14\51\0\1\15\27\0\1\16"+
    "\4\0\1\17\40\0\1\20\4\0\1\21\42\0\1\22"+
    "\4\0\1\23\10\0\1\24\57\0\1\25\10\0\14\16"+
    "\1\26\31\16\1\0\1\27\22\0\1\27\21\0\17\20"+
    "\1\30\26\20\1\0\1\31\22\0\1\31\21\0\22\22"+
    "\1\32\23\22\22\23\1\33\23\23\6\24\1\34\37\24"+
    "\40\0\1\35\5\0\14\16\1\26\1\36\30\16\1\0"+
    "\1\27\11\0\1\37\10\0\1\27\21\0\15\20\1\40"+
    "\1\20\1\30\26\20\1\0\1\31\11\0\1\41\10\0"+
    "\1\31\21\0\15\22\1\42\4\22\1\32\23\22\15\23"+
    "\1\43\4\23\1\33\23\23\2\0\1\44\104\0\1\45"+
    "\4\0\14\16\1\26\1\16\1\46\27\16\14\0\1\47"+
    "\31\0\16\20\1\46\1\30\26\20\17\0\1\50\26\0"+
    "\5\22\1\51\14\22\1\32\23\22\12\23\1\52\7\23"+
    "\1\33\23\23\43\0\1\53\2\0\33\45\1\54\12\45"+
    "\1\0\1\55\22\0\1\55\36\0\1\56\45\0\1\57"+
    "\30\0\16\22\1\60\3\22\1\32\23\22\16\23\1\61"+
    "\3\23\1\33\23\23\11\0\1\62\32\0\1\63\1\0"+
    "\21\45\1\64\11\45\1\54\12\45\1\0\1\55\11\0"+
    "\1\65\10\0\1\55\24\0\1\66\45\0\1\67\43\0"+
    "\1\70\22\0\1\70\22\0\1\71\22\0\1\71\22\0"+
    "\1\72\22\0\1\72\32\0\1\62\34\0\33\45\1\54"+
    "\1\45\1\73\10\45\22\0\1\74\23\0\14\66\1\75"+
    "\31\66\17\67\1\76\26\67\1\0\1\77\11\0\1\100"+
    "\10\0\1\77\5\0\1\101\14\0\1\71\11\0\1\102"+
    "\10\0\1\71\1\103\21\0\1\72\6\0\1\104\13\0"+
    "\1\72\21\0\33\45\1\54\4\45\1\105\5\45\15\0"+
    "\1\106\30\0\14\66\1\75\1\107\30\66\15\67\1\110"+
    "\1\67\1\76\26\67\1\0\1\77\11\0\1\100\10\0"+
    "\1\77\35\0\1\111\1\112\1\0\1\113\2\0\1\114"+
    "\3\0\1\115\52\0\1\116\32\0\1\117\1\0\1\74"+
    "\24\0\1\120\22\0\1\120\24\0\1\121\42\0\33\45"+
    "\1\54\5\45\1\122\4\45\5\0\1\123\40\0\10\66"+
    "\1\124\3\66\1\75\31\66\10\67\1\125\6\67\1\76"+
    "\26\67\4\0\1\126\10\0\1\127\45\0\1\130\45\0"+
    "\1\131\45\0\1\132\57\0\1\133\37\0\1\134\41\0"+
    "\1\135\31\0\1\120\22\0\1\120\1\136\27\0\1\137"+
    "\36\0\33\45\1\54\3\45\1\140\2\45\1\141\3\45"+
    "\22\123\1\142\23\123\14\66\1\75\1\66\1\46\27\66"+
    "\16\67\1\46\1\76\26\67\6\0\1\143\42\0\1\144"+
    "\4\0\1\145\35\0\24\130\1\146\21\130\3\0\1\147"+
    "\4\0\1\150\47\0\1\151\63\0\1\152\52\0\1\153"+
    "\10\0\20\135\1\154\25\135\1\0\1\155\22\0\1\155"+
    "\22\0\1\156\22\0\1\156\22\0\1\157\22\0\1\157"+
    "\21\0\33\45\1\54\3\45\1\140\6\45\15\123\1\160"+
    "\4\123\1\142\23\123\15\0\1\161\30\0\14\144\1\162"+
    "\31\144\1\0\1\163\22\0\1\163\21\0\15\130\1\164"+
    "\6\130\1\146\21\130\17\147\1\165\26\147\1\0\1\166"+
    "\22\0\1\166\21\0\22\151\1\167\23\151\31\0\1\170"+
    "\54\0\1\171\5\0\15\135\1\172\2\135\1\154\25\135"+
    "\1\0\1\155\11\0\1\173\10\0\1\155\22\0\1\156"+
    "\20\0\1\174\1\0\1\156\22\0\1\157\11\0\1\175"+
    "\10\0\1\157\21\0\5\123\1\176\14\123\1\142\23\123"+
    "\14\161\1\177\31\161\14\144\1\162\1\200\30\144\1\0"+
    "\1\163\11\0\1\201\10\0\1\163\21\0\15\130\1\202"+
    "\6\130\1\146\21\130\15\147\1\203\1\147\1\165\26\147"+
    "\1\0\1\166\11\0\1\204\10\0\1\166\21\0\15\151"+
    "\1\205\4\151\1\167\23\151\14\0\1\206\72\0\1\207"+
    "\4\0\16\135\1\136\1\135\1\154\25\135\22\0\1\210"+
    "\40\0\1\211\44\0\1\212\1\213\1\0\1\214\2\0"+
    "\1\215\23\0\16\123\1\216\3\123\1\142\23\123\4\161"+
    "\1\217\7\161\1\177\31\161\14\144\1\162\1\144\1\220"+
    "\27\144\14\0\1\221\31\0\16\130\1\222\5\130\1\146"+
    "\21\130\16\147\1\220\1\165\26\147\17\0\1\223\26\0"+
    "\12\151\1\224\7\151\1\167\23\151\4\0\1\225\41\0"+
    "\33\207\1\226\12\207\15\0\1\227\53\0\1\230\37\0"+
    "\1\231\45\0\1\232\45\0\1\233\45\0\1\234\30\0"+
    "\6\161\1\235\5\161\1\177\31\161\15\0\1\236\31\0"+
    "\1\237\22\0\1\237\36\0\1\240\30\0\16\151\1\241"+
    "\3\151\1\167\23\151\6\0\1\242\37\0\21\207\1\243"+
    "\11\207\1\226\12\207\12\0\1\23\51\0\1\244\32\0"+
    "\1\245\4\0\1\246\35\0\24\232\1\247\21\232\3\0"+
    "\1\250\4\0\1\251\42\0\1\252\4\0\1\253\33\0"+
    "\14\161\1\177\1\254\30\161\3\0\1\255\43\0\1\237"+
    "\11\0\1\256\10\0\1\237\24\0\1\257\43\0\1\260"+
    "\22\0\1\260\36\0\1\261\30\0\33\207\1\226\1\207"+
    "\1\262\10\207\1\0\1\263\22\0\1\263\21\0\14\245"+
    "\1\264\31\245\1\0\1\265\22\0\1\265\21\0\15\232"+
    "\1\266\6\232\1\247\21\232\17\250\1\267\26\250\1\0"+
    "\1\270\22\0\1\270\21\0\22\252\1\271\23\252\22\253"+
    "\1\272\23\253\14\161\1\177\1\161\1\273\27\161\14\255"+
    "\1\274\31\255\14\0\1\275\2\0\1\276\2\0\1\277"+
    "\23\0\17\257\1\300\26\257\1\0\1\260\11\0\1\301"+
    "\10\0\1\260\1\302\20\0\26\261\1\303\17\261\33\207"+
    "\1\226\4\207\1\304\5\207\1\0\1\263\11\0\1\305"+
    "\10\0\1\263\21\0\14\245\1\264\1\306\30\245\1\0"+
    "\1\265\11\0\1\307\10\0\1\265\21\0\15\232\1\310"+
    "\6\232\1\247\21\232\15\250\1\311\1\250\1\267\26\250"+
    "\1\0\1\270\11\0\1\312\10\0\1\270\21\0\15\252"+
    "\1\313\4\252\1\271\23\252\15\253\1\314\4\253\1\272"+
    "\23\253\1\0\1\315\22\0\1\315\21\0\14\255\1\274"+
    "\1\316\30\255\15\0\1\317\45\0\1\320\45\0\1\321"+
    "\30\0\15\257\1\322\1\257\1\300\26\257\20\0\1\323"+
    "\26\0\1\324\22\0\1\324\21\0\26\261\1\303\1\325"+
    "\16\261\33\207\1\226\5\207\1\326\4\207\14\0\1\327"+
    "\2\0\1\113\2\0\1\114\23\0\14\245\1\264\1\245"+
    "\1\330\27\245\14\0\1\331\31\0\16\232\1\332\5\232"+
    "\1\247\21\232\16\250\1\330\1\267\26\250\17\0\1\333"+
    "\26\0\5\252\1\334\14\252\1\271\23\252\12\253\1\335"+
    "\7\253\1\272\23\253\1\0\1\315\11\0\1\336\10\0"+
    "\1\315\21\0\10\255\1\337\3\255\1\274\31\255\3\0"+
    "\1\340\4\0\1\341\40\0\1\342\4\0\1\343\47\0"+
    "\1\344\33\0\10\257\1\345\6\257\1\300\26\257\15\0"+
    "\1\346\31\0\1\324\22\0\1\324\1\347\20\0\26\261"+
    "\1\303\1\261\1\350\15\261\33\207\1\226\3\207\1\351"+
    "\2\207\1\352\3\207\15\0\1\127\45\0\1\353\31\0"+
    "\1\354\22\0\1\354\36\0\1\355\30\0\16\252\1\356"+
    "\3\252\1\271\23\252\16\253\1\357\3\253\1\272\23\253"+
    "\14\0\1\360\2\0\1\361\2\0\1\362\3\0\1\115"+
    "\17\0\14\255\1\274\1\255\1\220\27\255\14\340\1\363"+
    "\31\340\1\0\1\364\22\0\1\364\21\0\17\342\1\365"+
    "\26\342\1\0\1\366\22\0\1\366\21\0\22\344\1\367"+
    "\23\344\16\257\1\220\1\300\26\257\20\346\1\370\25\346"+
    "\1\0\1\371\22\0\1\371\21\0\26\261\1\303\2\261"+
    "\1\372\14\261\1\0\1\373\22\0\1\373\21\0\33\207"+
    "\1\226\3\207\1\351\6\207\3\0\1\374\43\0\1\354"+
    "\11\0\1\375\10\0\1\354\24\0\1\376\43\0\1\377"+
    "\22\0\1\377\22\0\1\u0100\22\0\1\u0100\25\0\1\126"+
    "\10\0\1\u0101\45\0\1\u0102\45\0\1\u0103\30\0\14\340"+
    "\1\363\1\u0104\30\340\1\0\1\364\11\0\1\u0105\10\0"+
    "\1\364\21\0\15\342\1\u0106\1\342\1\365\26\342\1\0"+
    "\1\366\11\0\1\u0107\10\0\1\366\21\0\15\344\1\u0108"+
    "\4\344\1\367\23\344\15\346\1\u0109\2\346\1\370\25\346"+
    "\1\0\1\371\11\0\1\u010a\10\0\1\371\21\0\14\261"+
    "\1\u010b\11\261\1\303\17\261\1\0\1\373\11\0\1\u010c"+
    "\10\0\1\373\5\0\1\u010d\13\0\14\374\1\u010e\31\374"+
    "\14\0\1\u010f\2\0\1\u0110\2\0\1\u0111\23\0\17\376"+
    "\1\u0112\26\376\1\0\1\377\11\0\1\u0113\10\0\1\377"+
    "\5\0\1\u0114\14\0\1\u0100\11\0\1\u0115\10\0\1\u0100"+
    "\1\u0116\23\0\1\u0117\4\0\1\u0118\40\0\1\u0119\4\0"+
    "\1\u011a\47\0\1\u011b\33\0\14\340\1\363\1\340\1\u011c"+
    "\27\340\14\0\1\u011d\31\0\16\342\1\u011c\1\365\26\342"+
    "\17\0\1\u011e\26\0\12\344\1\u011f\7\344\1\367\23\344"+
    "\16\346\1\347\1\346\1\370\25\346\22\0\1\114\23\0"+
    "\4\261\1\u0120\21\261\1\303\17\261\14\0\1\u0121\2\0"+
    "\1\u0122\2\0\1\u0123\56\0\1\u0124\12\0\14\374\1\u010e"+
    "\1\u0125\30\374\15\0\1\u0126\45\0\1\u0127\45\0\1\u0128"+
    "\30\0\15\376\1\u0129\1\376\1\u0112\26\376\14\0\1\u012a"+
    "\2\0\1\u012b\1\u012c\1\0\1\u012d\56\0\1\u012e\32\0"+
    "\1\u012f\26\0\1\u0130\22\0\1\u0130\21\0\14\u0117\1\u0131"+
    "\31\u0117\1\0\1\u0132\22\0\1\u0132\21\0\17\u0119\1\u0133"+
    "\26\u0119\1\0\1\u0134\22\0\1\u0134\21\0\22\u011b\1\u0135"+
    "\23\u011b\15\0\1\u0136\45\0\1\u0137\30\0\16\344\1\u0138"+
    "\3\344\1\367\23\344\6\261\1\u0139\17\261\1\303\17\261"+
    "\15\0\1\u013a\45\0\1\u013b\45\0\1\u013c\64\0\1\u013d"+
    "\11\0\10\374\1\u013e\3\374\1\u010e\31\374\3\0\1\u013f"+
    "\4\0\1\u0140\40\0\1\u0141\4\0\1\u0142\47\0\1\u0143"+
    "\33\0\10\376\1\u0144\6\376\1\u0112\26\376\4\0\1\u0145"+
    "\10\0\1\u0146\45\0\1\u0147\45\0\1\u0148\45\0\1\u0149"+
    "\64\0\1\u014a\26\0\1\u014b\31\0\1\u0130\22\0\1\u0130"+
    "\1\u014c\20\0\14\u0117\1\u0131\1\u014d\30\u0117\1\0\1\u0132"+
    "\11\0\1\u014e\10\0\1\u0132\21\0\15\u0119\1\u014f\1\u0119"+
    "\1\u0133\26\u0119\1\0\1\u0134\11\0\1\u0150\10\0\1\u0134"+
    "\21\0\15\u011b\1\u0151\4\u011b\1\u0135\23\u011b\3\0\1\u0152"+
    "\45\0\1\u0153\43\0\1\u0154\22\0\1\u0154\21\0\15\261"+
    "\1\u0155\10\261\1\303\17\261\3\0\1\u0156\4\0\1\u0157"+
    "\40\0\1\u0158\4\0\1\u0159\47\0\1\u015a\70\0\1\u015b"+
    "\10\0\14\374\1\u010e\1\374\1\330\27\374\14\u013f\1\u015c"+
    "\31\u013f\1\0\1\u015d\22\0\1\u015d\21\0\17\u0141\1\u015e"+
    "\26\u0141\1\0\1\u015f\22\0\1\u015f\21\0\22\u0143\1\u0160"+
    "\23\u0143\16\376\1\330\1\u0112\26\376\6\0\1\u0161\42\0"+
    "\1\u0162\4\0\1\u0163\40\0\1\u0164\1\u0165\3\0\1\u0166"+
    "\1\u0165\34\0\20\u0148\1\u0167\25\u0148\12\0\1\u0168\70\0"+
    "\1\u0169\10\0\20\u014b\1\u016a\25\u014b\1\0\1\u016b\22\0"+
    "\1\u016b\21\0\14\u0117\1\u0131\1\u0117\1\u016c\27\u0117\14\0"+
    "\1\u016d\31\0\16\u0119\1\u016c\1\u0133\26\u0119\17\0\1\u016e"+
    "\26\0\12\u011b\1\u016f\7\u011b\1\u0135\23\u011b\14\u0152\1\u0170"+
    "\31\u0152\17\u0153\1\u0171\26\u0153\1\0\1\u0154\11\0\1\u0172"+
    "\10\0\1\u0154\1\u0173\20\0\16\261\1\273\7\261\1\303"+
    "\17\261\14\u0156\1\u0174\31\u0156\1\0\1\u0175\22\0\1\u0175"+
    "\21\0\17\u0158\1\u0176\26\u0158\1\0\1\u0177\22\0\1\u0177"+
    "\21\0\22\u015a\1\u0178\23\u015a\14\0\1\u0179\31\0\14\u013f"+
    "\1\u015c\1\u017a\30\u013f\1\0\1\u015d\11\0\1\u017b\10\0"+
    "\1\u015d\21\0\15\u0141\1\u017c\1\u0141\1\u015e\26\u0141\1\0"+
    "\1\u015f\11\0\1\u017d\10\0\1\u015f\21\0\15\u0143\1\u017e"+
    "\4\u0143\1\u0160\23\u0143\15\0\1\u017f\30\0\14\u0162\1\u0180"+
    "\31\u0162\1\0\1\u0181\22\0\1\u0181\21\0\17\u0164\1\u0182"+
    "\26\u0164\17\u0165\1\u0183\26\u0165\1\0\1\u0184\22\0\1\u0184"+
    "\21\0\15\u0148\1\u0185\2\u0148\1\u0167\25\u0148\22\u0168\1\u0186"+
    "\23\u0168\14\0\1\u0187\31\0\15\u014b\1\u0188\2\u014b\1\u016a"+
    "\25\u014b\1\0\1\u016b\11\0\1\u0189\10\0\1\u016b\36\0"+
    "\1\u018a\45\0\1\u018b\30\0\16\u011b\1\u018c\3\u011b\1\u0135"+
    "\23\u011b\14\u0152\1\u0170\1\u018d\30\u0152\15\u0153\1\u018e\1\u0153"+
    "\1\u0171\26\u0153\20\0\1\u018f\26\0\1\u0190\22\0\1\u0190"+
    "\21\0\14\u0156\1\u0174\1\u0191\30\u0156\1\0\1\u0175\11\0"+
    "\1\u0192\10\0\1\u0175\21\0\15\u0158\1\u0193\1\u0158\1\u0176"+
    "\26\u0158\1\0\1\u0177\11\0\1\u0194\10\0\1\u0177\21\0"+
    "\15\u015a\1\u0195\4\u015a\1\u0178\23\u015a\36\0\1\u0196\7\0"+
    "\14\u013f\1\u015c\1\u013f\1\u0197\27\u013f\14\0\1\u0198\31\0"+
    "\16\u0141\1\u0197\1\u015e\26\u0141\17\0\1\u0199\26\0\12\u0143"+
    "\1\u019a\7\u0143\1\u0160\23\u0143\14\u017f\1\u019b\31\u017f\14\u0162"+
    "\1\u0180\1\u019c\30\u0162\1\0\1\u0181\11\0\1\u019d\10\0"+
    "\1\u0181\21\0\15\u0164\1\u019e\1\u0164\1\u0182\26\u0164\15\u0165"+
    "\1\u019f\1\u0165\1\u0183\26\u0165\1\0\1\u0184\11\0\1\u01a0"+
    "\10\0\1\u0184\21\0\16\u0148\1\u01a1\1\u0148\1\u0167\25\u0148"+
    "\15\u0168\1\u01a2\4\u0168\1\u0186\23\u0168\36\0\1\u01a3\7\0"+
    "\16\u014b\1\u014c\1\u014b\1\u016a\25\u014b\22\0\1\u01a4\26\0"+
    "\1\u01a5\45\0\1\u01a6\43\0\1\u01a7\22\0\1\u01a7\21\0"+
    "\10\u0152\1\u01a8\3\u0152\1\u0170\31\u0152\10\u0153\1\u01a9\6\u0153"+
    "\1\u0171\26\u0153\15\0\1\u01aa\31\0\1\u0190\22\0\1\u0190"+
    "\1\u01ab\20\0\14\u0156\1\u0174\1\u0156\1\u01ac\27\u0156\14\0"+
    "\1\u01ad\31\0\16\u0158\1\u01ac\1\u0176\26\u0158\17\0\1\u01ae"+
    "\26\0\12\u015a\1\u01af\7\u015a\1\u0178\23\u015a\33\u0196\1\u01b0"+
    "\12\u0196\15\0\1\u01b1\45\0\1\u01b2\30\0\16\u0143\1\u01b3"+
    "\3\u0143\1\u0160\23\u0143\4\u017f\1\u01b4\7\u017f\1\u019b\31\u017f"+
    "\14\u0162\1\u0180\1\u0162\1\u01b5\27\u0162\14\0\1\u01b6\31\0"+
    "\16\u0164\1\u01b5\1\u0182\26\u0164\16\u0165\1\u01b7\1\u0183\26\u0165"+
    "\17\0\1\u01b8\27\0\1\u01b9\22\0\1\u01b9\21\0\12\u0168"+
    "\1\u01ba\7\u0168\1\u0186\23\u0168\33\u01a3\1\u01bb\12\u01a3\15\0"+
    "\1\u01bc\30\0\14\u01a5\1\u01bd\31\u01a5\17\u01a6\1\u01be\26\u01a6"+
    "\1\0\1\u01a7\11\0\1\u01bf\10\0\1\u01a7\1\u01c0\20\0"+
    "\14\u0152\1\u0170\1\u0152\1\u011c\27\u0152\16\u0153\1\u011c\1\u0171"+
    "\26\u0153\20\u01aa\1\u01c1\25\u01aa\1\0\1\u01c2\22\0\1\u01c2"+
    "\36\0\1\u01c3\45\0\1\u01c4\30\0\16\u015a\1\u01c5\3\u015a"+
    "\1\u0178\23\u015a\33\u0196\1\u01b0\1\u01c6\11\u0196\3\0\1\u01c7"+
    "\45\0\1\u01c8\43\0\1\u01c9\22\0\1\u01c9\21\0\6\u017f"+
    "\1\u01ca\5\u017f\1\u019b\31\u017f\15\0\1\u01cb\31\0\1\u01cc"+
    "\22\0\1\u01cc\36\0\1\u01cd\31\0\1\u01b9\11\0\1\u01ce"+
    "\10\0\1\u01b9\21\0\16\u0168\1\u01cf\3\u0168\1\u0186\23\u0168"+
    "\33\u01a3\1\u01bb\1\u01d0\11\u01a3\12\0\1\253\33\0\14\u01a5"+
    "\1\u01bd\1\u01d1\30\u01a5\15\u01a6\1\u01d2\1\u01a6\1\u01be\26\u01a6"+
    "\20\0\1\u01d3\26\0\1\u01d4\22\0\1\u01d4\21\0\15\u01aa"+
    "\1\u01d5\2\u01aa\1\u01c1\25\u01aa\1\0\1\u01c2\11\0\1\u01d6"+
    "\10\0\1\u01c2\24\0\1\u01d7\45\0\1\u01d8\43\0\1\u01d9"+
    "\22\0\1\u01d9\21\0\33\u0196\1\u01b0\1\u0196\1\u01da\10\u0196"+
    "\14\u01c7\1\u01db\31\u01c7\17\u01c8\1\u01dc\26\u01c8\1\0\1\u01c9"+
    "\11\0\1\u01dd\10\0\1\u01c9\1\u01de\20\0\14\u017f\1\u019b"+
    "\1\u01df\30\u017f\3\0\1\u01e0\43\0\1\u01cc\11\0\1\u01e1"+
    "\10\0\1\u01cc\24\0\1\u01e2\56\0\1\u01e3\2\0\1\u01e4"+
    "\2\0\1\u01e5\24\0\1\u01e6\22\0\1\u01e6\21\0\33\u01a3"+
    "\1\u01bb\1\u01a3\1\u01e7\10\u01a3\10\u01a5\1\u01e8\3\u01a5\1\u01bd"+
    "\31\u01a5\10\u01a6\1\u01e9\6\u01a6\1\u01be\26\u01a6\15\0\1\u01ea"+
    "\31\0\1\u01d4\22\0\1\u01d4\1\u01eb\20\0\16\u01aa\1\u01ab"+
    "\1\u01aa\1\u01c1\25\u01aa\22\0\1\277\23\0\14\u01d7\1\u01ec"+
    "\31\u01d7\17\u01d8\1\u01ed\26\u01d8\1\0\1\u01d9\11\0\1\u01ee"+
    "\10\0\1\u01d9\1\u01ef\20\0\14\u0196\1\u01f0\16\u0196\1\u01b0"+
    "\12\u0196\14\u01c7\1\u01db\1\u01f1\30\u01c7\15\u01c8\1\u01f2\1\u01c8"+
    "\1\u01dc\26\u01c8\20\0\1\u01f3\26\0\1\u01f4\22\0\1\u01f4"+
    "\21\0\14\u017f\1\u019b\1\u017f\1\u01f5\27\u017f\14\u01e0\1\u01f6"+
    "\31\u01e0\14\0\1\u01f7\2\0\1\u01f8\2\0\1\u01f9\23\0"+
    "\17\u01e2\1\u01fa\26\u01e2\15\0\1\u01fb\45\0\1\u01fc\45\0"+
    "\1\u01fd\31\0\1\u01e6\11\0\1\u01fe\10\0\1\u01e6\1\u01ff"+
    "\20\0\14\u01a3\1\u0200\16\u01a3\1\u01bb\12\u01a3\14\u01a5\1\u01bd"+
    "\1\u01a5\1\u016c\27\u01a5\16\u01a6\1\u016c\1\u01be\26\u01a6\20\u01ea"+
    "\1\u0201\25\u01ea\1\0\1\u0202\22\0\1\u0202\21\0\14\u01d7"+
    "\1\u01ec\1\u0203\30\u01d7\15\u01d8\1\u0204\1\u01d8\1\u01ed\26\u01d8"+
    "\20\0\1\u0205\26\0\1\u0206\22\0\1\u0206\21\0\33\u0196"+
    "\1\u01b0\2\u0196\1\u0207\7\u0196\10\u01c7\1\u0208\3\u01c7\1\u01db"+
    "\31\u01c7\10\u01c8\1\u0209\6\u01c8\1\u01dc\26\u01c8\15\0\1\u020a"+
    "\31\0\1\u01f4\22\0\1\u01f4\1\u020b\21\0\1\u020c\22\0"+
    "\1\u020c\21\0\14\u01e0\1\u01f6\1\u020d\30\u01e0\15\0\1\u020e"+
    "\45\0\1\u020f\45\0\1\u0210\30\0\15\u01e2\1\u0211\1\u01e2"+
    "\1\u01fa\26\u01e2\3\0\1\u0212\4\0\1\u0213\40\0\1\u0214"+
    "\4\0\1\u0215\47\0\1\u0216\53\0\1\u0217\26\0\1\u0218"+
    "\22\0\1\u0218\21\0\33\u01a3\1\u01bb\2\u01a3\1\u0219\7\u01a3"+
    "\15\u01ea\1\u021a\2\u01ea\1\u0201\25\u01ea\1\0\1\u0202\11\0"+
    "\1\u021b\10\0\1\u0202\21\0\10\u01d7\1\u021c\3\u01d7\1\u01ec"+
    "\31\u01d7\10\u01d8\1\u021d\6\u01d8\1\u01ed\26\u01d8\15\0\1\u021e"+
    "\31\0\1\u0206\22\0\1\u0206\1\u021f\20\0\33\u0196\1\u01b0"+
    "\3\u0196\1\u0220\6\u0196\14\u01c7\1\u01db\1\u01c7\1\u0197\27\u01c7"+
    "\16\u01c8\1\u0197\1\u01dc\26\u01c8\20\u020a\1\u0221\25\u020a\1\0"+
    "\1\u0222\22\0\1\u0222\22\0\1\u020c\11\0\1\u0223\10\0"+
    "\1\u020c\21\0\10\u01e0\1\u0224\3\u01e0\1\u01f6\31\u01e0\3\0"+
    "\1\u0225\4\0\1\u0226\40\0\1\u0227\4\0\1\u0228\47\0"+
    "\1\u0229\33\0\10\u01e2\1\u022a\6\u01e2\1\u01fa\26\u01e2\14\u0212"+
    "\1\u022b\31\u0212\1\0\1\u022c\22\0\1\u022c\21\0\17\u0214"+
    "\1\u022d\26\u0214\1\0\1\u022e\22\0\1\u022e\21\0\22\u0216"+
    "\1\u022f\23\u0216\15\0\1\u0230\31\0\1\u0218\22\0\1\u0218"+
    "\1\u0231\20\0\33\u01a3\1\u01bb\3\u01a3\1\u0232\6\u01a3\16\u01ea"+
    "\1\u01eb\1\u01ea\1\u0201\25\u01ea\22\0\1\362\23\0\14\u01d7"+
    "\1\u01ec\1\u01d7\1\u01ac\27\u01d7\16\u01d8\1\u01ac\1\u01ed\26\u01d8"+
    "\20\u021e\1\u0233\25\u021e\1\0\1\u0234\22\0\1\u0234\22\0"+
    "\1\u0235\22\0\1\u0235\21\0\15\u020a\1\u0236\2\u020a\1\u0221"+
    "\25\u020a\1\0\1\u0222\11\0\1\u0237\10\0\1\u0222\35\0"+
    "\1\u0238\2\0\1\u0239\2\0\1\u023a\23\0\14\u01e0\1\u01f6"+
    "\1\u01e0\1\u01b5\27\u01e0\14\u0225\1\u023b\31\u0225\1\0\1\u023c"+
    "\22\0\1\u023c\21\0\17\u0227\1\u023d\26\u0227\1\0\1\u023e"+
    "\22\0\1\u023e\21\0\22\u0229\1\u023f\23\u0229\16\u01e2\1\u01b5"+
    "\1\u01fa\26\u01e2\14\u0212\1\u022b\1\u0240\30\u0212\1\0\1\u022c"+
    "\11\0\1\u0241\10\0\1\u022c\21\0\15\u0214\1\u0242\1\u0214"+
    "\1\u022d\26\u0214\1\0\1\u022e\11\0\1\u0243\10\0\1\u022e"+
    "\21\0\15\u0216\1\u0244\4\u0216\1\u022f\23\u0216\20\u0230\1\u0245"+
    "\25\u0230\1\0\1\u0246\22\0\1\u0246\22\0\1\u0247\22\0"+
    "\1\u0247\21\0\15\u021e\1\u0248\2\u021e\1\u0233\25\u021e\1\0"+
    "\1\u0234\11\0\1\u0249\10\0\1\u0234\22\0\1\u0235\11\0"+
    "\1\u010c\10\0\1\u0235\21\0\16\u020a\1\u020b\1\u020a\1\u0221"+
    "\25\u020a\22\0\1\u0111\40\0\1\u024a\45\0\1\u024b\45\0"+
    "\1\u024c\30\0\14\u0225\1\u023b\1\u024d\30\u0225\1\0\1\u023c"+
    "\11\0\1\u024e\10\0\1\u023c\21\0\15\u0227\1\u024f\1\u0227"+
    "\1\u023d\26\u0227\1\0\1\u023e\11\0\1\u0250\10\0\1\u023e"+
    "\21\0\15\u0229\1\u0251\4\u0229\1\u023f\23\u0229\14\u0212\1\u022b"+
    "\1\u0212\1\u0252\27\u0212\14\0\1\u0253\31\0\16\u0214\1\u0252"+
    "\1\u022d\26\u0214\17\0\1\u0254\26\0\12\u0216\1\u0255\7\u0216"+
    "\1\u022f\23\u0216\15\u0230\1\u0256\2\u0230\1\u0245\25\u0230\1\0"+
    "\1\u0246\11\0\1\u0257\10\0\1\u0246\22\0\1\u0247\11\0"+
    "\1\u0258\10\0\1\u0247\21\0\16\u021e\1\u021f\1\u021e\1\u0233"+
    "\25\u021e\22\0\1\u0123\26\0\1\u0259\4\0\1\u025a\40\0"+
    "\1\u025b\1\u0165\3\0\1\u025c\1\u0165\46\0\1\u025d\33\0"+
    "\14\u0225\1\u023b\1\u0225\1\u025e\27\u0225\14\0\1\u025f\31\0"+
    "\16\u0227\1\u025e\1\u023d\26\u0227\17\0\1\u0260\26\0\12\u0229"+
    "\1\u0261\7\u0229\1\u023f\23\u0229\15\0\1\u0262\45\0\1\u0263"+
    "\30\0\16\u0216\1\u0264\3\u0216\1\u022f\23\u0216\16\u0230\1\u0231"+
    "\1\u0230\1\u0245\25\u0230\22\0\1\u012d\37\0\1\u0265\2\0"+
    "\1\u0266\2\0\1\u012d\23\0\14\u0259\1\u0267\31\u0259\1\0"+
    "\1\u0268\22\0\1\u0268\21\0\17\u025b\1\u0269\26\u025b\1\0"+
    "\1\u026a\22\0\1\u026a\21\0\22\u025d\1\u026b\23\u025d\15\0"+
    "\1\u026c\45\0\1\u026d\30\0\16\u0229\1\u026e\3\u0229\1\u023f"+
    "\23\u0229\3\0\1\u026f\45\0\1\u0270\43\0\1\u0271\22\0"+
    "\1\u0271\36\0\1\u0146\45\0\1\u0272\30\0\14\u0259\1\u0267"+
    "\1\u0273\30\u0259\1\0\1\u0268\11\0\1\u0274\10\0\1\u0268"+
    "\21\0\15\u025b\1\u0275\1\u025b\1\u0269\26\u025b\1\0\1\u026a"+
    "\11\0\1\u0276\10\0\1\u026a\21\0\15\u025d\1\u0277\4\u025d"+
    "\1\u026b\23\u025d\3\0\1\u0278\45\0\1\u0279\43\0\1\u027a"+
    "\22\0\1\u027a\21\0\14\u026f\1\u027b\31\u026f\17\u0270\1\u027c"+
    "\26\u0270\1\0\1\u0271\11\0\1\u027d\10\0\1\u0271\1\u027e"+
    "\23\0\1\u0164\4\0\1\u0166\35\0\14\u0259\1\u0267\1\u0259"+
    "\1\u027f\27\u0259\14\0\1\u0280\31\0\16\u025b\1\u027f\1\u0269"+
    "\26\u025b\17\0\1\u0281\26\0\12\u025d\1\u0282\7\u025d\1\u026b"+
    "\23\u025d\14\u0278\1\u0283\31\u0278\17\u0279\1\u0284\26\u0279\1\0"+
    "\1\u027a\11\0\1\u0285\10\0\1\u027a\1\u0286\20\0\14\u026f"+
    "\1\u027b\1\u0287\30\u026f\15\u0270\1\u0288\1\u0270\1\u027c\26\u0270"+
    "\20\0\1\u0289\26\0\1\u028a\22\0\1\u028a\36\0\1\u028b"+
    "\45\0\1\u028c\30\0\16\u025d\1\u028d\3\u025d\1\u026b\23\u025d"+
    "\14\u0278\1\u0283\1\u028e\30\u0278\15\u0279\1\u028f\1\u0279\1\u0284"+
    "\26\u0279\20\0\1\u0290\26\0\1\u0291\22\0\1\u0291\21\0"+
    "\10\u026f\1\u0292\3\u026f\1\u027b\31\u026f\10\u0270\1\u0293\6\u0270"+
    "\1\u027c\26\u0270\15\0\1\u0294\31\0\1\u028a\22\0\1\u028a"+
    "\1\u0295\23\0\1\u0296\45\0\1\u0297\43\0\1\u0298\22\0"+
    "\1\u0298\21\0\10\u0278\1\u0299\3\u0278\1\u0283\31\u0278\10\u0279"+
    "\1\u029a\6\u0279\1\u0284\26\u0279\15\0\1\u029b\31\0\1\u0291"+
    "\22\0\1\u0291\1\u029c\20\0\14\u026f\1\u027b\1\u026f\1\u0252"+
    "\27\u026f\16\u0270\1\u0252\1\u027c\26\u0270\20\u0294\1\u029d\25\u0294"+
    "\1\0\1\u029e\22\0\1\u029e\21\0\14\u0296\1\u029f\31\u0296"+
    "\17\u0297\1\u02a0\26\u0297\1\0\1\u0298\11\0\1\u02a1\10\0"+
    "\1\u0298\1\u02a2\20\0\14\u0278\1\u0283\1\u0278\1\u025e\27\u0278"+
    "\16\u0279\1\u025e\1\u0284\26\u0279\20\u029b\1\u02a3\25\u029b\1\0"+
    "\1\u02a4\22\0\1\u02a4\21\0\15\u0294\1\u02a5\2\u0294\1\u029d"+
    "\25\u0294\1\0\1\u029e\11\0\1\u02a6\10\0\1\u029e\21\0"+
    "\14\u0296\1\u029f\1\u02a7\30\u0296\15\u0297\1\u02a8\1\u0297\1\u02a0"+
    "\26\u0297\20\0\1\u02a9\26\0\1\u02aa\22\0\1\u02aa\21\0"+
    "\15\u029b\1\u02ab\2\u029b\1\u02a3\25\u029b\1\0\1\u02a4\11\0"+
    "\1\u02ac\10\0\1\u02a4\21\0\16\u0294\1\u0295\1\u0294\1\u029d"+
    "\25\u0294\22\0\1\u01e5\23\0\10\u0296\1\u02ad\3\u0296\1\u029f"+
    "\31\u0296\10\u0297\1\u02ae\6\u0297\1\u02a0\26\u0297\15\0\1\u02af"+
    "\31\0\1\u02aa\22\0\1\u02aa\1\u02b0\20\0\16\u029b\1\u029c"+
    "\1\u029b\1\u02a3\25\u029b\22\0\1\u01f9\23\0\14\u0296\1\u029f"+
    "\1\u0296\1\u027f\27\u0296\16\u0297\1\u027f\1\u02a0\26\u0297\20\u02af"+
    "\1\u02b1\25\u02af\1\0\1\u02b2\22\0\1\u02b2\21\0\15\u02af"+
    "\1\u02b3\2\u02af\1\u02b1\25\u02af\1\0\1\u02b2\11\0\1\u02b4"+
    "\10\0\1\u02b2\21\0\16\u02af\1\u02b0\1\u02af\1\u02b1\25\u02af"+
    "\22\0\1\u023a\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25840];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\210\0\1\11\1\0\1\11"+
    "\20\0\1\1\66\0\1\11\26\0\1\1\54\0\1\11"+
    "\33\0\1\1\63\0\1\11\37\0\1\1\12\0\1\11"+
    "\24\0\1\11\6\0\1\1\1\0\1\11\17\0\1\1"+
    "\11\0\1\1\202\0\1\11\13\0\1\11\5\0\1\1"+
    "\11\0\1\1\20\0\1\11\15\0\1\1\47\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[692];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String Comp0Open=" {*COMP ";
  String Comp0Close=" *COMP} ";
  String Comp1Open=" {*COMP< ";
  String Comp1Close=" *COMP<} ";
  String Comp2Open=" {*COMP> ";
  String Comp2Close=" *COMP>} ";
  
  int theIndex=0;
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Func_COMP(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Func_COMP(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { /* Find where the NP phrase ended after the verb phrase and insert the COMP label */
			StringSearch.splitString2(yytext(),"VPb]","NP]");		
			out.write(StringSearch.firstString+Comp1Open+StringSearch.nextString+Comp1Close);
          }
        case 14: break;
        case 3: 
          { /* Find where the Verb phrase started and insert the COMP label */
			StringSearch.splitString(yytext(),"[VPb", false, -1);		
			out.write(Comp2Open+StringSearch.firstString+Comp2Close+StringSearch.nextString);
          }
        case 15: break;
        case 9: 
          { /* Find where the Subj function ended and insert the COMP label */
			StringSearch.splitString(yytext(),"*SUBJ<}", false, 7);		
			out.write(StringSearch.firstString+Comp1Open+StringSearch.nextString+Comp1Close);
          }
        case 16: break;
        case 13: 
          { /* Find where the Adverb phrase ended and insert the COMP label */
			StringSearch.splitString(yytext(),"AdvP]", true, 5);		
			out.write(StringSearch.firstString+Comp1Open+StringSearch.nextString+Comp1Close);
          }
        case 17: break;
        case 5: 
          { /* Find where the func subject phrase ended and insert the COMP label */
			theIndex = StringSearch.splitString(yytext(),"*SUBJ}", false, 6);
			if (theIndex == -1) 
			{
				theIndex = StringSearch.splitString(yytext(),"*SUBJ<}", false, 7); 
				if (theIndex == -1) 
					theIndex = StringSearch.splitString(yytext(),"*SUBJ>}", false, 7); 
			}
			out.write(StringSearch.firstString+Comp0Open+StringSearch.nextString+Comp0Close);
          }
        case 18: break;
        case 11: 
          { /* Find where the CP phrase ended and insert the COMP label */
			StringSearch.splitString(yytext(),"CP]", true, 3);		
			out.write(StringSearch.firstString+Comp1Open+StringSearch.nextString+Comp1Close);
          }
        case 19: break;
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
			out.write("\n");
          }
        case 20: break;
        case 4: 
          { /* Find where the Verb phrase ended and insert the COMP label */
			theIndex = StringSearch.splitString(yytext(),"VPb]", false, 4);		
			if (theIndex == -1) {theIndex = StringSearch.splitString(yytext(),"VPi]", false, 4);}
			out.write(StringSearch.firstString+Comp1Open+StringSearch.nextString+Comp1Close);
          }
        case 21: break;
        case 1: 
          { out.write(yytext());
          }
        case 22: break;
        case 10: 
          { /* Find where the Verb phrase ended and insert the COMP label */
			StringSearch.splitString(yytext(),"VPb]", false, 4);		
			out.write(StringSearch.firstString+Comp1Open+StringSearch.nextString+Comp1Close);
          }
        case 23: break;
        case 6: 
          { /* Find where the Preposition phrase ended and insert the COMP label */
			StringSearch.splitString(yytext(),"PP]", false, 3);		
			out.write(StringSearch.firstString+Comp1Open+StringSearch.nextString+Comp1Close);
          }
        case 24: break;
        case 7: 
          { /* Find where the Adverbial phrase ended and insert the COMP label */
			StringSearch.splitString(yytext(),"AdvP]", false, 5);		
			out.write(StringSearch.firstString+Comp1Open+StringSearch.nextString+Comp1Close);
          }
        case 25: break;
        case 8: 
          { /* Find where the Preposition phrase ended and insert the COMP label */
			StringSearch.splitString(yytext(),"PP]", false, 3);		
			out.write(StringSearch.firstString+Comp0Open+StringSearch.nextString+Comp0Close);
          }
        case 26: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Func_COMP <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Func_COMP scanner = null;
        try {
          scanner = new Func_COMP( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
