/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:40 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */
 
/* This transducer marks adjectival phrases */
/* An adjectival phrase consists of an optional adverb phrase followed by an adjective */
/* The adverb can neither be in the comparative nor in the superlative */

package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:40 from the specification file
 * <tt>Phrase_AP.flex</tt>
 */
public class Phrase_AP {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\27\1\0\1\1\1\2\22\0\1\1\13\0\1\0"+
    "\1\0\3\0\3\0\15\0\1\17\1\0\1\22\1\0\1\25\7\0"+
    "\1\23\1\0\1\0\1\20\2\0\1\0\2\0\1\0\1\24\3\0"+
    "\1\16\1\0\1\21\1\0\1\26\1\0\1\14\1\0\1\0\1\10"+
    "\1\6\1\4\1\0\1\3\1\0\1\0\1\3\1\15\1\12\1\7"+
    "\1\5\1\0\2\0\1\13\1\0\1\0\1\11\1\0\1\3\175\0"+
    "\1\0\7\0\1\7\uff01\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\4\1\1\2\35\0\1\3\70\0\1\3\34\0"+
    "\1\3\1\0\1\3\1\0\1\3\4\0\1\3\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\140\0\110\0\30\0\170"+
    "\0\60\0\220\0\250\0\300\0\330\0\360\0\u0108\0\u0120"+
    "\0\u0138\0\u0150\0\u0168\0\u0180\0\u0198\0\u01b0\0\u01c8\0\u01e0"+
    "\0\u01f8\0\u0210\0\u0228\0\u0240\0\u0258\0\u0270\0\u0288\0\u02a0"+
    "\0\u02b8\0\u02d0\0\u02e8\0\110\0\u0300\0\u0318\0\u0330\0\u0348"+
    "\0\u0360\0\u0378\0\u0390\0\u03a8\0\u03c0\0\u03d8\0\u03f0\0\u0408"+
    "\0\u0420\0\u0438\0\u0450\0\u0468\0\u0480\0\u0498\0\u04b0\0\u04c8"+
    "\0\u04e0\0\u04f8\0\u0510\0\u0528\0\u0540\0\u0558\0\u0570\0\u0588"+
    "\0\u05a0\0\u05b8\0\u05d0\0\u05e8\0\u0600\0\u0618\0\u0630\0\u0648"+
    "\0\u0660\0\u0678\0\u0690\0\u06a8\0\u06c0\0\u06d8\0\u06f0\0\u0708"+
    "\0\u0720\0\u0738\0\u0750\0\u0768\0\u0780\0\u0798\0\u07b0\0\u07c8"+
    "\0\u07e0\0\u07f8\0\u0810\0\u0828\0\u01c8\0\u0840\0\u0858\0\u0870"+
    "\0\u0888\0\u08a0\0\u08b8\0\u08d0\0\u08e8\0\u0900\0\u0918\0\u0930"+
    "\0\u0948\0\u0960\0\u0978\0\u0990\0\u09a8\0\u09c0\0\u09d8\0\u09f0"+
    "\0\u0a08\0\u0a20\0\u0a38\0\u0a50\0\u0a68\0\u0a80\0\u0a98\0\u0ab0"+
    "\0\u0ac8\0\u0390\0\u0ae0\0\u03d8\0\u0af8\0\u0420\0\u0b10\0\u0b28"+
    "\0\u0b40\0\u0b58\0\u05e8\0\u0b70\0\u0b88\0\u0ba0\0\u0bb8\0\u0bd0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\13\2\1\5\10\2\1\6\1\7"+
    "\1\10\1\0\24\7\1\0\1\7\1\11\1\0\24\7"+
    "\31\0\1\7\1\10\1\0\14\7\1\12\3\7\1\13"+
    "\3\7\2\0\1\10\13\0\1\14\12\0\1\7\1\10"+
    "\1\0\5\7\1\15\16\7\1\0\1\7\1\10\1\0"+
    "\21\7\1\16\2\7\4\0\1\17\5\0\1\17\16\0"+
    "\1\7\1\10\1\0\6\7\1\20\15\7\1\0\1\7"+
    "\1\10\1\0\22\7\1\21\1\7\5\0\1\22\1\0"+
    "\1\22\21\0\1\7\1\10\1\0\15\7\1\23\6\7"+
    "\1\0\1\7\1\10\1\0\23\7\1\24\6\0\3\25"+
    "\20\0\1\23\1\26\1\27\11\23\1\30\12\23\1\27"+
    "\1\7\1\10\1\0\14\7\1\31\1\32\1\7\1\33"+
    "\4\7\6\0\1\34\3\0\1\34\1\0\1\34\14\0"+
    "\1\27\1\26\12\27\1\35\1\36\26\27\1\35\13\27"+
    "\1\23\1\26\1\27\11\23\1\37\12\23\1\27\1\7"+
    "\1\10\1\0\5\7\1\40\7\7\1\41\6\7\1\0"+
    "\1\7\1\10\1\0\15\7\1\42\6\7\1\0\1\7"+
    "\1\10\1\0\15\7\1\43\6\7\5\0\1\44\1\0"+
    "\1\44\3\0\1\44\15\0\14\27\1\45\16\27\1\46"+
    "\5\27\1\46\2\27\1\35\13\27\1\7\1\47\1\0"+
    "\11\7\1\50\12\7\1\0\1\7\1\10\1\0\6\7"+
    "\1\51\15\7\1\0\1\41\1\52\1\53\20\41\1\54"+
    "\3\41\1\53\1\42\1\55\1\56\20\42\1\57\3\42"+
    "\1\56\1\43\1\60\1\61\20\43\1\62\3\43\1\61"+
    "\1\0\1\63\12\0\1\64\13\0\4\27\1\65\1\27"+
    "\1\65\5\27\1\35\13\27\1\0\1\47\13\0\1\14"+
    "\1\0\1\66\10\0\1\7\1\47\1\0\24\7\1\0"+
    "\1\7\1\10\1\0\15\7\1\67\6\7\1\0\1\53"+
    "\1\52\13\53\1\70\5\53\1\71\27\53\1\71\4\53"+
    "\1\41\1\52\1\53\20\41\1\54\1\72\2\41\1\53"+
    "\1\56\1\55\13\56\1\73\5\56\1\74\27\56\1\74"+
    "\4\56\1\42\1\55\1\56\20\42\1\57\1\75\2\42"+
    "\1\56\1\61\1\60\13\61\1\76\5\61\1\77\27\61"+
    "\1\77\4\61\1\43\1\60\1\61\20\43\1\62\1\100"+
    "\2\43\1\61\1\0\1\63\15\0\1\66\11\0\1\63"+
    "\26\0\5\27\3\101\4\27\1\35\13\27\10\0\1\102"+
    "\17\0\1\67\1\103\1\104\20\67\1\105\3\67\1\104"+
    "\3\53\1\106\5\53\1\106\11\53\1\71\27\53\1\71"+
    "\1\107\3\53\1\41\1\52\1\53\20\41\1\54\1\41"+
    "\1\110\1\41\1\53\3\56\1\111\5\56\1\111\11\56"+
    "\1\74\27\56\1\74\1\112\3\56\1\42\1\55\1\56"+
    "\20\42\1\57\1\42\1\113\1\42\1\56\3\61\1\114"+
    "\5\61\1\114\11\61\1\77\27\61\1\77\1\115\3\61"+
    "\1\43\1\60\1\61\20\43\1\62\1\43\1\116\1\43"+
    "\1\61\5\27\1\117\3\27\1\117\1\27\1\117\1\35"+
    "\13\27\11\0\1\120\16\0\1\104\1\103\13\104\1\121"+
    "\5\104\1\122\27\104\1\122\4\104\1\67\1\103\1\104"+
    "\20\67\1\105\1\123\2\67\1\104\4\53\1\124\1\53"+
    "\1\124\14\53\1\71\27\53\1\71\1\53\1\125\2\53"+
    "\1\41\1\52\1\53\20\41\1\54\2\41\1\126\1\53"+
    "\4\56\1\127\1\56\1\127\14\56\1\74\27\56\1\74"+
    "\1\56\1\130\2\56\1\42\1\55\1\56\20\42\1\57"+
    "\2\42\1\131\1\56\4\61\1\132\1\61\1\132\14\61"+
    "\1\77\27\61\1\77\1\61\1\133\2\61\1\43\1\60"+
    "\1\61\20\43\1\62\2\43\1\134\1\61\4\27\1\135"+
    "\1\27\1\135\3\27\1\135\1\27\1\35\13\27\20\0"+
    "\1\136\7\0\3\104\1\137\5\104\1\137\11\104\1\122"+
    "\27\104\1\122\1\140\3\104\1\67\1\103\1\104\20\67"+
    "\1\105\1\67\1\141\1\67\1\104\5\53\3\142\13\53"+
    "\1\71\27\53\1\71\2\53\1\143\1\53\1\41\1\52"+
    "\1\53\14\41\1\144\3\41\1\54\3\41\1\53\5\56"+
    "\3\145\13\56\1\74\27\56\1\74\2\56\1\146\1\56"+
    "\1\42\1\55\1\56\15\42\1\147\2\42\1\57\3\42"+
    "\1\56\5\61\3\150\13\61\1\77\27\61\1\77\2\61"+
    "\1\151\1\61\1\43\1\60\1\61\17\43\1\152\1\62"+
    "\3\43\1\61\21\0\1\11\6\0\4\104\1\153\1\104"+
    "\1\153\14\104\1\122\27\104\1\122\1\104\1\154\2\104"+
    "\1\67\1\103\1\104\20\67\1\105\2\67\1\155\1\104"+
    "\5\53\1\156\3\53\1\156\1\53\1\156\7\53\1\71"+
    "\23\53\1\157\3\53\1\71\4\53\1\41\1\52\1\53"+
    "\15\41\1\160\2\41\1\54\3\41\1\53\5\56\1\161"+
    "\3\56\1\161\1\56\1\161\7\56\1\74\24\56\1\162"+
    "\2\56\1\74\4\56\1\42\1\55\1\56\15\42\1\163"+
    "\2\42\1\57\3\42\1\56\5\61\1\164\3\61\1\164"+
    "\1\61\1\164\7\61\1\77\26\61\1\165\1\77\4\61"+
    "\1\43\1\60\1\61\15\43\1\166\2\43\1\62\3\43"+
    "\1\61\5\104\3\167\13\104\1\122\27\104\1\122\2\104"+
    "\1\170\1\104\1\67\1\103\1\104\14\67\1\171\3\67"+
    "\1\105\3\67\1\104\4\53\1\172\1\53\1\172\3\53"+
    "\1\172\10\53\1\71\24\53\1\173\2\53\1\71\4\53"+
    "\1\41\1\52\1\53\16\41\1\2\1\41\1\54\3\41"+
    "\1\53\4\56\1\174\1\56\1\174\3\56\1\174\10\56"+
    "\1\74\24\56\1\175\2\56\1\74\4\56\1\42\1\55"+
    "\1\56\16\42\1\2\1\42\1\57\3\42\1\56\4\61"+
    "\1\176\1\61\1\176\3\61\1\176\10\61\1\77\24\61"+
    "\1\177\2\61\1\77\4\61\1\43\1\60\1\61\16\43"+
    "\1\2\1\43\1\62\3\43\1\61\5\104\1\200\3\104"+
    "\1\200\1\104\1\200\7\104\1\122\23\104\1\201\3\104"+
    "\1\122\4\104\1\67\1\103\1\104\5\67\1\202\12\67"+
    "\1\105\3\67\1\104\21\53\1\4\1\53\1\71\4\53"+
    "\21\56\1\4\1\56\1\74\4\56\21\61\1\4\1\61"+
    "\1\77\4\61\4\104\1\203\1\104\1\203\3\104\1\203"+
    "\10\104\1\122\14\104\1\204\12\104\1\122\4\104\1\67"+
    "\1\103\1\104\6\67\1\205\11\67\1\105\3\67\12\104"+
    "\1\206\11\104\1\122\4\104\1\67\1\103\1\104\15\67"+
    "\1\207\2\67\1\105\3\67\21\104\1\210\2\104\1\122"+
    "\4\104\1\67\1\103\1\104\16\67\1\2\1\67\1\105"+
    "\3\67\22\104\1\4\1\104\1\122\4\104";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3048];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\1\11\1\1\1\11\35\0\1\11\70\0"+
    "\1\1\34\0\1\1\1\0\1\1\1\0\1\1\4\0"+
    "\1\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String APOpen=" [AP ";
  String APClose=" AP] "; 
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Phrase_AP(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Phrase_AP(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { out.write(APOpen+yytext()+APClose);
          }
        case 4: break;
        case 1: 
          { out.write(yytext());
          }
        case 5: break;
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
			out.write("\n");
          }
        case 6: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Phrase_AP <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Phrase_AP scanner = null;
        try {
          scanner = new Phrase_AP( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
