/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:43 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */

/* This transducer marks potential objects */
package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:43 from the specification file
 * <tt>Func_OBJ.flex</tt>
 */
public class Func_OBJ {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\41\1\0\1\1\1\0\22\0\1\23\11\0\1\31"+
    "\1\0\1\0\1\0\3\0\3\0\10\0\1\40\1\0\1\40\2\0"+
    "\1\13\1\36\1\17\1\0\1\26\1\0\1\0\1\0\1\0\1\37"+
    "\1\0\1\34\1\24\1\16\1\0\1\14\1\32\1\0\1\20\1\0"+
    "\1\33\1\21\1\25\1\0\1\0\1\0\1\12\1\0\1\15\1\0"+
    "\1\27\1\0\1\6\1\0\1\10\1\3\1\2\1\0\1\6\1\0"+
    "\1\22\1\0\1\0\1\0\1\5\1\0\1\0\1\0\1\0\1\0"+
    "\1\7\1\11\1\0\1\4\1\0\1\0\1\0\1\0\1\30\1\0"+
    "\1\35\170\0\1\0\7\0\1\0\ufefe\0\1\0\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\277\0\1\3\11\0\1\4\4\0"+
    "\1\5\301\0\1\6\17\0\1\7\72\0\1\10\47\0"+
    "\1\11\15\0\1\3\5\0\1\12\6\0\1\4\1\5"+
    "\151\0\1\6\14\0\1\7\23\0\1\13\3\0\1\10"+
    "\1\14\25\0\1\12\54\0\1\13\1\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[761];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\42\0\210\0\252\0\314"+
    "\0\356\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec"+
    "\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc"+
    "\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c"+
    "\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\u061c"+
    "\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a\0\u072c"+
    "\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\u081a\0\u083c"+
    "\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c"+
    "\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c"+
    "\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c"+
    "\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c"+
    "\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c"+
    "\0\u0dae\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c"+
    "\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24\0\u0f46\0\u0f68\0\u0f8a\0\u0fac"+
    "\0\u0fce\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\u109a\0\u10bc"+
    "\0\u10de\0\u1100\0\u1122\0\u1144\0\u1166\0\u1188\0\u11aa\0\u11cc"+
    "\0\u11ee\0\u1210\0\u1232\0\u1254\0\u1276\0\u1298\0\u12ba\0\u12dc"+
    "\0\u12fe\0\u1320\0\u1342\0\u1364\0\u1386\0\u13a8\0\u13ca\0\u13ec"+
    "\0\u140e\0\u1430\0\u1452\0\u1474\0\u1496\0\u14b8\0\u14da\0\u14fc"+
    "\0\u151e\0\u1540\0\u1562\0\u1584\0\u15a6\0\u15c8\0\u15ea\0\u160c"+
    "\0\u162e\0\u1650\0\u1672\0\u1694\0\u16b6\0\u16d8\0\u16fa\0\u171c"+
    "\0\u173e\0\u1760\0\u1782\0\u17a4\0\u17c6\0\u17e8\0\u180a\0\u182c"+
    "\0\u184e\0\u1870\0\u1892\0\u18b4\0\u18d6\0\u18f8\0\u191a\0\u193c"+
    "\0\u195e\0\u1980\0\u19a2\0\u19c4\0\u19e6\0\u1a08\0\u1a2a\0\u1a4c"+
    "\0\u1a6e\0\u1a90\0\u1ab2\0\u1ad4\0\u1af6\0\u1b18\0\u1b3a\0\u1b5c"+
    "\0\u1b7e\0\u1ba0\0\u1bc2\0\u1be4\0\u1c06\0\u1c28\0\u1c4a\0\u1c6c"+
    "\0\u1c8e\0\u1cb0\0\u1cd2\0\u1cf4\0\u1d16\0\u1d38\0\u1d5a\0\u1d7c"+
    "\0\u1d9e\0\u1dc0\0\u1de2\0\u1e04\0\u1e26\0\u1e48\0\u1e6a\0\u1e8c"+
    "\0\u1eae\0\u1ed0\0\u1ef2\0\u1f14\0\u1f36\0\u1f58\0\u1f7a\0\u1f9c"+
    "\0\u1fbe\0\u1fe0\0\u2002\0\u2024\0\u2046\0\u2068\0\u208a\0\u20ac"+
    "\0\u20ce\0\u20f0\0\u2112\0\u2134\0\u2156\0\u2178\0\u219a\0\u21bc"+
    "\0\u21de\0\u2200\0\u2222\0\u2244\0\u2266\0\u2288\0\u22aa\0\u22cc"+
    "\0\u22ee\0\u2310\0\u2332\0\u2354\0\u2376\0\u2398\0\u23ba\0\u23dc"+
    "\0\u23fe\0\u2420\0\u2442\0\u2464\0\u2486\0\u24a8\0\u24ca\0\u24ec"+
    "\0\u250e\0\u2530\0\u2552\0\u2574\0\u2596\0\u25b8\0\u25da\0\u25fc"+
    "\0\u261e\0\u2640\0\u2662\0\u2684\0\u26a6\0\u26c8\0\u26ea\0\u270c"+
    "\0\u272e\0\u2750\0\u2772\0\u2794\0\u27b6\0\u27d8\0\u27fa\0\u281c"+
    "\0\u283e\0\u2860\0\u2882\0\u28a4\0\u28c6\0\u28e8\0\u290a\0\u292c"+
    "\0\u294e\0\u2970\0\u2992\0\u29b4\0\u29d6\0\u29f8\0\u2a1a\0\u2a3c"+
    "\0\u2a5e\0\u2a80\0\u2aa2\0\u2ac4\0\u2ae6\0\u2b08\0\u2b2a\0\u2b4c"+
    "\0\u2b6e\0\u2b90\0\u2bb2\0\u2bd4\0\u2bf6\0\u2c18\0\u2c3a\0\u2c5c"+
    "\0\u2c7e\0\u2ca0\0\u2cc2\0\u2ce4\0\u2d06\0\u2d28\0\u2d4a\0\u2d6c"+
    "\0\u2d8e\0\u2db0\0\u2dd2\0\u2df4\0\u2e16\0\u2e38\0\u2e5a\0\u2e7c"+
    "\0\u2e9e\0\u2ec0\0\u2ee2\0\u2f04\0\u2f26\0\u2f48\0\u2f6a\0\u2f8c"+
    "\0\u2fae\0\u2fd0\0\u2ff2\0\u3014\0\u3036\0\u3058\0\u307a\0\u309c"+
    "\0\u30be\0\u30e0\0\u3102\0\u3124\0\u3146\0\u3168\0\u318a\0\u31ac"+
    "\0\u31ce\0\u31f0\0\u3212\0\u3234\0\u3256\0\u3278\0\u329a\0\u32bc"+
    "\0\u32de\0\u3300\0\u3322\0\u3344\0\u3366\0\u3388\0\u33aa\0\u33cc"+
    "\0\u33ee\0\u3410\0\u3432\0\u3454\0\u3476\0\u3498\0\u34ba\0\u34dc"+
    "\0\u34fe\0\u3520\0\u3542\0\u3564\0\u3586\0\u35a8\0\u35ca\0\u35ec"+
    "\0\u360e\0\u3630\0\u3652\0\u3674\0\u3696\0\u36b8\0\u36da\0\u36fc"+
    "\0\u371e\0\u3740\0\u3762\0\u3784\0\u37a6\0\u37c8\0\u37ea\0\u380c"+
    "\0\u382e\0\u3850\0\u3872\0\u3894\0\u38b6\0\u38d8\0\u38fa\0\u391c"+
    "\0\u393e\0\u3960\0\u3982\0\u39a4\0\u39c6\0\u39e8\0\u3a0a\0\u3a2c"+
    "\0\u3a4e\0\u3a70\0\u3a92\0\u3ab4\0\u3ad6\0\u3af8\0\u3b1a\0\u3b3c"+
    "\0\u3b5e\0\u3b80\0\u3ba2\0\u3bc4\0\u3be6\0\u3c08\0\u3c2a\0\u3c4c"+
    "\0\u3c6e\0\u3c90\0\u3cb2\0\u3cd4\0\u3cf6\0\u3d18\0\u3d3a\0\u3d5c"+
    "\0\u3d7e\0\u3da0\0\u3dc2\0\u3de4\0\u3e06\0\u3e28\0\u3e4a\0\u3e6c"+
    "\0\u3e8e\0\u3eb0\0\u3ed2\0\u3ef4\0\u3f16\0\u3f38\0\u3f5a\0\u3f7c"+
    "\0\u3f9e\0\u3fc0\0\u3fe2\0\u4004\0\u4026\0\u4048\0\u406a\0\u408c"+
    "\0\u40ae\0\u40d0\0\u40f2\0\u4114\0\u4136\0\u4158\0\u417a\0\u419c"+
    "\0\u41be\0\u41e0\0\u4202\0\u4224\0\u4246\0\u4268\0\u428a\0\u42ac"+
    "\0\u42ce\0\u42f0\0\u4312\0\u4334\0\u4356\0\u4378\0\u439a\0\u43bc"+
    "\0\u43de\0\u4400\0\u4422\0\u4444\0\u4466\0\u4488\0\u44aa\0\u44cc"+
    "\0\42\0\u44ee\0\u4510\0\u4532\0\u4554\0\u4576\0\u4598\0\u45ba"+
    "\0\u45dc\0\u45fe\0\u4620\0\u4642\0\u4664\0\u4686\0\42\0\u46a8"+
    "\0\u46ca\0\u46ec\0\u470e\0\u4730\0\u4752\0\u4774\0\u4796\0\u47b8"+
    "\0\u47da\0\u47fc\0\u481e\0\42\0\42\0\u4840\0\u4862\0\u4884"+
    "\0\u48a6\0\u48c8\0\u48ea\0\u490c\0\u492e\0\u4950\0\u4972\0\u4994"+
    "\0\u49b6\0\u49d8\0\u49fa\0\u4a1c\0\u4a3e\0\u4a60\0\u4a82\0\u4aa4"+
    "\0\u4ac6\0\u4ae8\0\u4b0a\0\u4b2c\0\u4b4e\0\u4b70\0\u4b92\0\u4bb4"+
    "\0\u4bd6\0\u4bf8\0\u4c1a\0\u4c3c\0\u4c5e\0\u4c80\0\u4ca2\0\u4cc4"+
    "\0\u4ce6\0\u4d08\0\u4d2a\0\u4d4c\0\u4d6e\0\u4d90\0\u4db2\0\u4dd4"+
    "\0\u4df6\0\u4e18\0\u4e3a\0\u4e5c\0\u4e7e\0\u4ea0\0\u4ec2\0\u4ee4"+
    "\0\u4f06\0\u4f28\0\u4f4a\0\u4f6c\0\u4f8e\0\u4fb0\0\u4fd2\0\u4ff4"+
    "\0\u5016\0\u5038\0\u505a\0\u507c\0\u509e\0\u50c0\0\u50e2\0\u5104"+
    "\0\u5126\0\u5148\0\u516a\0\u518c\0\u51ae\0\u51d0\0\u51f2\0\u5214"+
    "\0\u5236\0\u5258\0\u527a\0\u529c\0\u52be\0\u52e0\0\u5302\0\u5324"+
    "\0\u5346\0\u5368\0\u538a\0\u53ac\0\u53ce\0\u53f0\0\u5412\0\u5434"+
    "\0\u5456\0\u5478\0\u549a\0\u54bc\0\u54de\0\u5500\0\u5522\0\u5544"+
    "\0\u5566\0\u5588\0\u55aa\0\u55cc\0\u55ee\0\u5610\0\42\0\u5632"+
    "\0\u5654\0\u5676\0\u5698\0\u56ba\0\u56dc\0\u56fe\0\u5720\0\u5742"+
    "\0\u5764\0\u5786\0\u57a8\0\42\0\u57ca\0\u57ec\0\u580e\0\u5830"+
    "\0\u5852\0\u5874\0\u5896\0\u58b8\0\u58da\0\u58fc\0\u591e\0\u5940"+
    "\0\u5962\0\u5984\0\u59a6\0\u59c8\0\u59ea\0\u5a0c\0\u5a2e\0\u5a50"+
    "\0\u5a72\0\u5a94\0\u5ab6\0\42\0\u5ad8\0\u5afa\0\u5b1c\0\u5b3e"+
    "\0\u5b60\0\u5b82\0\u5ba4\0\u5bc6\0\u5be8\0\u5c0a\0\u5c2c\0\u5c4e"+
    "\0\u5c70\0\u5c92\0\u5cb4\0\u5cd6\0\u5cf8\0\u5d1a\0\u5d3c\0\u5d5e"+
    "\0\u5d80\0\u5da2\0\42\0\u5dc4\0\u5de6\0\u5e08\0\u5e2a\0\u5e4c"+
    "\0\u5e6e\0\u5e90\0\u5eb2\0\u5ed4\0\u5ef6\0\u5f18\0\u5f3a\0\u5f5c"+
    "\0\u5f7e\0\u5fa0\0\u5fc2\0\u5fe4\0\u6006\0\u6028\0\u604a\0\u606c"+
    "\0\u608e\0\u60b0\0\u60d2\0\u60f4\0\u6116\0\u6138\0\u615a\0\u617c"+
    "\0\u619e\0\u61c0\0\u61e2\0\u6204\0\u6226\0\u6248\0\u626a\0\u628c"+
    "\0\u62ae\0\u62d0\0\u62f2\0\u6314\0\u6336\0\u6358\0\u637a\0\42"+
    "\0\42";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[761];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\12\2\1\3\15\2\1\4\10\2\1\5\55\0\1\6"+
    "\2\0\1\7\1\10\1\0\1\11\51\0\1\12\24\0"+
    "\1\13\41\0\1\14\41\0\1\15\41\0\1\16\45\0"+
    "\1\17\11\0\1\20\12\0\1\21\2\0\1\21\36\0"+
    "\1\22\2\0\1\22\1\23\32\0\7\15\1\24\32\15"+
    "\7\0\1\25\12\0\1\26\1\27\51\0\1\30\41\0"+
    "\1\31\6\0\13\21\1\32\26\21\16\22\1\33\23\22"+
    "\1\0\1\34\21\0\1\34\20\0\1\35\37\0\21\25"+
    "\1\36\20\25\21\26\1\37\20\26\21\27\1\40\20\27"+
    "\36\0\1\41\16\0\1\42\26\0\13\21\1\32\1\43"+
    "\25\21\14\22\1\44\1\22\1\33\23\22\1\0\1\34"+
    "\10\0\1\45\10\0\1\34\23\0\1\46\34\0\14\25"+
    "\1\47\4\25\1\36\20\25\14\26\1\50\4\26\1\37"+
    "\20\26\14\27\1\51\4\27\1\40\20\27\37\0\1\52"+
    "\36\0\1\53\5\0\13\21\1\32\1\21\1\54\24\21"+
    "\15\22\1\54\1\33\23\22\13\0\1\55\2\0\1\56"+
    "\24\0\1\57\21\0\1\57\16\0\7\25\1\60\11\25"+
    "\1\36\20\25\21\26\1\37\1\61\17\26\15\27\1\62"+
    "\3\27\1\40\20\27\31\52\1\63\10\52\31\53\1\64"+
    "\10\53\1\0\1\65\21\0\1\65\32\0\1\66\41\0"+
    "\1\67\26\0\1\57\6\0\1\70\12\0\1\57\16\0"+
    "\15\25\1\71\3\25\1\36\20\25\15\26\1\72\3\26"+
    "\1\37\20\26\1\0\1\73\21\0\1\73\16\0\20\52"+
    "\1\74\10\52\1\63\10\52\31\53\1\64\1\75\7\53"+
    "\1\0\1\65\10\0\1\76\10\0\1\65\4\0\1\77"+
    "\14\0\1\100\2\0\1\100\36\0\1\101\2\0\1\101"+
    "\34\0\1\102\7\0\1\103\11\0\1\102\17\0\1\104"+
    "\21\0\1\104\17\0\1\105\21\0\1\105\17\0\1\73"+
    "\10\0\1\106\10\0\1\73\4\0\1\107\11\0\31\52"+
    "\1\63\1\52\1\110\6\52\31\53\1\64\1\53\1\111"+
    "\6\53\21\0\1\112\51\0\1\113\10\0\13\100\1\114"+
    "\26\100\16\101\1\115\23\101\1\0\1\102\15\0\1\116"+
    "\3\0\1\102\17\0\1\102\21\0\1\102\17\0\1\104"+
    "\10\0\1\117\10\0\1\104\4\0\1\120\12\0\1\105"+
    "\10\0\1\121\10\0\1\105\4\0\1\122\24\0\1\123"+
    "\1\124\1\0\1\125\5\0\1\126\46\0\1\127\10\0"+
    "\31\52\1\63\4\52\1\130\3\52\13\53\1\131\15\53"+
    "\1\64\10\53\14\0\1\132\57\0\1\133\7\0\13\100"+
    "\1\114\1\134\25\100\14\101\1\135\1\101\1\115\23\101"+
    "\14\0\1\136\40\0\1\137\2\0\1\140\54\0\1\141"+
    "\23\0\1\142\1\143\1\0\1\144\5\0\1\145\46\0"+
    "\1\146\13\0\1\147\10\0\1\150\41\0\1\151\41\0"+
    "\1\152\52\0\1\153\34\0\1\154\11\0\1\155\7\0"+
    "\31\52\1\63\5\52\1\156\2\52\31\53\1\64\2\53"+
    "\1\157\5\53\23\0\1\160\51\0\1\161\6\0\7\100"+
    "\1\162\3\100\1\114\26\100\7\101\1\163\6\101\1\115"+
    "\23\101\15\0\1\164\40\0\1\165\41\0\1\166\57\0"+
    "\1\167\12\0\1\170\10\0\1\171\41\0\1\172\41\0"+
    "\1\173\52\0\1\174\46\0\1\175\13\0\1\176\40\0"+
    "\1\177\2\0\1\177\33\0\23\151\1\200\16\151\3\0"+
    "\1\201\2\0\1\201\1\202\60\0\1\203\46\0\1\204"+
    "\41\0\1\205\6\0\31\52\1\63\3\52\1\164\2\52"+
    "\1\206\1\52\31\53\1\64\3\53\1\207\4\53\21\160"+
    "\1\210\20\160\13\0\1\211\26\0\13\100\1\114\1\100"+
    "\1\54\24\100\15\101\1\54\1\115\23\101\1\0\1\212"+
    "\21\0\1\212\21\0\1\213\2\0\1\213\36\0\1\214"+
    "\2\0\1\214\1\215\65\0\1\216\12\0\1\217\40\0"+
    "\1\220\2\0\1\220\33\0\23\172\1\221\16\172\3\0"+
    "\1\222\2\0\1\222\1\223\60\0\1\224\46\0\1\225"+
    "\22\0\1\226\25\0\13\177\1\227\26\177\14\151\1\230"+
    "\6\151\1\200\16\151\16\201\1\231\23\201\1\0\1\232"+
    "\21\0\1\232\45\0\1\233\50\0\1\234\16\0\1\235"+
    "\26\0\31\52\1\63\3\52\1\164\4\52\1\0\1\236"+
    "\21\0\1\236\16\0\14\160\1\237\4\160\1\210\20\160"+
    "\34\0\1\240\6\0\1\212\10\0\1\241\10\0\1\212"+
    "\16\0\13\213\1\242\26\213\16\214\1\243\23\214\1\0"+
    "\1\244\21\0\1\244\31\0\1\245\42\0\1\246\25\0"+
    "\13\220\1\247\26\220\14\172\1\250\6\172\1\221\16\172"+
    "\16\222\1\251\23\222\1\0\1\252\21\0\1\252\45\0"+
    "\1\253\25\0\1\254\26\0\13\226\1\255\26\226\13\177"+
    "\1\227\1\256\25\177\14\151\1\257\6\151\1\200\16\151"+
    "\14\201\1\260\1\201\1\231\23\201\1\0\1\232\10\0"+
    "\1\261\10\0\1\232\31\0\1\262\65\0\1\263\36\0"+
    "\1\264\6\0\1\236\10\0\1\265\10\0\1\236\16\0"+
    "\15\160\1\266\3\160\1\210\20\160\31\240\1\267\10\240"+
    "\21\0\1\270\20\0\13\213\1\242\1\271\25\213\14\214"+
    "\1\272\1\214\1\243\23\214\1\0\1\244\10\0\1\273"+
    "\10\0\1\244\52\0\1\274\5\0\13\246\1\275\26\246"+
    "\13\220\1\247\1\276\25\220\14\172\1\277\6\172\1\221"+
    "\16\172\14\222\1\300\1\222\1\251\23\222\1\0\1\252"+
    "\10\0\1\301\10\0\1\252\31\0\1\302\62\0\1\303"+
    "\5\0\3\226\1\304\7\226\1\255\26\226\13\177\1\227"+
    "\1\177\1\305\24\177\15\151\1\306\5\151\1\200\16\151"+
    "\15\201\1\305\1\231\23\201\13\0\1\307\2\0\1\310"+
    "\26\0\1\311\36\0\31\263\1\312\10\263\31\264\1\313"+
    "\10\264\13\0\1\6\2\0\1\7\24\0\1\314\21\0"+
    "\1\314\16\0\31\240\1\267\1\315\7\240\14\0\1\316"+
    "\25\0\13\213\1\242\1\213\1\317\24\213\15\214\1\317"+
    "\1\243\23\214\13\0\1\320\2\0\1\321\23\0\31\274"+
    "\1\322\10\274\3\246\1\323\7\246\1\275\26\246\13\220"+
    "\1\247\1\220\1\324\24\220\15\172\1\325\5\172\1\221"+
    "\16\172\15\222\1\324\1\251\23\222\13\0\1\326\2\0"+
    "\1\327\26\0\1\330\36\0\31\303\1\331\10\303\4\226"+
    "\1\332\6\226\1\255\26\226\1\0\1\333\21\0\1\333"+
    "\17\0\1\334\21\0\1\334\32\0\1\335\41\0\1\336"+
    "\31\0\1\337\35\0\20\263\1\340\10\263\1\312\10\263"+
    "\31\264\1\313\1\341\7\264\1\0\1\314\10\0\1\342"+
    "\10\0\1\314\4\0\1\343\11\0\31\240\1\267\1\240"+
    "\1\344\6\240\23\0\1\345\17\0\1\346\21\0\1\346"+
    "\32\0\1\347\41\0\1\350\25\0\31\274\1\322\1\351"+
    "\7\274\4\246\1\352\6\246\1\275\26\246\1\0\1\353"+
    "\21\0\1\353\17\0\1\354\21\0\1\354\32\0\1\355"+
    "\41\0\1\356\31\0\1\357\35\0\31\303\1\331\1\360"+
    "\7\303\13\226\1\255\1\361\25\226\1\0\1\333\21\0"+
    "\1\333\4\0\1\362\12\0\1\334\10\0\1\363\10\0"+
    "\1\334\4\0\1\364\14\0\1\365\2\0\1\365\36\0"+
    "\1\366\2\0\1\366\47\0\1\367\25\0\31\263\1\312"+
    "\1\263\1\370\6\263\31\264\1\313\1\264\1\371\6\264"+
    "\13\0\1\372\57\0\1\373\10\0\13\240\1\374\15\240"+
    "\1\267\10\240\21\345\1\375\20\345\1\0\1\346\21\0"+
    "\1\346\4\0\1\376\14\0\1\377\2\0\1\377\36\0"+
    "\1\u0100\2\0\1\u0100\33\0\31\274\1\322\1\274\1\u0101"+
    "\6\274\13\246\1\275\1\u0102\25\246\1\0\1\353\21\0"+
    "\1\353\4\0\1\u0103\12\0\1\354\10\0\1\u0104\10\0"+
    "\1\354\4\0\1\u0105\14\0\1\u0106\2\0\1\u0106\36\0"+
    "\1\u0107\2\0\1\u0107\47\0\1\u0108\25\0\31\303\1\331"+
    "\1\303\1\u0109\6\303\13\226\1\255\1\226\1\u010a\24\226"+
    "\31\0\1\u010b\23\0\1\u010c\2\0\1\u010d\54\0\1\u010e"+
    "\10\0\13\365\1\u010f\26\365\16\366\1\u0110\23\366\24\367"+
    "\1\u0111\15\367\31\263\1\312\4\263\1\u0112\3\263\13\264"+
    "\1\u0113\15\264\1\313\10\264\3\0\1\u0114\56\0\1\u0115"+
    "\21\0\31\240\1\267\2\240\1\u0116\5\240\14\345\1\u0117"+
    "\4\345\1\375\20\345\31\0\1\u0118\10\0\13\377\1\u0119"+
    "\26\377\16\u0100\1\u011a\23\u0100\13\274\1\u011b\15\274\1\322"+
    "\10\274\13\246\1\275\1\246\1\u011c\24\246\31\0\1\u011d"+
    "\23\0\1\u011e\2\0\1\u011f\54\0\1\u0120\10\0\13\u0106"+
    "\1\u0121\26\u0106\16\u0107\1\u0122\23\u0107\24\u0108\1\u0123\15\u0108"+
    "\13\303\1\u0124\15\303\1\331\10\303\1\0\1\u0125\21\0"+
    "\1\u0125\50\0\1\u0126\23\0\1\u0127\41\0\1\u0128\57\0"+
    "\1\u0129\7\0\13\365\1\u010f\1\u012a\25\365\14\366\1\u012b"+
    "\1\366\1\u0110\23\366\24\367\1\u0111\1\u012c\14\367\31\263"+
    "\1\312\5\263\1\u012d\2\263\31\264\1\313\2\264\1\u012e"+
    "\5\264\4\0\1\u012f\70\0\1\u0130\6\0\31\240\1\267"+
    "\3\240\1\u0131\4\240\15\345\1\u0132\3\345\1\375\20\345"+
    "\32\0\1\u0133\7\0\13\377\1\u0119\1\u0134\25\377\14\u0100"+
    "\1\u0135\1\u0100\1\u011a\23\u0100\31\274\1\322\2\274\1\u0136"+
    "\5\274\1\0\1\u0137\21\0\1\u0137\50\0\1\u0138\23\0"+
    "\1\u0139\41\0\1\u013a\57\0\1\u013b\7\0\13\u0106\1\u0121"+
    "\1\u013c\25\u0106\14\u0107\1\u013d\1\u0107\1\u0122\23\u0107\24\u0108"+
    "\1\u0123\1\u013e\14\u0108\31\303\1\331\2\303\1\u013f\5\303"+
    "\1\0\1\u0125\10\0\1\u0140\10\0\1\u0125\4\0\1\u0141"+
    "\44\0\1\u0142\11\0\1\u0143\2\0\1\u0143\36\0\1\u0144"+
    "\2\0\1\u0144\1\u0145\65\0\1\u0146\6\0\7\365\1\u0147"+
    "\3\365\1\u010f\26\365\7\366\1\u0148\6\366\1\u0110\23\366"+
    "\24\367\1\u0111\1\367\1\u0149\13\367\31\263\1\312\3\263"+
    "\1\u014a\2\263\1\u014b\1\263\31\264\1\313\3\264\1\u014c"+
    "\4\264\14\0\1\u014d\63\0\1\u014e\4\0\1\u014f\21\0"+
    "\1\u014f\17\0\1\u0150\21\0\1\u0150\51\0\1\u0151\6\0"+
    "\7\377\1\u0152\3\377\1\u0119\26\377\7\u0100\1\u0153\6\u0100"+
    "\1\u011a\23\u0100\31\274\1\322\3\274\1\u0154\4\274\1\0"+
    "\1\u0137\10\0\1\u0155\10\0\1\u0137\4\0\1\u0105\44\0"+
    "\1\u0156\11\0\1\u0157\2\0\1\u0157\36\0\1\u0158\2\0"+
    "\1\u0158\1\u0159\65\0\1\u015a\6\0\7\u0106\1\u015b\3\u0106"+
    "\1\u0121\26\u0106\7\u0107\1\u015c\6\u0107\1\u0122\23\u0107\24\u0108"+
    "\1\u0123\1\u0108\1\u015d\13\u0108\31\303\1\331\3\303\1\u015e"+
    "\4\303\13\0\1\u015f\1\124\1\0\1\u0160\5\0\1\126"+
    "\46\0\1\u0161\23\0\1\u0162\26\0\13\u0143\1\u0163\26\u0143"+
    "\16\u0144\1\u0164\23\u0144\1\0\1\u0165\21\0\1\u0165\31\0"+
    "\1\u0166\26\0\13\365\1\u010f\1\365\1\305\24\365\15\366"+
    "\1\305\1\u0110\23\366\24\367\1\u0111\2\367\1\u0167\12\367"+
    "\1\0\1\u0168\21\0\1\u0168\16\0\31\263\1\312\3\263"+
    "\1\u014a\4\263\1\0\1\u0169\21\0\1\u0169\16\0\13\u014d"+
    "\1\u016a\26\u014d\37\0\1\u016b\3\0\1\u014f\10\0\1\76"+
    "\10\0\1\u014f\17\0\1\u0150\10\0\1\u016c\10\0\1\u0150"+
    "\4\0\1\u016d\24\0\1\u016e\26\0\13\377\1\u0119\1\377"+
    "\1\317\24\377\15\u0100\1\317\1\u011a\23\u0100\1\0\1\u016f"+
    "\21\0\1\u016f\31\0\1\u0170\2\0\1\u011f\5\0\1\145"+
    "\30\0\1\u0171\26\0\13\u0157\1\u0172\26\u0157\16\u0158\1\u0173"+
    "\23\u0158\1\0\1\u0174\21\0\1\u0174\31\0\1\u0175\26\0"+
    "\13\u0106\1\u0121\1\u0106\1\324\24\u0106\15\u0107\1\324\1\u0122"+
    "\23\u0107\24\u0108\1\u0123\2\u0108\1\u0176\12\u0108\1\0\1\u0177"+
    "\21\0\1\u0177\21\0\1\147\10\0\1\u0178\41\0\1\u0179"+
    "\57\0\1\u017a\43\0\1\u017b\5\0\13\u0143\1\u0163\1\u017c"+
    "\25\u0143\14\u0144\1\u017d\1\u0144\1\u0164\23\u0144\1\0\1\u0165"+
    "\10\0\1\u017e\10\0\1\u0165\52\0\1\u017f\5\0\13\367"+
    "\1\u0180\10\367\1\u0111\15\367\1\0\1\u0168\10\0\1\u0181"+
    "\10\0\1\u0168\4\0\1\u0182\12\0\1\u0169\10\0\1\u0183"+
    "\10\0\1\u0169\16\0\3\u014d\1\u0184\7\u014d\1\u016a\26\u014d"+
    "\31\u016b\1\u0185\10\u016b\13\0\1\u0186\1\124\1\0\1\125"+
    "\5\0\1\u0187\46\0\1\u0188\44\0\1\u0189\6\0\1\u016f"+
    "\10\0\1\117\10\0\1\u016f\21\0\1\170\10\0\1\u0139"+
    "\61\0\1\u018a\5\0\13\u0157\1\u0172\1\u018b\25\u0157\14\u0158"+
    "\1\u018c\1\u0158\1\u0173\23\u0158\1\0\1\u0174\10\0\1\u018d"+
    "\10\0\1\u0174\52\0\1\u018e\5\0\13\u0108\1\u018f\10\u0108"+
    "\1\u0123\15\u0108\1\0\1\u0177\10\0\1\u0190\10\0\1\u0177"+
    "\21\0\1\u0191\2\0\1\u0191\36\0\1\u0192\2\0\1\u0192"+
    "\1\u0193\65\0\1\u0194\6\0\31\u017b\1\u0195\10\u017b\13\u0143"+
    "\1\u0163\1\u0143\1\u0196\24\u0143\15\u0144\1\u0196\1\u0164\23\u0144"+
    "\13\0\1\u0197\2\0\1\u0198\23\0\31\u017f\1\u0199\10\u017f"+
    "\3\367\1\u019a\20\367\1\u0111\15\367\13\0\1\u019b\1\124"+
    "\1\0\1\u019c\5\0\1\u019d\46\0\1\u019e\23\0\1\u019f"+
    "\2\0\1\125\23\0\4\u014d\1\u01a0\6\u014d\1\u016a\26\u014d"+
    "\20\u016b\1\u01a1\10\u016b\1\u0185\10\u016b\3\0\1\u01a2\10\0"+
    "\1\150\52\0\1\u01a3\46\0\1\155\7\0\31\u0189\1\u01a4"+
    "\10\u0189\31\u018a\1\u01a5\10\u018a\13\u0157\1\u0172\1\u0157\1\u01a6"+
    "\24\u0157\15\u0158\1\u01a6\1\u0173\23\u0158\13\0\1\u01a7\2\0"+
    "\1\u01a8\23\0\31\u018e\1\u01a9\10\u018e\3\u0108\1\u01aa\20\u0108"+
    "\1\u0123\15\u0108\13\0\1\u01ab\2\0\1\144\23\0\13\u0191"+
    "\1\u01ac\26\u0191\16\u0192\1\u01ad\23\u0192\1\0\1\u01ae\21\0"+
    "\1\u01ae\31\0\1\u01af\26\0\31\u017b\1\u0195\1\u01b0\7\u017b"+
    "\1\0\1\u01b1\21\0\1\u01b1\32\0\1\u01b2\41\0\1\u01b3"+
    "\25\0\31\u017f\1\u0199\1\u01b4\7\u017f\4\367\1\u01b5\17\367"+
    "\1\u0111\15\367\3\0\1\u01b6\10\0\1\u01b7\41\0\1\u01b8"+
    "\52\0\1\u01b9\46\0\1\u01ba\23\0\1\150\25\0\13\u014d"+
    "\1\u016a\1\u01bb\25\u014d\31\u016b\1\u0185\1\u016b\1\u01bc\6\u016b"+
    "\4\0\1\u01bd\63\0\1\u01be\13\0\31\u0189\1\u01a4\1\u01bf"+
    "\7\u0189\31\u018a\1\u01a5\1\u01c0\7\u018a\1\0\1\u01c1\21\0"+
    "\1\u01c1\32\0\1\u01c2\41\0\1\u01c3\25\0\31\u018e\1\u01a9"+
    "\1\u01c4\7\u018e\4\u0108\1\u01c5\17\u0108\1\u0123\15\u0108\14\0"+
    "\1\171\25\0\13\u0191\1\u01ac\1\u01c6\25\u0191\14\u0192\1\u01c7"+
    "\1\u0192\1\u01ad\23\u0192\1\0\1\u01ae\10\0\1\u01c8\10\0"+
    "\1\u01ae\52\0\1\u01c9\5\0\31\u017b\1\u0195\1\u017b\1\u01ca"+
    "\6\u017b\1\0\1\u01b1\21\0\1\u01b1\4\0\1\u01cb\14\0"+
    "\1\u01cc\2\0\1\u01cc\36\0\1\u01cd\2\0\1\u01cd\33\0"+
    "\31\u017f\1\u0199\1\u017f\1\u01ce\6\u017f\14\367\1\u01cf\7\367"+
    "\1\u0111\15\367\4\0\1\u01d0\40\0\1\u01d1\2\0\1\u01d1"+
    "\36\0\1\u01d2\2\0\1\u01d2\1\u01d3\60\0\1\u01d4\46\0"+
    "\1\u01d5\6\0\13\u014d\1\u016a\1\u014d\1\u01d6\24\u014d\31\u016b"+
    "\1\u0185\4\u016b\1\u01d7\3\u016b\14\0\1\u01d8\54\0\1\u01d9"+
    "\12\0\31\u0189\1\u01a4\1\u0189\1\u01da\6\u0189\31\u018a\1\u01a5"+
    "\1\u018a\1\u01db\6\u018a\1\0\1\u01c1\21\0\1\u01c1\4\0"+
    "\1\u01dc\14\0\1\u01dd\2\0\1\u01dd\36\0\1\u01de\2\0"+
    "\1\u01de\33\0\31\u018e\1\u01a9\1\u018e\1\u01df\6\u018e\14\u0108"+
    "\1\u01e0\7\u0108\1\u0123\15\u0108\13\u0191\1\u01ac\1\u0191\1\u01e1"+
    "\24\u0191\15\u0192\1\u01e1\1\u01ad\23\u0192\13\0\1\u01e2\2\0"+
    "\1\u01e3\23\0\31\u01c9\1\u01e4\10\u01c9\13\u017b\1\u01e5\15\u017b"+
    "\1\u0195\10\u017b\31\0\1\u01e6\10\0\13\u01cc\1\u01e7\26\u01cc"+
    "\16\u01cd\1\u01e8\23\u01cd\13\u017f\1\u01e9\15\u017f\1\u0199\10\u017f"+
    "\15\367\1\u010a\6\367\1\u0111\15\367\14\0\1\u01ea\25\0"+
    "\13\u01d1\1\u01eb\26\u01d1\16\u01d2\1\u01ec\23\u01d2\1\0\1\u01ed"+
    "\21\0\1\u01ed\45\0\1\u01ee\25\0\1\u01ef\27\0\1\u01f0"+
    "\21\0\1\u01f0\16\0\31\u016b\1\u0185\5\u016b\1\u01f1\2\u016b"+
    "\13\u01d8\1\u01f2\26\u01d8\13\0\1\u01f3\26\0\13\u0189\1\u01f4"+
    "\15\u0189\1\u01a4\10\u0189\13\u018a\1\u01f5\15\u018a\1\u01a5\10\u018a"+
    "\31\0\1\u01f6\10\0\13\u01dd\1\u01f7\26\u01dd\16\u01de\1\u01f8"+
    "\23\u01de\13\u018e\1\u01f9\15\u018e\1\u01a9\10\u018e\15\u0108\1\u011c"+
    "\6\u0108\1\u0123\15\u0108\1\0\1\u01fa\21\0\1\u01fa\32\0"+
    "\1\u01fb\41\0\1\u01fc\25\0\31\u01c9\1\u01e4\1\u01fd\7\u01c9"+
    "\31\u017b\1\u0195\2\u017b\1\u01fe\5\u017b\32\0\1\u01ff\7\0"+
    "\13\u01cc\1\u01e7\1\u0200\25\u01cc\14\u01cd\1\u0201\1\u01cd\1\u01e8"+
    "\23\u01cd\31\u017f\1\u0199\2\u017f\1\u0202\5\u017f\13\u01ea\1\u0203"+
    "\26\u01ea\13\u01d1\1\u01eb\1\u0204\25\u01d1\14\u01d2\1\u0205\1\u01d2"+
    "\1\u01ec\23\u01d2\1\0\1\u01ed\10\0\1\u0206\10\0\1\u01ed"+
    "\31\0\1\u0207\62\0\1\u0208\6\0\1\u01f0\21\0\1\u01f0"+
    "\4\0\1\343\11\0\31\u016b\1\u0185\3\u016b\1\u0209\2\u016b"+
    "\1\u020a\1\u016b\3\u01d8\1\u020b\7\u01d8\1\u01f2\26\u01d8\3\0"+
    "\1\u020c\36\0\31\u0189\1\u01a4\2\u0189\1\u020d\5\u0189\31\u018a"+
    "\1\u01a5\2\u018a\1\u020e\5\u018a\32\0\1\u020f\7\0\13\u01dd"+
    "\1\u01f7\1\u0210\25\u01dd\14\u01de\1\u0211\1\u01de\1\u01f8\23\u01de"+
    "\31\u018e\1\u01a9\2\u018e\1\u0212\5\u018e\1\0\1\u01fa\21\0"+
    "\1\u01fa\4\0\1\u0213\14\0\1\u0214\2\0\1\u0214\36\0"+
    "\1\u0215\2\0\1\u0215\33\0\31\u01c9\1\u01e4\1\u01c9\1\u0216"+
    "\6\u01c9\31\u017b\1\u0195\3\u017b\1\u0217\4\u017b\33\0\1\u0218"+
    "\6\0\7\u01cc\1\u0219\3\u01cc\1\u01e7\26\u01cc\7\u01cd\1\u021a"+
    "\6\u01cd\1\u01e8\23\u01cd\31\u017f\1\u0199\3\u017f\1\u021b\4\u017f"+
    "\3\u01ea\1\u021c\7\u01ea\1\u0203\26\u01ea\13\u01d1\1\u01eb\1\u01d1"+
    "\1\u021d\24\u01d1\15\u01d2\1\u021d\1\u01ec\23\u01d2\13\0\1\u021e"+
    "\2\0\1\u021f\26\0\1\u0220\36\0\31\u0208\1\u0221\10\u0208"+
    "\31\u016b\1\u0185\3\u016b\1\u0209\4\u016b\4\u01d8\1\u0222\6\u01d8"+
    "\1\u01f2\26\u01d8\4\0\1\u0223\35\0\31\u0189\1\u01a4\3\u0189"+
    "\1\u0224\4\u0189\31\u018a\1\u01a5\3\u018a\1\u0225\4\u018a\33\0"+
    "\1\u0226\6\0\7\u01dd\1\u0227\3\u01dd\1\u01f7\26\u01dd\7\u01de"+
    "\1\u0228\6\u01de\1\u01f8\23\u01de\31\u018e\1\u01a9\3\u018e\1\u0229"+
    "\4\u018e\31\0\1\u022a\10\0\13\u0214\1\u022b\26\u0214\16\u0215"+
    "\1\u022c\23\u0215\13\u01c9\1\u022d\15\u01c9\1\u01e4\10\u01c9\13\0"+
    "\1\u022e\26\0\13\u01cc\1\u01e7\1\u01cc\1\u0196\24\u01cc\15\u01cd"+
    "\1\u0196\1\u01e8\23\u01cd\1\0\1\u022f\21\0\1\u022f\16\0"+
    "\4\u01ea\1\u0230\6\u01ea\1\u0203\26\u01ea\1\0\1\u0231\21\0"+
    "\1\u0231\32\0\1\u0232\41\0\1\u0233\31\0\1\u0234\35\0"+
    "\31\u0208\1\u0221\1\u0235\7\u0208\13\u01d8\1\u01f2\1\u0236\25\u01d8"+
    "\14\0\1\u0237\40\0\1\u0238\26\0\13\u01dd\1\u01f7\1\u01dd"+
    "\1\u01a6\24\u01dd\15\u01de\1\u01a6\1\u01f8\23\u01de\1\0\1\u0239"+
    "\21\0\1\u0239\50\0\1\u023a\7\0\13\u0214\1\u022b\1\u023b"+
    "\25\u0214\14\u0215\1\u023c\1\u0215\1\u022c\23\u0215\31\u01c9\1\u01e4"+
    "\2\u01c9\1\u023d\5\u01c9\34\0\1\u023e\6\0\1\u022f\10\0"+
    "\1\363\10\0\1\u022f\16\0\13\u01ea\1\u0203\1\u023f\25\u01ea"+
    "\1\0\1\u0231\21\0\1\u0231\4\0\1\u0240\14\0\1\u0241"+
    "\2\0\1\u0241\36\0\1\u0242\2\0\1\u0242\47\0\1\u0243"+
    "\25\0\31\u0208\1\u0221\1\u0208\1\u0244\6\u0208\13\u01d8\1\u01f2"+
    "\1\u01d8\1\u0245\24\u01d8\24\u0237\1\u0246\15\u0237\34\0\1\u0247"+
    "\6\0\1\u0239\10\0\1\u0104\10\0\1\u0239\51\0\1\u0248"+
    "\6\0\7\u0214\1\u0249\3\u0214\1\u022b\26\u0214\7\u0215\1\u024a"+
    "\6\u0215\1\u022c\23\u0215\31\u01c9\1\u01e4\3\u01c9\1\u024b\4\u01c9"+
    "\31\u023e\1\u024c\10\u023e\13\u01ea\1\u0203\1\u01ea\1\u024d\24\u01ea"+
    "\31\0\1\u024e\10\0\13\u0241\1\u024f\26\u0241\16\u0242\1\u0250"+
    "\23\u0242\24\u0243\1\u0251\15\u0243\13\u0208\1\u0252\15\u0208\1\u0221"+
    "\10\u0208\1\0\1\u0253\21\0\1\u0253\16\0\24\u0237\1\u0246"+
    "\1\u0254\14\u0237\31\u0247\1\u0255\10\u0247\13\0\1\u0256\26\0"+
    "\13\u0214\1\u022b\1\u0214\1\u01e1\24\u0214\15\u0215\1\u01e1\1\u022c"+
    "\23\u0215\1\0\1\u0257\21\0\1\u0257\16\0\31\u023e\1\u024c"+
    "\1\u0258\7\u023e\1\0\1\u0259\21\0\1\u0259\50\0\1\u025a"+
    "\7\0\13\u0241\1\u024f\1\u025b\25\u0241\14\u0242\1\u025c\1\u0242"+
    "\1\u0250\23\u0242\24\u0243\1\u0251\1\u025d\14\u0243\31\u0208\1\u0221"+
    "\2\u0208\1\u025e\5\u0208\1\0\1\u0253\10\0\1\u025f\10\0"+
    "\1\u0253\4\0\1\u0260\11\0\24\u0237\1\u0246\1\u0237\1\u0261"+
    "\13\u0237\31\u0247\1\u0255\1\u0262\7\u0247\34\0\1\u0263\6\0"+
    "\1\u0257\10\0\1\u0264\10\0\1\u0257\16\0\31\u023e\1\u024c"+
    "\1\u023e\1\u0265\6\u023e\1\0\1\u0259\10\0\1\u0266\10\0"+
    "\1\u0259\4\0\1\u0267\44\0\1\u0268\6\0\7\u0241\1\u0269"+
    "\3\u0241\1\u024f\26\u0241\7\u0242\1\u026a\6\u0242\1\u0250\23\u0242"+
    "\24\u0243\1\u0251\1\u0243\1\u026b\13\u0243\31\u0208\1\u0221\3\u0208"+
    "\1\u026c\4\u0208\13\0\1\u026d\1\124\1\0\1\u026e\5\0"+
    "\1\u0187\46\0\1\u026f\10\0\24\u0237\1\u0246\2\u0237\1\u0270"+
    "\12\u0237\31\u0247\1\u0255\1\u0247\1\u0271\6\u0247\31\u0263\1\u0272"+
    "\10\u0263\13\0\1\u0273\2\0\1\u0160\23\0\13\u023e\1\u0274"+
    "\15\u023e\1\u024c\10\u023e\13\0\1\u0275\1\124\1\0\1\u0276"+
    "\5\0\1\u019d\46\0\1\u0277\23\0\1\u0278\26\0\13\u0241"+
    "\1\u024f\1\u0241\1\u021d\24\u0241\15\u0242\1\u021d\1\u0250\23\u0242"+
    "\24\u0243\1\u0251\2\u0243\1\u0279\12\u0243\1\0\1\u027a\21\0"+
    "\1\u027a\21\0\1\u01a2\10\0\1\u027b\41\0\1\u027c\57\0"+
    "\1\u027d\7\0\13\u0237\1\u027e\10\u0237\1\u0246\15\u0237\13\u0247"+
    "\1\u027f\15\u0247\1\u0255\10\u0247\31\u0263\1\u0272\1\u0280\7\u0263"+
    "\14\0\1\u0178\25\0\31\u023e\1\u024c\2\u023e\1\u0281\5\u023e"+
    "\3\0\1\u01b6\10\0\1\u0282\41\0\1\u0283\57\0\1\u0284"+
    "\43\0\1\u0285\5\0\13\u0243\1\u0286\10\u0243\1\u0251\15\u0243"+
    "\1\0\1\u027a\10\0\1\u0287\10\0\1\u027a\21\0\1\u0288"+
    "\2\0\1\u0288\36\0\1\u0289\2\0\1\u0289\1\u028a\65\0"+
    "\1\u028b\6\0\3\u0237\1\u028c\20\u0237\1\u0246\15\u0237\31\u0247"+
    "\1\u0255\2\u0247\1\u028d\5\u0247\31\u0263\1\u0272\1\u0263\1\u028e"+
    "\6\u0263\31\u023e\1\u024c\3\u023e\1\u028f\4\u023e\3\0\1\u0290"+
    "\2\0\1\u0290\36\0\1\u0291\2\0\1\u0291\1\u0292\65\0"+
    "\1\u0293\6\0\31\u0285\1\u0294\10\u0285\3\u0243\1\u0295\20\u0243"+
    "\1\u0251\15\u0243\13\0\1\u0296\2\0\1\u019c\23\0\13\u0288"+
    "\1\u0297\26\u0288\16\u0289\1\u0298\23\u0289\1\0\1\u0299\21\0"+
    "\1\u0299\31\0\1\u029a\26\0\4\u0237\1\u029b\17\u0237\1\u0246"+
    "\15\u0237\31\u0247\1\u0255\3\u0247\1\u029c\4\u0247\13\u0263\1\u029d"+
    "\15\u0263\1\u0272\10\u0263\13\u0290\1\u029e\26\u0290\16\u0291\1\u029f"+
    "\23\u0291\1\0\1\u02a0\21\0\1\u02a0\31\0\1\u02a1\26\0"+
    "\31\u0285\1\u0294\1\u02a2\7\u0285\4\u0243\1\u02a3\17\u0243\1\u0251"+
    "\15\u0243\14\0\1\u01b7\25\0\13\u0288\1\u0297\1\u02a4\25\u0288"+
    "\14\u0289\1\u02a5\1\u0289\1\u0298\23\u0289\1\0\1\u0299\10\0"+
    "\1\u02a6\10\0\1\u0299\52\0\1\u02a7\5\0\14\u0237\1\u02a8"+
    "\7\u0237\1\u0246\15\u0237\31\u0263\1\u0272\2\u0263\1\u02a9\5\u0263"+
    "\13\u0290\1\u029e\1\u02aa\25\u0290\14\u0291\1\u02ab\1\u0291\1\u029f"+
    "\23\u0291\1\0\1\u02a0\10\0\1\u02ac\10\0\1\u02a0\52\0"+
    "\1\u02ad\5\0\31\u0285\1\u0294\1\u0285\1\u02ae\6\u0285\14\u0243"+
    "\1\u02af\7\u0243\1\u0251\15\u0243\13\u0288\1\u0297\1\u0288\1\u02b0"+
    "\24\u0288\15\u0289\1\u02b0\1\u0298\23\u0289\13\0\1\u02b1\2\0"+
    "\1\u02b2\23\0\31\u02a7\1\u02b3\10\u02a7\15\u0237\1\u0245\6\u0237"+
    "\1\u0246\15\u0237\31\u0263\1\u0272\3\u0263\1\u02b4\4\u0263\13\u0290"+
    "\1\u029e\1\u0290\1\u02b5\24\u0290\15\u0291\1\u02b5\1\u029f\23\u0291"+
    "\13\0\1\u02b6\2\0\1\u02b7\23\0\31\u02ad\1\u02b8\10\u02ad"+
    "\13\u0285\1\u02b9\15\u0285\1\u0294\10\u0285\15\u0243\1\u024d\6\u0243"+
    "\1\u0251\15\u0243\1\0\1\u02ba\21\0\1\u02ba\32\0\1\u02bb"+
    "\41\0\1\u02bc\25\0\31\u02a7\1\u02b3\1\u02bd\7\u02a7\1\0"+
    "\1\u02be\21\0\1\u02be\32\0\1\u02bf\41\0\1\u02c0\25\0"+
    "\31\u02ad\1\u02b8\1\u02c1\7\u02ad\31\u0285\1\u0294\2\u0285\1\u02c2"+
    "\5\u0285\1\0\1\u02ba\21\0\1\u02ba\4\0\1\u02c3\14\0"+
    "\1\u02c4\2\0\1\u02c4\36\0\1\u02c5\2\0\1\u02c5\33\0"+
    "\31\u02a7\1\u02b3\1\u02a7\1\u02c6\6\u02a7\1\0\1\u02be\21\0"+
    "\1\u02be\4\0\1\u02c7\14\0\1\u02c8\2\0\1\u02c8\36\0"+
    "\1\u02c9\2\0\1\u02c9\33\0\31\u02ad\1\u02b8\1\u02ad\1\u02ca"+
    "\6\u02ad\31\u0285\1\u0294\3\u0285\1\u02cb\4\u0285\31\0\1\u02cc"+
    "\10\0\13\u02c4\1\u02cd\26\u02c4\16\u02c5\1\u02ce\23\u02c5\13\u02a7"+
    "\1\u02cf\15\u02a7\1\u02b3\10\u02a7\31\0\1\u02d0\10\0\13\u02c8"+
    "\1\u02d1\26\u02c8\16\u02c9\1\u02d2\23\u02c9\13\u02ad\1\u02d3\15\u02ad"+
    "\1\u02b8\10\u02ad\32\0\1\u02d4\7\0\13\u02c4\1\u02cd\1\u02d5"+
    "\25\u02c4\14\u02c5\1\u02d6\1\u02c5\1\u02ce\23\u02c5\31\u02a7\1\u02b3"+
    "\2\u02a7\1\u02d7\5\u02a7\32\0\1\u02d8\7\0\13\u02c8\1\u02d1"+
    "\1\u02d9\25\u02c8\14\u02c9\1\u02da\1\u02c9\1\u02d2\23\u02c9\31\u02ad"+
    "\1\u02b8\2\u02ad\1\u02db\5\u02ad\33\0\1\u02dc\6\0\7\u02c4"+
    "\1\u02dd\3\u02c4\1\u02cd\26\u02c4\7\u02c5\1\u02de\6\u02c5\1\u02ce"+
    "\23\u02c5\31\u02a7\1\u02b3\3\u02a7\1\u02df\4\u02a7\33\0\1\u02e0"+
    "\6\0\7\u02c8\1\u02e1\3\u02c8\1\u02d1\26\u02c8\7\u02c9\1\u02e2"+
    "\6\u02c9\1\u02d2\23\u02c9\31\u02ad\1\u02b8\3\u02ad\1\u02e3\4\u02ad"+
    "\13\0\1\u02e4\26\0\13\u02c4\1\u02cd\1\u02c4\1\u02b0\24\u02c4"+
    "\15\u02c5\1\u02b0\1\u02ce\23\u02c5\1\0\1\u02e5\21\0\1\u02e5"+
    "\31\0\1\u02e6\26\0\13\u02c8\1\u02d1\1\u02c8\1\u02b5\24\u02c8"+
    "\15\u02c9\1\u02b5\1\u02d2\23\u02c9\1\0\1\u02e7\21\0\1\u02e7"+
    "\52\0\1\u02e8\6\0\1\u02e5\10\0\1\u02e9\10\0\1\u02e5"+
    "\52\0\1\u02ea\6\0\1\u02e7\10\0\1\u02eb\10\0\1\u02e7"+
    "\16\0\31\u02e8\1\u02ec\10\u02e8\13\0\1\u02ed\2\0\1\u026e"+
    "\23\0\31\u02ea\1\u02ee\10\u02ea\13\0\1\u02ef\2\0\1\u0276"+
    "\23\0\31\u02e8\1\u02ec\1\u02f0\7\u02e8\14\0\1\u027b\25\0"+
    "\31\u02ea\1\u02ee\1\u02f1\7\u02ea\14\0\1\u0282\25\0\31\u02e8"+
    "\1\u02ec\1\u02e8\1\u02f2\6\u02e8\31\u02ea\1\u02ee\1\u02ea\1\u02f3"+
    "\6\u02ea\13\u02e8\1\u02f4\15\u02e8\1\u02ec\10\u02e8\13\u02ea\1\u02f5"+
    "\15\u02ea\1\u02ee\10\u02ea\31\u02e8\1\u02ec\2\u02e8\1\u02f6\5\u02e8"+
    "\31\u02ea\1\u02ee\2\u02ea\1\u02f7\5\u02ea\31\u02e8\1\u02ec\3\u02e8"+
    "\1\u02f8\4\u02e8\31\u02ea\1\u02ee\3\u02ea\1\u02f9\4\u02ea";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\277\0\1\1\11\0\1\1"+
    "\4\0\1\1\301\0\1\1\17\0\1\1\72\0\1\1"+
    "\47\0\1\11\15\0\1\11\5\0\1\1\6\0\2\11"+
    "\151\0\1\11\14\0\1\11\23\0\1\1\3\0\1\11"+
    "\1\1\25\0\1\11\54\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[761];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String Obj1Open=" {*OBJ< ";
  String Obj1Close=" *OBJ<} ";
  String Obj2Open=" {*OBJ> ";
  String Obj2Close=" *OBJ>} ";  
  
  int theIndex=0;
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  
    


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Func_OBJ(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Func_OBJ(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { /* Is there an AdvP after the Verb? */
			theIndex = StringSearch.splitString2(yytext(), "VPi]", "AdvP]");
			if (theIndex == -1)
			{
				/* Is there a PP after the Verb? */
				theIndex = StringSearch.splitString2(yytext(), "VPi]", "PP]");
				if (theIndex == -1)
					/* Find where the Verb Infinitive phrase ended and insert the OBJ label */
					StringSearch.splitString(yytext(),"VPi]", false, 4);		
			}
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
          }
        case 13: break;
        case 6: 
          { StringSearch.splitString(yytext(),"PP]", false, 3);		
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
          }
        case 14: break;
        case 3: 
          { StringSearch.splitString(yytext(),"VP]", false, 3);		
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
          }
        case 15: break;
        case 8: 
          { /* An AdvP might be part of the object itself! */
			/* Is there an AdvP after the Verb? */
			theIndex = StringSearch.splitString2(yytext(), "VP]", "AdvP]");
			if (theIndex == -1)
				StringSearch.splitString(yytext(),"AdvP]", false, 5);		
			
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
          }
        case 16: break;
        case 5: 
          { /* Find where the Verb Infinitive phrase ended and insert the OBJ label */
			StringSearch.splitString(yytext(),"VPi]", false, 4);		
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
          }
        case 17: break;
        case 12: 
          { /* Is there an AdvP after the Subject? */
			theIndex = StringSearch.splitString2(yytext(), "*SUBJ<}", "AdvP]");
			if (theIndex == -1)
				/* Find where the Subj phrase ended and insert the OBJ label */
				StringSearch.splitString(yytext(),"*SUBJ<}", false, 7);		
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
          }
        case 18: break;
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
			out.write("\n");
          }
        case 19: break;
        case 1: 
          { out.write(yytext());
          }
        case 20: break;
        case 4: 
          { /* Find where the Verb Supine phrase ended and insert the OBJ label */
			StringSearch.splitString(yytext(),"VPs]", false, 4);		
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
          }
        case 21: break;
        case 9: 
          { /* Find where the Verb phrase started and insert the OBJ label */
			StringSearch.splitString(yytext(),"[VP", false, -1);		
			out.write(Obj2Open+StringSearch.firstString+Obj2Close+StringSearch.nextString);
          }
        case 22: break;
        case 11: 
          { /* An AdvP might be part of the object itself! */
			/* Is there an AdvP after the Verb? */
			theIndex = StringSearch.splitString2(yytext(), "VP]", "AdvP]");
			if (theIndex == -1)
			{
				/* Find where the AdvP phrase ended and insert the OBJ label */
				StringSearch.splitString(yytext(),"AdvP]", false, 5);		
			}
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
          }
        case 23: break;
        case 10: 
          { /* Find where the Subj phrase ended and insert the OBJ label */
			StringSearch.splitString(yytext(),"*SUBJ<}", false, 7);		
			out.write(StringSearch.firstString+Obj1Open+StringSearch.nextString+Obj1Close);
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Func_OBJ <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Func_OBJ scanner = null;
        try {
          scanner = new Func_OBJ( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
