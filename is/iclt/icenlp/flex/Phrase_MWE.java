/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:40 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */
 
/* This transducer groups multiword expressions  */

package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:40 from the specification file
 * <tt>Phrase_MWE.flex</tt>
 */
public class Phrase_MWE {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\71\1\0\1\1\1\0\22\0\1\1\13\0\1\0"+
    "\1\0\1\46\2\0\3\7\15\0\1\25\1\42\1\0\1\0\1\33"+
    "\1\50\1\0\1\52\1\0\1\55\1\0\1\56\1\32\1\26\1\62"+
    "\1\0\1\0\1\61\1\27\1\63\1\64\1\30\1\0\3\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\20\1\11\1\22\1\10\1\5"+
    "\1\3\1\15\1\47\1\31\1\43\1\40\1\21\1\14\1\6\1\4"+
    "\1\24\1\0\1\37\1\16\1\23\1\36\1\12\1\0\1\2\1\51"+
    "\107\0\1\41\24\0\1\70\3\0\1\65\2\0\1\66\1\67\2\0"+
    "\1\35\4\0\1\45\2\0\1\53\3\0\1\54\2\0\1\34\2\0"+
    "\1\44\2\0\1\17\3\0\1\57\2\0\1\60\1\13\uff01\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\35\1\1\2\u02af\0\1\3\35\0\1\3\1\0"+
    "\1\4\167\0\1\4\33\0\1\4\145\0\1\3\3\0"+
    "\1\4\16\0\1\4\35\0\1\4\13\0\1\5\2\0"+
    "\1\3\20\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1081];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\72\0\164"+
    "\0\256\0\350\0\u0122\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244"+
    "\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414"+
    "\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4"+
    "\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24"+
    "\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
    "\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4"+
    "\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa\0\u1634"+
    "\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804"+
    "\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4"+
    "\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44"+
    "\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114"+
    "\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4"+
    "\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684"+
    "\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854"+
    "\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94"+
    "\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164"+
    "\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334"+
    "\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504"+
    "\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u369a\0\u36d4"+
    "\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6\0\u3830\0\u386a\0\u38a4"+
    "\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6\0\u3a00\0\u3a3a\0\u3a74"+
    "\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96\0\u3bd0\0\u3c0a\0\u3c44"+
    "\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\u3e14"+
    "\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36\0\u3f70\0\u3faa\0\u3fe4"+
    "\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106\0\u4140\0\u417a\0\u41b4"+
    "\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384"+
    "\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6\0\u44e0\0\u451a\0\u4554"+
    "\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676\0\u46b0\0\u46ea\0\u4724"+
    "\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880\0\u48ba\0\u48f4"+
    "\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16\0\u4a50\0\u4a8a\0\u4ac4"+
    "\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u4be6\0\u4c20\0\u4c5a\0\u4c94"+
    "\0\u4cce\0\u4d08\0\u4d42\0\u4d7c\0\u4db6\0\u4df0\0\u4e2a\0\u4e64"+
    "\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86\0\u4fc0\0\u4ffa\0\u5034"+
    "\0\u506e\0\u50a8\0\u50e2\0\u511c\0\u5156\0\u5190\0\u51ca\0\u5204"+
    "\0\u523e\0\u5278\0\u52b2\0\u52ec\0\u5326\0\u5360\0\u539a\0\u53d4"+
    "\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6\0\u5530\0\u556a\0\u55a4"+
    "\0\u55de\0\u5618\0\u5652\0\u568c\0\u56c6\0\u5700\0\u573a\0\u5774"+
    "\0\u57ae\0\u57e8\0\u5822\0\u585c\0\u5896\0\u58d0\0\u590a\0\u5944"+
    "\0\u597e\0\u59b8\0\u59f2\0\u5a2c\0\u5a66\0\u5aa0\0\u5ada\0\u5b14"+
    "\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36\0\u5c70\0\u5caa\0\u5ce4"+
    "\0\u5d1e\0\u5d58\0\u5d92\0\u5dcc\0\u5e06\0\u5e40\0\u5e7a\0\u5eb4"+
    "\0\u5eee\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6\0\u6010\0\u604a\0\u6084"+
    "\0\u60be\0\u60f8\0\u6132\0\u616c\0\u61a6\0\u61e0\0\u621a\0\u6254"+
    "\0\u628e\0\u62c8\0\u6302\0\u633c\0\u6376\0\u63b0\0\u63ea\0\u6424"+
    "\0\u645e\0\u6498\0\u64d2\0\u650c\0\u6546\0\u6580\0\u65ba\0\u65f4"+
    "\0\u662e\0\u6668\0\u66a2\0\u66dc\0\u6716\0\u6750\0\u678a\0\u67c4"+
    "\0\u67fe\0\u6838\0\u6872\0\u68ac\0\u68e6\0\u6920\0\u695a\0\u6994"+
    "\0\u69ce\0\u6a08\0\u6a42\0\u6a7c\0\u6ab6\0\u6af0\0\u6b2a\0\u6b64"+
    "\0\u6b9e\0\u6bd8\0\u6c12\0\u6c4c\0\u6c86\0\u6cc0\0\u6cfa\0\u6d34"+
    "\0\u6d6e\0\u6da8\0\u6de2\0\u6e1c\0\u6e56\0\u6e90\0\u6eca\0\u6f04"+
    "\0\u6f3e\0\u6f78\0\u6fb2\0\u6fec\0\u7026\0\u7060\0\u709a\0\u70d4"+
    "\0\u710e\0\u7148\0\u7182\0\u71bc\0\u71f6\0\u7230\0\u726a\0\u72a4"+
    "\0\u72de\0\u7318\0\u7352\0\u738c\0\u73c6\0\u7400\0\u743a\0\u7474"+
    "\0\u74ae\0\u74e8\0\u7522\0\u755c\0\u7596\0\u75d0\0\u760a\0\u7644"+
    "\0\u767e\0\u76b8\0\u76f2\0\u772c\0\u7766\0\u77a0\0\u77da\0\u7814"+
    "\0\u784e\0\u7888\0\u78c2\0\u78fc\0\u7936\0\u7970\0\u79aa\0\u79e4"+
    "\0\u7a1e\0\u7a58\0\u7a92\0\u7acc\0\u7b06\0\u7b40\0\u7b7a\0\u7bb4"+
    "\0\u7bee\0\u7c28\0\u7c62\0\u7c9c\0\u7cd6\0\u7d10\0\u7d4a\0\u7d84"+
    "\0\u7dbe\0\u7df8\0\u7e32\0\u7e6c\0\u7ea6\0\u7ee0\0\u7f1a\0\u7f54"+
    "\0\u7f8e\0\u7fc8\0\u8002\0\u803c\0\u8076\0\u80b0\0\u80ea\0\u8124"+
    "\0\u815e\0\u8198\0\u81d2\0\u820c\0\u8246\0\u8280\0\u82ba\0\u82f4"+
    "\0\u832e\0\u8368\0\u83a2\0\u83dc\0\u8416\0\u8450\0\u848a\0\u84c4"+
    "\0\u84fe\0\u8538\0\u8572\0\u85ac\0\u85e6\0\u8620\0\u865a\0\u8694"+
    "\0\u86ce\0\u8708\0\u8742\0\u877c\0\u87b6\0\u87f0\0\u882a\0\u8864"+
    "\0\u889e\0\u88d8\0\u8912\0\u894c\0\u8986\0\u89c0\0\u89fa\0\u8a34"+
    "\0\u8a6e\0\u8aa8\0\u8ae2\0\u8b1c\0\u8b56\0\u8b90\0\u8bca\0\u8c04"+
    "\0\u8c3e\0\u8c78\0\u8cb2\0\u8cec\0\u8d26\0\u8d60\0\u8d9a\0\u8dd4"+
    "\0\u8e0e\0\u8e48\0\u8e82\0\u8ebc\0\u8ef6\0\u8f30\0\u8f6a\0\u8fa4"+
    "\0\u8fde\0\u9018\0\u9052\0\u908c\0\u90c6\0\u9100\0\u913a\0\u9174"+
    "\0\u91ae\0\u91e8\0\u9222\0\u925c\0\u9296\0\u92d0\0\u930a\0\u9344"+
    "\0\u937e\0\u93b8\0\u93f2\0\u942c\0\u9466\0\u94a0\0\u94da\0\u9514"+
    "\0\u954e\0\u9588\0\u95c2\0\u95fc\0\u9636\0\u9670\0\u96aa\0\u96e4"+
    "\0\u971e\0\u9758\0\u9792\0\u97cc\0\u9806\0\u9840\0\u987a\0\u98b4"+
    "\0\u98ee\0\u9928\0\u9962\0\u999c\0\u99d6\0\u9a10\0\u9a4a\0\u9a84"+
    "\0\u9abe\0\u9af8\0\u9b32\0\u9b6c\0\u9ba6\0\u9be0\0\u9c1a\0\u9c1a"+
    "\0\u9c54\0\u9c8e\0\u9cc8\0\u9d02\0\u9d3c\0\u9d76\0\u9db0\0\u9dea"+
    "\0\u9e24\0\u9e5e\0\u9e98\0\u9ed2\0\u9f0c\0\u9f46\0\u9f80\0\u9fba"+
    "\0\u9ff4\0\ua02e\0\ua068\0\ua0a2\0\ua0dc\0\ua116\0\ua150\0\ua18a"+
    "\0\ua1c4\0\ua1fe\0\ua238\0\ua272\0\ua2ac\0\ua2e6\0\ua320\0\ua320"+
    "\0\ua35a\0\ua394\0\ua3ce\0\ua408\0\ua442\0\ua47c\0\ua4b6\0\ua4f0"+
    "\0\ua52a\0\ua564\0\ua59e\0\ua5d8\0\ua612\0\ua64c\0\ua686\0\ua6c0"+
    "\0\ua6fa\0\ua734\0\ua76e\0\ua7a8\0\ua7e2\0\ua81c\0\ua856\0\ua890"+
    "\0\ua8ca\0\ua904\0\ua93e\0\ua978\0\ua9b2\0\ua9ec\0\uaa26\0\uaa60"+
    "\0\uaa9a\0\uaad4\0\uab0e\0\uab48\0\uab82\0\uabbc\0\uabf6\0\uac30"+
    "\0\uac6a\0\uaca4\0\uacde\0\uad18\0\uad52\0\uad8c\0\uadc6\0\uae00"+
    "\0\uae3a\0\uae74\0\uaeae\0\uaee8\0\uaf22\0\uaf5c\0\uaf96\0\uafd0"+
    "\0\ub00a\0\ub044\0\ub07e\0\ub0b8\0\ua2ac\0\ub0f2\0\ub12c\0\ub166"+
    "\0\ub1a0\0\ub1da\0\ub214\0\ub24e\0\ub288\0\ub2c2\0\ub2fc\0\ub336"+
    "\0\ub370\0\ub3aa\0\ub3e4\0\ub41e\0\ub458\0\ub492\0\ub4cc\0\ub506"+
    "\0\ub540\0\ub57a\0\ub5b4\0\ub5ee\0\ub628\0\ub662\0\ub69c\0\ub6d6"+
    "\0\ub710\0\ub74a\0\ub784\0\ub7be\0\ub7f8\0\ub832\0\ub86c\0\ub8a6"+
    "\0\ub8e0\0\ub91a\0\ub954\0\ub98e\0\ub9c8\0\uba02\0\uba3c\0\uba76"+
    "\0\ubab0\0\ubaea\0\ubb24\0\ubb5e\0\ubb98\0\ubbd2\0\ubc0c\0\ubc46"+
    "\0\ubc80\0\ubcba\0\ubcf4\0\ubd2e\0\ubd68\0\ubda2\0\ubddc\0\ube16"+
    "\0\ube50\0\ube8a\0\ubec4\0\ubefe\0\ubf38\0\ubf72\0\ubfac\0\ubfe6"+
    "\0\uc020\0\uc05a\0\uc094\0\uc0ce\0\uc108\0\uc142\0\uc17c\0\uc1b6"+
    "\0\uc1f0\0\uc22a\0\uc264\0\uc29e\0\uc2d8\0\uc312\0\uc34c\0\uc386"+
    "\0\uc3c0\0\uc3fa\0\uc434\0\uc46e\0\uc4a8\0\uc4e2\0\uc51c\0\uc556"+
    "\0\uc590\0\uc5ca\0\uc604\0\uc63e\0\uc678\0\uc6b2\0\uc6ec\0\uc726"+
    "\0\uc760\0\uc79a\0\uc7d4\0\uc80e\0\uc848\0\uc882\0\uc8bc\0\uc8f6"+
    "\0\uc930\0\uc96a\0\uc9a4\0\uc9de\0\uca18\0\uca52\0\uca8c\0\ucac6"+
    "\0\ucb00\0\ucb3a\0\ucb74\0\ucbae\0\ucbe8\0\ucc22\0\ucc5c\0\ucc96"+
    "\0\uccd0\0\ucd0a\0\ucd44\0\ucd7e\0\ucdb8\0\ucdf2\0\uce2c\0\uce66"+
    "\0\ucea0\0\uceda\0\ucf14\0\ucf4e\0\ucf88\0\ucfc2\0\ucffc\0\ud036"+
    "\0\ud070\0\ud0aa\0\ud0e4\0\ud11e\0\ud158\0\ud192\0\ud1cc\0\ud206"+
    "\0\ud240\0\ud27a\0\ud2b4\0\ud2ee\0\ud328\0\ud362\0\ud39c\0\ud3d6"+
    "\0\ud410\0\ud44a\0\ud484\0\ud4be\0\ud4f8\0\ud532\0\ud56c\0\ud5a6"+
    "\0\ud5e0\0\ud61a\0\ud654\0\ud68e\0\ud6c8\0\ud702\0\ud73c\0\ud776"+
    "\0\ud7b0\0\ud7ea\0\ud824\0\ud85e\0\ud898\0\ud8d2\0\ud90c\0\ud946"+
    "\0\ud980\0\ud9ba\0\ud9f4\0\uda2e\0\uda68\0\udaa2\0\udadc\0\udb16"+
    "\0\udb50\0\udb8a\0\udbc4\0\udbfe\0\udc38\0\udc72\0\udcac\0\udce6"+
    "\0\udd20\0\udd5a\0\udd94\0\uddce\0\ude08\0\ude42\0\ude7c\0\udeb6"+
    "\0\udef0\0\udf2a\0\udf64\0\72\0\udf9e\0\udfd8\0\ue012\0\ue04c"+
    "\0\ue086\0\udb50\0\ue0c0\0\ue0fa\0\ue134\0\ue16e\0\ue1a8\0\ue1e2"+
    "\0\ue21c\0\ue256\0\ue290\0\ue2ca\0\ue304\0\ue33e\0\ue378\0\ue3b2"+
    "\0\ue3ec\0\ue426\0\ue460\0\ue49a\0\ue4d4\0\ue50e\0\ue548\0\ue582"+
    "\0\ue5bc\0\u45c8\0\ue5f6\0\ue630\0\ue66a\0\ue6a4\0\ue6de\0\ue718"+
    "\0\ue752\0\ue78c\0\ue7c6\0\ue800\0\ue83a\0\ue874\0\ue874\0\ue8ae"+
    "\0\72\0\ue8e8\0\ue922\0\ue95c\0\ue996\0\ue9d0\0\uea0a\0\uea44"+
    "\0\uea7e\0\ueab8\0\ueaf2\0\ueb2c\0\ueb66\0\ueba0\0\uebda\0\uec14"+
    "\0\uec4e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1081];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\2\2"+
    "\1\10\1\11\1\12\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\2\1\20\1\2\1\21\1\7\1\22\1\23"+
    "\1\2\1\13\1\24\1\2\1\25\1\26\1\27\1\2"+
    "\1\30\1\10\1\31\3\2\1\32\1\4\1\2\1\33"+
    "\2\2\1\31\1\17\1\34\1\35\1\27\1\5\1\20"+
    "\1\26\1\34\1\35\1\36\1\15\1\37\73\0\1\40"+
    "\1\0\1\41\1\42\1\43\1\44\2\0\1\45\1\46"+
    "\1\47\1\50\1\0\1\51\1\52\1\53\1\54\1\0"+
    "\1\55\1\0\1\56\1\44\1\57\1\60\1\0\1\50"+
    "\1\61\1\0\1\62\1\63\1\64\1\0\1\65\1\45"+
    "\1\66\3\0\1\67\1\41\1\0\1\70\2\0\1\66"+
    "\1\54\1\71\1\72\1\64\1\42\1\55\1\63\1\71"+
    "\1\72\1\73\1\52\6\0\1\74\31\0\1\75\11\0"+
    "\1\76\35\0\1\77\57\0\1\100\2\0\1\101\22\0"+
    "\1\102\2\0\1\103\3\0\1\104\35\0\1\105\1\106"+
    "\71\0\1\107\13\0\1\110\13\0\1\111\41\0\1\112"+
    "\23\0\1\113\45\0\1\114\4\0\1\115\5\0\1\116"+
    "\16\0\1\117\4\0\1\120\7\0\1\121\22\0\1\122"+
    "\12\0\1\123\33\0\1\121\22\0\1\124\4\0\1\125"+
    "\1\0\1\126\3\0\1\127\33\0\1\130\20\0\1\131"+
    "\30\0\1\132\40\0\1\133\2\0\1\134\12\0\1\135"+
    "\12\0\1\136\1\0\1\137\107\0\1\140\27\0\1\117"+
    "\16\0\1\141\14\0\1\142\26\0\1\133\2\0\1\134"+
    "\12\0\1\135\12\0\1\136\42\0\1\124\6\0\1\126"+
    "\3\0\1\127\33\0\1\121\46\0\1\113\43\0\1\143"+
    "\2\0\1\144\22\0\1\145\2\0\1\103\3\0\1\104"+
    "\32\0\1\146\4\0\1\147\25\0\1\150\51\0\1\151"+
    "\130\0\1\152\24\0\1\147\103\0\1\153\63\0\1\154"+
    "\16\0\1\155\13\0\1\156\5\0\1\157\30\0\1\160"+
    "\16\0\1\155\13\0\1\156\5\0\1\157\55\0\1\161"+
    "\46\0\1\162\62\0\1\163\12\0\1\116\16\0\1\117"+
    "\4\0\1\120\7\0\1\121\54\0\1\164\52\0\1\165"+
    "\110\0\1\166\33\0\1\167\71\0\1\170\21\0\1\171"+
    "\54\0\1\172\1\0\1\173\4\0\1\174\62\0\1\175"+
    "\103\0\1\176\111\0\1\177\71\0\1\200\62\0\1\201"+
    "\55\0\1\202\111\0\1\203\70\0\1\204\52\0\1\205"+
    "\62\0\1\206\25\0\1\207\53\0\1\210\12\0\1\211"+
    "\114\0\1\212\54\0\1\213\37\0\1\214\65\0\1\215"+
    "\76\0\1\216\114\0\1\217\77\0\1\220\46\0\1\221"+
    "\61\0\1\222\122\0\1\223\50\0\1\224\63\0\1\216"+
    "\25\0\1\225\73\0\1\226\72\0\1\227\33\0\1\230"+
    "\21\0\1\231\54\0\1\232\75\0\1\233\6\0\1\234"+
    "\51\0\1\235\130\0\1\236\71\0\1\237\52\0\1\240"+
    "\51\0\1\241\71\0\1\170\100\0\1\173\4\0\1\174"+
    "\62\0\1\242\64\0\1\146\16\0\1\243\52\0\1\244"+
    "\126\0\1\245\34\0\1\246\113\0\1\247\51\0\1\250"+
    "\72\0\1\251\1\252\12\0\1\253\57\0\1\254\100\0"+
    "\1\255\21\0\1\256\71\0\1\257\36\0\1\260\1\252"+
    "\12\0\1\253\52\0\1\261\121\0\1\262\71\0\1\211"+
    "\46\0\1\263\77\0\1\264\73\0\1\265\54\0\1\167"+
    "\20\0\1\266\50\0\1\170\20\0\1\267\100\0\1\270"+
    "\41\0\1\271\110\0\1\272\71\0\1\273\15\0\1\274"+
    "\51\0\1\275\17\0\1\276\10\0\1\277\23\0\1\300"+
    "\121\0\1\301\100\0\1\302\37\0\1\303\100\0\1\304"+
    "\77\0\1\305\104\0\1\306\41\0\1\307\101\0\1\310"+
    "\54\0\1\311\106\0\1\312\67\0\1\216\56\0\1\313"+
    "\71\0\1\314\76\0\1\164\64\0\1\215\16\0\1\315"+
    "\52\0\1\316\127\0\1\317\47\0\1\263\55\0\1\320"+
    "\71\0\1\321\104\0\1\322\73\0\1\323\1\0\1\324"+
    "\2\0\1\325\104\0\1\326\50\0\1\327\112\0\1\330"+
    "\34\0\1\230\16\0\1\331\107\0\1\332\53\0\1\333"+
    "\56\0\1\334\102\0\1\335\4\0\1\336\47\0\1\235"+
    "\16\0\1\337\52\0\1\340\113\0\1\341\47\0\1\342"+
    "\71\0\1\241\16\0\1\343\67\0\1\275\30\0\1\277"+
    "\26\0\2\344\5\0\1\344\4\0\1\345\52\0\1\244"+
    "\16\0\1\346\110\0\1\347\33\0\1\246\16\0\1\350"+
    "\74\0\1\327\54\0\1\351\122\0\1\352\71\0\1\353"+
    "\71\0\1\354\50\0\1\355\17\0\1\306\72\0\1\356"+
    "\71\0\1\357\33\0\1\360\4\0\1\361\122\0\1\362"+
    "\33\0\1\261\16\0\1\363\67\0\1\303\71\0\1\364"+
    "\54\0\1\365\113\0\1\366\47\0\1\367\21\0\1\370"+
    "\47\0\1\371\21\0\1\372\105\0\1\373\33\0\1\271"+
    "\16\0\1\374\52\0\1\375\76\0\1\376\64\0\1\377"+
    "\71\0\1\u0100\71\0\1\u0101\102\0\1\u0102\60\0\1\300"+
    "\20\0\1\u0103\50\0\1\u0104\126\0\1\u0105\1\u0106\50\0"+
    "\1\323\116\0\1\u0107\51\0\1\u0108\47\0\1\316\12\0"+
    "\1\216\75\0\1\u0109\74\0\1\255\47\0\1\311\16\0"+
    "\1\u010a\52\0\1\u010b\71\0\1\313\1\0\1\u010c\14\0"+
    "\1\u010d\52\0\1\314\16\0\1\u010e\71\0\1\u010f\52\0"+
    "\1\316\1\0\1\u0110\106\0\1\u0111\52\0\1\320\20\0"+
    "\1\u0112\50\0\1\321\16\0\1\u0113\52\0\1\u0114\71\0"+
    "\1\u0115\71\0\1\u0116\71\0\1\u0117\127\0\1\u0118\70\0"+
    "\1\u0119\34\0\1\u011a\74\0\2\u011b\5\0\1\u011b\4\0"+
    "\1\u011c\110\0\1\u011d\71\0\1\u011e\47\0\1\u011f\55\0"+
    "\1\u0120\71\0\1\u0121\74\0\2\u0122\5\0\1\u0122\4\0"+
    "\1\u0123\52\0\1\340\16\0\1\u0124\52\0\1\u0125\71\0"+
    "\1\342\16\0\1\u0126\55\0\2\u0127\5\0\1\u0127\57\0"+
    "\1\u0128\3\0\1\u0129\6\0\1\u0129\56\0\1\u012a\3\0"+
    "\1\u012b\6\0\1\u012b\61\0\2\u012c\5\0\1\u012c\57\0"+
    "\1\u012d\74\0\2\u012e\5\0\1\u012e\70\0\1\u012f\10\0"+
    "\1\u0130\71\0\1\u0131\14\0\1\u0132\47\0\1\u0133\54\0"+
    "\1\u0134\71\0\1\u0135\110\0\1\u0119\71\0\1\u0136\52\0"+
    "\1\360\16\0\1\u0137\71\0\1\u0138\111\0\1\u0132\35\0"+
    "\2\u011b\5\0\1\u011b\57\0\1\u0139\71\0\1\365\16\0"+
    "\1\u013a\52\0\1\u013b\71\0\1\367\14\0\1\u013c\54\0"+
    "\1\367\71\0\1\371\21\0\1\u013d\37\0\1\u013d\7\0"+
    "\1\371\71\0\1\u013e\110\0\1\u013f\52\0\1\375\16\0"+
    "\1\u0140\52\0\1\u0141\71\0\1\377\1\0\1\u0142\67\0"+
    "\1\u0100\1\0\1\u0143\14\0\1\u0144\52\0\1\u0101\1\0"+
    "\1\u0145\73\0\1\u0146\65\0\1\u0147\21\0\1\u0148\47\0"+
    "\1\u0104\16\0\1\u0149\110\0\1\u014a\70\0\1\276\53\0"+
    "\1\216\52\0\1\u014b\71\0\1\u014c\110\0\1\u014d\52\0"+
    "\1\u010b\1\0\1\u014e\72\0\1\u014f\4\0\1\u014f\4\0"+
    "\1\u014f\1\0\1\u014f\3\0\1\u014f\65\0\1\u0150\71\0"+
    "\1\u0151\52\0\1\u0152\3\0\1\u0153\6\0\1\u0153\61\0"+
    "\1\u0154\4\0\1\u0154\4\0\1\u0154\1\0\1\u0154\3\0"+
    "\1\u0154\46\0\1\u0155\71\0\1\u0156\21\0\1\u0157\66\0"+
    "\1\u0158\52\0\1\u0114\16\0\1\u0159\52\0\1\u0115\1\0"+
    "\1\u0143\67\0\1\u0116\1\0\1\u015a\67\0\1\u0117\16\0"+
    "\1\u015b\52\0\1\u015c\71\0\1\u015d\71\0\1\u011a\1\0"+
    "\1\u015e\67\0\1\u015f\3\0\1\u0160\6\0\1\u0160\56\0"+
    "\1\u0161\3\0\1\u0162\6\0\1\u0162\56\0\1\u0163\106\0"+
    "\1\u0164\54\0\1\u0165\71\0\1\u0120\1\0\1\u0166\67\0"+
    "\1\u0121\1\0\1\u0167\67\0\1\u0168\3\0\1\u0169\6\0"+
    "\1\u0169\56\0\1\u016a\3\0\1\u016b\6\0\1\u016b\61\0"+
    "\2\u016c\5\0\1\u016c\57\0\1\u0125\16\0\1\u0144\55\0"+
    "\2\u0127\5\0\1\u0127\4\0\1\u016d\52\0\1\u016e\3\0"+
    "\1\u016f\6\0\1\u016f\56\0\1\u0128\45\0\1\u0170\2\0"+
    "\1\u0170\20\0\1\u0128\71\0\1\u012a\4\0\1\u0171\5\0"+
    "\1\u0172\1\0\1\u0173\54\0\1\u012a\71\0\1\u0174\3\0"+
    "\1\u0175\6\0\1\u0175\56\0\1\u012d\16\0\1\u0176\52\0"+
    "\1\u0177\3\0\1\u0178\6\0\1\u0178\62\0\1\u0179\65\0"+
    "\1\u017a\71\0\1\u017b\121\0\1\u017c\41\0\1\u017d\71\0"+
    "\1\u0134\16\0\1\u017e\52\0\1\u0135\1\0\1\u017f\67\0"+
    "\1\u0180\110\0\1\u0181\52\0\1\u0182\71\0\1\u0139\17\0"+
    "\1\u0183\70\0\1\u0184\52\0\1\u013b\16\0\1\u0185\63\0"+
    "\1\u0186\110\0\1\u0187\41\0\1\u013e\16\0\1\u0188\52\0"+
    "\1\u0189\3\0\1\u018a\6\0\1\u018a\75\0\1\u018b\52\0"+
    "\1\u0141\1\0\1\u018c\72\0\1\u018d\4\0\1\u018d\4\0"+
    "\1\u018d\1\0\1\u018d\3\0\1\u018d\51\0\1\u018e\4\0"+
    "\1\u018e\4\0\1\u018e\1\0\1\u018e\3\0\1\u018e\65\0"+
    "\1\u018f\55\0\1\u0190\4\0\1\u0190\4\0\1\u0190\1\0"+
    "\1\u0190\3\0\1\u0190\104\0\1\u0191\33\0\1\u0147\15\0"+
    "\1\u0192\50\0\1\u0192\2\0\1\u0147\110\0\1\u0193\57\0"+
    "\1\376\7\0\1\323\54\0\1\u014b\16\0\1\u0194\52\0"+
    "\1\u014c\16\0\1\u0195\52\0\1\u0196\3\0\1\u0197\6\0"+
    "\1\u0197\61\0\1\u0198\4\0\1\u0198\4\0\1\u0198\1\0"+
    "\1\u0198\3\0\1\u0198\47\0\1\u0199\4\0\1\u0199\2\0"+
    "\1\u0199\25\0\1\u0199\6\0\1\u0199\23\0\1\u019a\3\0"+
    "\1\u019b\6\0\1\u019b\56\0\1\u019c\3\0\1\u019d\6\0"+
    "\1\u019d\56\0\1\u0152\16\0\1\u019e\4\0\1\u019e\45\0"+
    "\1\u0152\72\0\1\u019f\4\0\1\u019f\2\0\1\u019f\25\0"+
    "\1\u019f\6\0\1\u019f\23\0\1\u0155\17\0\1\u01a0\51\0"+
    "\1\u0156\7\0\1\u01a1\4\0\1\u01a2\54\0\1\u0156\71\0"+
    "\1\u01a3\3\0\1\u01a4\6\0\1\u01a4\75\0\1\u01a5\55\0"+
    "\1\u01a6\4\0\1\u01a6\4\0\1\u01a6\1\0\1\u01a6\3\0"+
    "\1\u01a6\65\0\1\u01a7\52\0\1\u015c\16\0\1\u01a8\52\0"+
    "\1\u015d\17\0\1\u01a9\54\0\1\u01aa\4\0\1\u01aa\4\0"+
    "\1\u01aa\1\0\1\u01aa\3\0\1\u01aa\46\0\1\u015f\11\0"+
    "\1\u01ab\57\0\1\u015f\71\0\1\u0161\2\0\1\u01ac\55\0"+
    "\1\u01ac\10\0\1\u0161\71\0\1\u0163\16\0\1\u01ad\52\0"+
    "\1\u01ae\71\0\1\u0165\16\0\1\u01af\55\0\1\u01b0\4\0"+
    "\1\u01b0\4\0\1\u01b0\1\0\1\u01b0\3\0\1\u01b0\51\0"+
    "\1\u01b1\4\0\1\u01b1\4\0\1\u01b1\1\0\1\u01b1\3\0"+
    "\1\u01b1\46\0\1\u0168\4\0\1\u01b2\3\0\1\u01b3\1\0"+
    "\1\u01b4\1\0\1\u01b5\1\u01b6\6\0\1\u01b7\41\0\1\u01b6"+
    "\2\0\1\u0168\71\0\1\u016a\16\0\1\u01b8\52\0\1\u016a"+
    "\71\0\1\u01b9\3\0\1\u01ba\6\0\1\u01ba\56\0\1\u01bb"+
    "\3\0\1\u01bc\6\0\1\u01bc\56\0\1\u016e\6\0\1\u01bd"+
    "\2\0\1\u01be\4\0\1\u01bf\4\0\1\u01bf\45\0\1\u016e"+
    "\121\0\1\u01c0\120\0\1\u01c1\16\0\1\u01c2\107\0\1\u01c3"+
    "\47\0\1\u0174\11\0\1\u01be\57\0\1\u0174\110\0\1\u01c4"+
    "\52\0\1\u0177\11\0\1\u01c5\5\0\1\u01c6\51\0\1\u0177"+
    "\111\0\1\272\51\0\1\u017a\16\0\1\u01c7\52\0\1\u017b"+
    "\1\0\1\u01c8\16\0\1\u01c9\50\0\1\u01ca\71\0\1\u017d"+
    "\1\0\1\u01cb\106\0\1\u01cc\55\0\1\u01cd\4\0\1\u01cd"+
    "\4\0\1\u01cd\1\0\1\u01cd\3\0\1\u01cd\46\0\1\u0180"+
    "\16\0\1\u01ce\52\0\1\u01cf\3\0\1\u01d0\6\0\1\u01d0"+
    "\56\0\1\u0182\16\0\1\u01d1\53\0\1\u01d2\7\0\1\u01d2"+
    "\25\0\1\u01d2\6\0\1\u01d2\23\0\1\u01d3\3\0\1\u01d4"+
    "\6\0\1\u01d4\75\0\1\u01d5\55\0\1\u01d6\106\0\1\u01d7"+
    "\54\0\2\u010f\5\0\1\u010f\57\0\1\u0189\3\0\1\u01d8"+
    "\65\0\1\u0189\71\0\1\u01d9\3\0\1\u01da\6\0\1\u01da"+
    "\61\0\1\u01db\4\0\1\u01db\4\0\1\u01db\1\0\1\u01db"+
    "\3\0\1\u01db\47\0\1\u01dc\4\0\1\u01dc\2\0\1\u01dc"+
    "\25\0\1\u01dc\6\0\1\u01dc\24\0\1\u01dd\4\0\1\u01dd"+
    "\2\0\1\u01dd\25\0\1\u01dd\6\0\1\u01dd\23\0\1\u01de"+
    "\3\0\1\u01df\6\0\1\u01df\57\0\1\u01e0\4\0\1\u01e0"+
    "\2\0\1\u01e0\25\0\1\u01e0\6\0\1\u01e0\30\0\1\376"+
    "\7\0\1\335\74\0\1\u01e1\51\0\1\u01e2\3\0\1\u01e3"+
    "\6\0\1\u01e3\75\0\1\u01e4\55\0\2\u01e5\5\0\1\u01e5"+
    "\57\0\1\u0196\2\0\1\u01e6\55\0\1\u01e6\10\0\1\u0196"+
    "\72\0\1\u01e7\4\0\1\u01e7\2\0\1\u01e7\25\0\1\u01e7"+
    "\6\0\1\u01e7\25\0\1\u01e8\1\0\1\u01e8\65\0\1\u019a"+
    "\16\0\1\u01e9\4\0\1\u019e\45\0\1\u019a\71\0\1\u019c"+
    "\14\0\1\u01ea\1\0\1\u01eb\2\0\1\u01ec\1\0\1\u01eb"+
    "\1\0\1\u01ea\5\0\1\u01ed\25\0\1\u01ec\7\0\1\u019c"+
    "\124\0\1\u01ee\40\0\1\u01ef\1\0\1\u01ef\66\0\1\u01f0"+
    "\7\0\1\u01f0\25\0\1\u01f0\6\0\1\u01f0\27\0\1\u01f1"+
    "\104\0\1\u01f2\52\0\1\u01a3\2\0\1\u01f3\7\0\1\u01f4"+
    "\1\0\1\u01ea\1\0\1\u019e\4\0\1\u019e\1\0\1\u01ea"+
    "\32\0\1\u01f3\10\0\1\u01a3\71\0\1\u01f5\3\0\1\u01f6"+
    "\6\0\1\u01f6\57\0\1\u01f7\4\0\1\u01f7\2\0\1\u01f7"+
    "\25\0\1\u01f7\6\0\1\u01f7\23\0\1\u01f8\3\0\1\u01f9"+
    "\6\0\1\u01f9\75\0\1\u01fa\53\0\1\u01fb\7\0\1\u01fb"+
    "\25\0\1\u01fb\6\0\1\u01fb\24\0\1\u01fc\4\0\1\u01fc"+
    "\2\0\1\u01fc\25\0\1\u01fc\6\0\1\u01fc\34\0\1\u01fd"+
    "\74\0\1\u01fe\74\0\1\u01ff\52\0\1\u01ae\1\0\1\u0200"+
    "\106\0\1\u0201\53\0\1\u0202\4\0\1\u0202\2\0\1\u0202"+
    "\25\0\1\u0202\6\0\1\u0202\24\0\1\u0203\4\0\1\u0203"+
    "\2\0\1\u0203\25\0\1\u0203\6\0\1\u0203\26\0\1\u0204"+
    "\53\0\1\u0205\65\0\1\u0206\46\0\1\u0207\103\0\1\u0208"+
    "\62\0\1\u0209\41\0\1\u0204\123\0\1\u020a\34\0\1\u01b9"+
    "\11\0\1\u020b\57\0\1\u01b9\71\0\1\u01bb\2\0\1\u020c"+
    "\55\0\1\u020c\10\0\1\u01bb\135\0\1\u020d\1\u020e\30\0"+
    "\1\u020f\120\0\1\u0210\43\0\1\u0211\64\0\1\u0212\124\0"+
    "\1\u0213\73\0\1\u0214\34\0\1\u0215\3\0\1\u0216\6\0"+
    "\1\u0216\75\0\1\u0217\56\0\1\u0218\104\0\1\u0219\55\0"+
    "\1\u021a\4\0\1\u021a\4\0\1\u021a\1\0\1\u021a\3\0"+
    "\1\u021a\46\0\1\u021b\21\0\1\u021c\47\0\1\u01ca\20\0"+
    "\1\u021d\53\0\1\u021e\4\0\1\u021e\4\0\1\u021e\1\0"+
    "\1\u021e\3\0\1\u021e\46\0\1\u021f\3\0\1\u0220\6\0"+
    "\1\u0220\57\0\1\u0221\4\0\1\u0221\2\0\1\u0221\25\0"+
    "\1\u0221\6\0\1\u0221\42\0\1\u0222\52\0\1\u01cf\2\0"+
    "\1\u0223\55\0\1\u0223\10\0\1\u01cf\110\0\1\u0224\54\0"+
    "\1\u0225\1\0\1\u0225\65\0\1\u01d3\2\0\1\u0226\55\0"+
    "\1\u0226\10\0\1\u01d3\71\0\1\u0227\3\0\1\u0228\6\0"+
    "\1\u0228\56\0\1\u0229\71\0\1\u022a\121\0\1\u022b\41\0"+
    "\1\u01d9\11\0\1\u022c\53\0\1\u022c\3\0\1\u01d9\72\0"+
    "\1\u022d\4\0\1\u022d\2\0\1\u022d\25\0\1\u022d\6\0"+
    "\1\u022d\25\0\1\u022e\1\0\1\u022e\67\0\1\u022f\1\0"+
    "\1\u022f\65\0\1\u01de\2\0\1\u0230\55\0\1\u0230\10\0"+
    "\1\u01de\73\0\1\u0231\1\0\1\u0231\105\0\1\u0232\51\0"+
    "\1\u01e2\14\0\1\u0233\54\0\1\u01e2\71\0\1\u0234\3\0"+
    "\1\u0235\6\0\1\u0235\56\0\1\u0236\3\0\1\u0237\6\0"+
    "\1\u0237\72\0\1\u0238\57\0\1\u0239\1\0\1\u0239\70\0"+
    "\3\u0152\4\0\1\u0152\112\0\1\u023a\42\0\1\u023b\120\0"+
    "\1\u023c\66\0\1\u023d\41\0\1\u023e\71\0\1\u023f\74\0"+
    "\3\u0240\4\0\1\u0240\61\0\1\u0241\1\0\1\u0241\107\0"+
    "\1\u0242\63\0\1\u0243\71\0\1\u0244\105\0\1\u0245\41\0"+
    "\1\u01f5\14\0\1\u0246\54\0\1\u01f5\73\0\1\u0247\1\0"+
    "\1\u0247\65\0\1\u01f8\14\0\1\u0248\10\0\1\u0248\43\0"+
    "\1\u01f8\71\0\1\u0249\3\0\1\u024a\6\0\1\u024a\60\0"+
    "\1\u024b\1\0\1\u024b\67\0\1\u024c\1\0\1\u024c\140\0"+
    "\1\u024d\16\0\1\u024e\71\0\1\u024f\3\0\1\u0250\6\0"+
    "\1\u0250\61\0\1\u0251\4\0\1\u0251\4\0\1\u0251\1\0"+
    "\1\u0251\3\0\1\u0251\46\0\1\u0252\3\0\1\u0253\6\0"+
    "\1\u0253\60\0\1\u0254\1\0\1\u0254\67\0\1\u0255\1\0"+
    "\1\u0255\124\0\1\u0256\74\0\1\u0257\44\0\1\u0257\61\0"+
    "\1\u0258\120\0\1\u0259\73\0\1\u025a\72\0\1\u025b\36\0"+
    "\1\u025c\101\0\1\u025d\70\0\1\u025e\56\0\1\u025f\106\0"+
    "\1\u0260\54\0\1\u0261\76\0\1\u0262\64\0\1\u0212\16\0"+
    "\1\u0263\71\0\1\u0264\57\0\1\u0265\64\0\1\u0215\1\0"+
    "\1\u0266\1\0\1\u0264\42\0\1\u0266\22\0\1\u0215\124\0"+
    "\1\u0267\66\0\1\u0268\41\0\1\u0269\3\0\1\u026a\6\0"+
    "\1\u026a\57\0\1\u026b\4\0\1\u026b\2\0\1\u026b\25\0"+
    "\1\u026b\6\0\1\u026b\23\0\1\u021b\3\0\1\u026c\10\0"+
    "\1\u026d\10\0\1\u026d\43\0\1\u021b\71\0\1\u026e\21\0"+
    "\1\u026f\50\0\1\u0270\4\0\1\u0270\2\0\1\u0270\25\0"+
    "\1\u0270\6\0\1\u0270\23\0\1\u021f\14\0\1\u0271\10\0"+
    "\1\u0271\43\0\1\u021f\73\0\1\u0272\1\0\1\u0272\65\0"+
    "\1\u0273\3\0\1\u0274\6\0\1\u0274\72\0\1\u0275\55\0"+
    "\1\u0240\3\0\1\u0276\6\0\1\u0276\61\0\3\u0277\4\0"+
    "\1\u0277\73\0\1\u0278\55\0\1\u0227\2\0\1\u0279\55\0"+
    "\1\u0279\10\0\1\u0227\71\0\1\u0229\16\0\1\u027a\52\0"+
    "\1\u022a\16\0\1\u027b\57\0\1\u0106\127\0\1\u027c\30\0"+
    "\1\u027d\1\0\1\u027d\70\0\3\u027e\4\0\1\u027e\62\0"+
    "\3\u027f\4\0\1\u027f\73\0\1\u01ee\60\0\3\u0280\4\0"+
    "\1\u0280\114\0\1\u0281\107\0\1\u0282\16\0\1\u0234\33\0"+
    "\1\u0283\35\0\1\u0234\71\0\1\u0236\11\0\1\u0284\57\0"+
    "\1\u0236\71\0\1\u0285\74\0\3\u0286\4\0\1\u0286\57\0"+
    "\1\u023f\3\0\1\u0287\100\0\1\u01ee\56\0\1\u0288\111\0"+
    "\1\u0289\51\0\1\u023e\16\0\1\u028a\52\0\1\u023f\20\0"+
    "\1\u028b\50\0\1\u0240\12\0\1\u028c\61\0\3\u028d\4\0"+
    "\1\u028d\114\0\1\u028e\56\0\1\u028f\47\0\1\u0290\130\0"+
    "\1\u0291\51\0\1\u0292\55\0\3\u0293\4\0\1\u0293\63\0"+
    "\1\u0294\65\0\1\u0249\3\0\1\u0295\65\0\1\u0249\74\0"+
    "\3\u0296\4\0\1\u0296\62\0\3\u0297\4\0\1\u0297\57\0"+
    "\1\u0298\71\0\1\u024e\20\0\1\u0299\50\0\1\u024f\2\0"+
    "\1\u0226\30\0\1\u029a\24\0\1\u0226\10\0\1\u024f\72\0"+
    "\1\u029b\4\0\1\u029b\2\0\1\u029b\25\0\1\u029b\6\0"+
    "\1\u029b\23\0\1\u0252\3\0\1\u029c\13\0\1\54\11\0"+
    "\1\u029c\22\0\1\54\14\0\1\u0252\74\0\3\u029d\4\0"+
    "\1\u029d\62\0\3\u029e\4\0\1\u029e\116\0\1\u0209\67\0"+
    "\1\u029f\41\0\1\u02a0\104\0\1\u02a1\106\0\1\u02a2\64\0"+
    "\1\u01c1\56\0\1\u02a3\54\0\1\u02a4\121\0\1\u02a5\41\0"+
    "\1\u025f\4\0\1\u02a6\101\0\1\u02a7\54\0\1\u0261\20\0"+
    "\1\u02a8\50\0\1\u02a9\110\0\1\u02aa\57\0\1\u01ee\73\0"+
    "\1\u02ab\132\0\1\u02ac\21\0\1\u02ad\124\0\1\u02ae\36\0"+
    "\1\u0269\2\0\1\u02af\55\0\1\u02af\10\0\1\u0269\73\0"+
    "\1\u02b0\1\0\1\u02b0\120\0\1\u02b1\42\0\1\u02b2\65\0"+
    "\1\u026e\12\0\1\u02b3\15\0\1\u02b3\40\0\1\u026e\73\0"+
    "\1\u02b4\1\0\1\u02b4\71\0\1\u02b5\70\0\3\u02b6\4\0"+
    "\1\u02b6\57\0\1\u0273\2\0\1\u02b7\55\0\1\u02b7\10\0"+
    "\1\u0273\71\0\1\u02b8\71\0\1\u0240\74\0\1\u02b9\5\0"+
    "\1\u02b9\3\0\1\u02b9\54\0\1\u02ba\105\0\1\u02bb\74\0"+
    "\1\u02bc\71\0\1\u02bd\74\0\1\u02be\52\0\3\u02bf\4\0"+
    "\1\u02bf\57\0\1\u027e\16\0\1\u02c0\4\0\1\u02c0\45\0"+
    "\1\u027f\36\0\1\u02c1\32\0\1\u0280\14\0\1\u02c2\54\0"+
    "\1\u02c3\106\0\1\u02c4\56\0\1\u02c5\73\0\1\u02c6\65\0"+
    "\1\u0285\20\0\1\u02c7\50\0\1\u0286\10\0\1\u02c8\25\0"+
    "\1\u02c1\6\0\1\u02c9\4\0\1\u02ca\46\0\1\u02cb\41\0"+
    "\1\u0288\16\0\1\u02cc\52\0\1\u02cd\110\0\1\u02ce\52\0"+
    "\1\u02cf\21\0\1\u02d0\53\0\1\u02d1\70\0\1\u02d2\5\0"+
    "\1\u02d2\3\0\1\u02d2\112\0\1\u02d3\33\0\1\u02d4\71\0"+
    "\1\u0290\20\0\1\u02d5\100\0\1\u02d6\54\0\1\u02d7\56\0"+
    "\1\u0293\45\0\1\u02d8\36\0\1\u02d9\63\0\1\u02da\67\0"+
    "\1\u02db\5\0\1\u02db\3\0\1\u02db\54\0\1\u0297\12\0"+
    "\1\u028c\32\0\1\u02dc\23\0\1\u0298\1\0\1\u010c\67\0"+
    "\1\u02dd\21\0\1\u02de\47\0\1\u02df\73\0\1\u02e0\1\0"+
    "\1\u02e0\115\0\1\u02e1\41\0\1\u029d\14\0\1\u02e2\21\0"+
    "\1\u02c1\32\0\1\u029e\16\0\1\u02e3\4\0\1\u02e3\26\0"+
    "\1\u02e4\16\0\1\u02e5\106\0\1\u02e6\56\0\1\u02e7\67\0"+
    "\1\u02e8\106\0\1\u02e9\54\0\1\u02a4\20\0\1\u02ea\65\0"+
    "\1\u020e\55\0\1\u02eb\7\0\1\u02eb\25\0\1\u02eb\6\0"+
    "\1\u02eb\23\0\1\u02ec\71\0\1\u02cf\4\0\1\u02ed\14\0"+
    "\1\u02d0\47\0\1\u02a9\1\0\1\u02ee\67\0\1\u02ef\3\0"+
    "\1\u02f0\6\0\1\u02f0\113\0\1\u02f1\72\0\1\u02f2\33\0"+
    "\1\u02ad\1\0\1\u02f3\67\0\1\u02f4\105\0\1\u02f5\60\0"+
    "\3\u021b\4\0\1\u021b\57\0\1\u02f6\104\0\1\u02b1\62\0"+
    "\1\u02f7\70\0\3\u02f8\4\0\1\u02f8\72\0\1\u02f9\56\0"+
    "\1\u02b6\10\0\1\u02fa\74\0\1\u02fb\55\0\1\u02b8\20\0"+
    "\1\u02fc\52\0\1\u027f\1\0\1\u027f\6\0\1\u027f\56\0"+
    "\1\u02ba\20\0\1\u02fd\50\0\1\u02fe\71\0\1\u02ff\3\0"+
    "\1\u0300\6\0\1\u0300\56\0\1\u0301\3\0\1\u0302\6\0"+
    "\1\u0302\100\0\1\u01ee\47\0\1\u02bf\10\0\1\u0303\113\0"+
    "\1\u0304\41\0\1\u0305\116\0\1\u0306\41\0\1\u02c3\1\0"+
    "\1\u0307\111\0\1\u01c1\105\0\1\u0308\50\0\1\u0309\54\0"+
    "\1\u030a\21\0\1\u030b\53\0\1\u030c\121\0\1\u030d\35\0"+
    "\1\u030e\76\0\1\u030f\103\0\1\u0123\52\0\1\u02cd\16\0"+
    "\1\u0310\52\0\1\u0311\3\0\1\u0312\6\0\1\u0312\56\0"+
    "\1\u02cf\105\0\1\u0313\57\0\1\u0314\1\0\1\u0314\6\0"+
    "\1\u0314\56\0\1\u0315\71\0\1\u02d4\14\0\1\u0316\54\0"+
    "\1\u02ef\21\0\1\u02f0\102\0\1\u0317\55\0\1\u0318\63\0"+
    "\1\u0319\60\0\1\u031a\71\0\1\u031b\73\0\1\u0240\1\0"+
    "\1\u0240\6\0\1\u0240\67\0\1\u031c\60\0\1\u02dd\21\0"+
    "\1\u031d\37\0\1\u031d\7\0\1\u02dd\71\0\1\u02df\16\0"+
    "\1\u031e\55\0\3\u031f\4\0\1\u031f\64\0\1\u0320\106\0"+
    "\1\u0321\102\0\1\u0322\36\0\1\u0323\71\0\1\u02e5\17\0"+
    "\1\u0324\73\0\1\u0325\64\0\1\u0326\54\0\1\u02e8\1\0"+
    "\1\u0327\67\0\1\u0328\71\0\1\u0329\21\0\1\u032a\51\0"+
    "\1\u032b\1\0\1\u032b\65\0\1\u02ec\1\0\1\u032c\67\0"+
    "\1\u032d\12\0\1\u032e\61\0\1\u032f\4\0\1\u032f\4\0"+
    "\1\u032f\1\0\1\u032f\3\0\1\u032f\46\0\1\u02ef\104\0"+
    "\1\u01c1\114\0\1\u01c1\36\0\1\u0330\4\0\1\u0330\4\0"+
    "\1\u0330\1\0\1\u0330\3\0\1\u0330\46\0\1\u02f4\4\0"+
    "\1\u0331\64\0\1\u0332\71\0\1\u02f6\20\0\1\u0333\100\0"+
    "\1\u0334\41\0\1\u02f8\10\0\1\u02c8\25\0\1\u0335\32\0"+
    "\1\u0336\75\0\1\u0337\65\0\1\u0338\71\0\1\u0339\21\0"+
    "\1\u033a\47\0\1\u033b\21\0\1\u033c\47\0\1\u02fe\20\0"+
    "\1\u033d\50\0\1\u02ff\1\0\1\u033e\67\0\1\u02ff\71\0"+
    "\1\u0301\10\0\1\u033f\60\0\1\u0301\75\0\1\u0340\65\0"+
    "\1\u0341\76\0\1\u0342\71\0\1\u0343\67\0\1\u0344\4\0"+
    "\1\u0344\4\0\1\u0344\1\0\1\u0344\3\0\1\u0344\65\0"+
    "\1\u02f1\67\0\1\u0345\54\0\1\u030a\10\0\1\u0346\15\0"+
    "\1\u0346\42\0\1\u030a\105\0\1\u0347\77\0\1\u0348\47\0"+
    "\1\u030e\16\0\1\u0349\67\0\1\120\73\0\1\u034a\52\0"+
    "\1\u0311\12\0\1\u034b\56\0\1\u0311\121\0\1\u0318\41\0"+
    "\1\u0314\14\0\1\u034c\1\0\1\u034d\4\0\1\u034d\45\0"+
    "\1\u0315\16\0\1\u034e\54\0\1\u034f\5\0\3\u034f\2\0"+
    "\1\u034f\2\0\1\u034f\51\0\1\u0350\76\0\1\u01c1\67\0"+
    "\1\u0351\66\0\1\u031a\20\0\1\u0352\50\0\1\u031b\20\0"+
    "\1\u0353\54\0\1\u0354\115\0\1\u0355\44\0\2\u0356\5\0"+
    "\1\u0356\57\0\1\u031f\10\0\1\u02fa\3\0\1\u02e2\21\0"+
    "\1\u02c1\47\0\1\341\73\0\1\u0357\52\0\1\u0358\71\0"+
    "\1\u0323\16\0\1\u0359\53\0\1\u035a\7\0\1\u035a\25\0"+
    "\1\u035a\6\0\1\u035a\42\0\1\u035b\70\0\1\u035c\56\0"+
    "\1\u035d\4\0\1\u035d\4\0\1\u035d\1\0\1\u035d\3\0"+
    "\1\u035d\46\0\1\u0328\1\0\1\u035e\67\0\1\u0329\1\0"+
    "\1\u035f\67\0\1\u0329\74\0\3\u0360\4\0\1\u0360\62\0"+
    "\1\u0361\4\0\1\u0361\4\0\1\u0361\1\0\1\u0361\3\0"+
    "\1\u0361\116\0\1\u0362\22\0\1\u0363\4\0\1\u0363\2\0"+
    "\1\u0363\25\0\1\u0363\6\0\1\u0363\24\0\1\u0364\4\0"+
    "\1\u0364\2\0\1\u0364\25\0\1\u0364\6\0\1\u0364\24\0"+
    "\1\u0365\7\0\1\u0365\25\0\1\u0365\6\0\1\u0365\23\0"+
    "\1\u0332\20\0\1\u0366\50\0\1\u0367\21\0\1\u0368\105\0"+
    "\1\u0369\36\0\1\u0305\44\0\1\u036a\21\0\1\u0336\20\0"+
    "\1\u036b\64\0\1\u036c\55\0\1\u0338\20\0\1\u036d\50\0"+
    "\1\u0339\4\0\1\u036e\4\0\1\u036f\33\0\1\u0370\2\0"+
    "\1\u0370\14\0\1\u036f\3\0\1\u0339\71\0\1\u033b\16\0"+
    "\1\u0371\4\0\1\u0371\45\0\1\u033b\71\0\1\u0372\21\0"+
    "\1\u0373\105\0\1\u0374\63\0\1\u0375\55\0\1\u0376\55\0"+
    "\1\u0341\16\0\1\u0377\71\0\1\u0378\57\0\1\u0379\65\0"+
    "\1\u037a\4\0\1\u037a\2\0\1\u037a\25\0\1\u037a\6\0"+
    "\1\u037a\23\0\1\u037b\121\0\1\u037c\46\0\1\u037d\106\0"+
    "\1\u0342\52\0\2\u037e\5\0\1\u037e\57\0\1\u02cf\3\0"+
    "\1\u02d0\6\0\1\u02d0\62\0\1\u037f\71\0\1\u0380\120\0"+
    "\1\u0381\55\0\1\u0382\65\0\2\u0383\55\0\1\u0350\16\0"+
    "\1\u0384\110\0\1\u0385\33\0\1\u0386\21\0\1\u0387\47\0"+
    "\1\u0388\21\0\1\u0389\105\0\1\u038a\53\0\1\u01c1\51\0"+
    "\1\u038b\3\0\1\u038c\6\0\1\u038c\111\0\1\u036c\36\0"+
    "\1\u0358\16\0\1\u038d\55\0\2\u038e\5\0\1\u038e\61\0"+
    "\1\u038f\1\0\1\u038f\65\0\1\u0390\105\0\1\u0391\56\0"+
    "\1\u0392\4\0\1\u0392\2\0\1\u0392\25\0\1\u0392\6\0"+
    "\1\u0392\26\0\1\u0393\4\0\1\u0393\4\0\1\u0393\1\0"+
    "\1\u0393\3\0\1\u0393\104\0\1\u0394\33\0\1\u02ef\13\0"+
    "\1\u02f0\56\0\1\u0395\4\0\1\u0395\2\0\1\u0395\25\0"+
    "\1\u0395\6\0\1\u0395\30\0\1\u0396\66\0\1\u0397\1\0"+
    "\1\u0397\67\0\1\u0398\1\0\1\u0398\67\0\1\u0399\1\0"+
    "\1\u0399\65\0\1\u039a\21\0\1\u039b\47\0\1\u0367\3\0"+
    "\1\u039c\65\0\1\u0367\110\0\1\u039d\57\0\1\u039e\64\0"+
    "\1\u039f\21\0\1\u03a0\66\0\1\u03a1\52\0\1\u03a2\21\0"+
    "\1\u03a3\125\0\1\u01c1\32\0\1\u02f2\63\0\1\u036f\62\0"+
    "\1\u03a4\67\0\1\u0372\1\0\1\u03a5\67\0\1\u0372\110\0"+
    "\1\u03a6\72\0\1\u03a7\101\0\1\u03a8\60\0\1\u03a9\110\0"+
    "\1\u03aa\63\0\1\u020e\43\0\1\u03ab\1\0\1\u03ab\65\0"+
    "\1\u037b\1\0\1\u03ac\122\0\1\u01c1\55\0\1\u03ad\52\0"+
    "\1\u03ae\3\0\1\u03af\6\0\1\u03af\111\0\1\u03b0\52\0"+
    "\1\u03b1\55\0\1\u03b2\71\0\1\u03b3\3\0\1\u03b4\6\0"+
    "\1\u03b4\57\0\1\u03b5\4\0\1\u03b6\2\0\1\u03b5\25\0"+
    "\1\u03b5\6\0\1\u03b5\42\0\1\u03b7\74\0\1\u03b8\47\0"+
    "\1\u0386\33\0\1\u03b9\35\0\1\u0386\71\0\1\u0388\14\0"+
    "\1\u03ba\54\0\1\u0388\133\0\1\u03bb\27\0\1\u038b\7\0"+
    "\1\u03bc\2\0\1\u03bd\56\0\1\u038b\74\0\2\u03be\5\0"+
    "\1\u03be\57\0\1\u03bf\3\0\1\u03c0\6\0\1\u03c0\61\0"+
    "\3\u03c1\4\0\1\u03c1\57\0\1\u0390\17\0\1\u03c2\104\0"+
    "\1\u0257\40\0\1\u03c3\1\0\1\u03c3\66\0\1\u03b5\4\0"+
    "\1\u03b5\2\0\1\u03b5\25\0\1\u03b5\6\0\1\u03b5\57\0"+
    "\1\u01c1\37\0\1\u03c4\1\0\1\u03c4\74\0\1\u03c5\65\0"+
    "\3\u03c6\4\0\1\u03c6\62\0\3\u03c7\4\0\1\u03c7\62\0"+
    "\3\u03c8\4\0\1\u03c8\57\0\1\u039a\11\0\1\u03c9\57\0"+
    "\1\u039a\127\0\1\u03ca\33\0\1\u03cb\106\0\1\u03aa\54\0"+
    "\1\u039f\3\0\1\u039c\65\0\1\u039f\127\0\1\u020e\33\0"+
    "\1\u03a2\45\0\1\u03cc\2\0\1\u03cc\20\0\1\u03a2\113\0"+
    "\1\u03cd\105\0\1\u03ce\46\0\1\u03cf\76\0\1\u03ca\56\0"+
    "\1\u03d0\64\0\1\u03d1\3\0\1\u03d2\6\0\1\u03d2\56\0"+
    "\1\u03d3\74\0\3\u03d4\4\0\1\u03d4\62\0\1\u03d5\4\0"+
    "\1\u03d5\4\0\1\u03d5\1\0\1\u03d5\3\0\1\u03d5\46\0"+
    "\1\u03d6\71\0\1\u03ae\14\0\1\u03d7\54\0\1\u03ae\110\0"+
    "\1\u0355\114\0\1\u03c5\27\0\1\u03b2\20\0\1\u03d8\50\0"+
    "\1\u03b3\1\0\1\u03d9\67\0\1\u03b3\73\0\1\u03da\1\0"+
    "\1\u03da\67\0\1\u03db\1\0\1\u03db\65\0\1\u03dc\3\0"+
    "\1\u03dd\6\0\1\u03dd\56\0\1\u03de\124\0\1\u03cd\47\0"+
    "\1\u03df\115\0\1\u02e9\53\0\1\u03e0\115\0\1\u03e1\26\0"+
    "\1\u03e2\3\0\1\u03e3\6\0\1\u03e3\56\0\1\u03bf\3\0"+
    "\1\u03e4\13\0\1\u03e5\51\0\1\u03bf\74\0\1\u03e6\5\0"+
    "\1\u03e6\3\0\1\u03e6\55\0\1\u03e7\7\0\1\u03e7\25\0"+
    "\1\u03e7\6\0\1\u03e7\26\0\3\u03e8\4\0\1\u03e8\62\0"+
    "\3\u03e9\4\0\1\u03e9\76\0\1\u03ea\52\0\1\u03c6\7\0"+
    "\1\u03eb\61\0\1\u03c7\7\0\1\u03ec\61\0\1\u03ed\13\0"+
    "\1\u03ee\127\0\1\u03ef\17\0\1\u03f0\71\0\1\u03cb\16\0"+
    "\1\u03f1\116\0\1\u03f2\62\0\1\u02f2\40\0\1\u03f3\76\0"+
    "\1\u03f4\65\0\1\u020e\64\0\1\u03d1\14\0\1\u03f5\54\0"+
    "\1\u03d1\71\0\1\u03d3\4\0\1\u03f6\64\0\1\u03d4\45\0"+
    "\1\u03f7\2\0\1\u03f7\21\0\1\u03f8\4\0\1\u03f8\2\0"+
    "\1\u03f8\25\0\1\u03f8\6\0\1\u03f8\23\0\1\u03d6\16\0"+
    "\1\u03f9\74\0\1\u03fa\54\0\1\u03fb\70\0\1\u039c\70\0"+
    "\3\u03fc\4\0\1\u03fc\64\0\1\u03fc\4\0\1\u03fc\57\0"+
    "\1\u03dc\14\0\1\u01ea\10\0\1\u01ea\43\0\1\u03dc\71\0"+
    "\1\u03de\1\0\1\u035e\16\0\1\u02d5\53\0\1\u01c1\125\0"+
    "\1\u020e\54\0\1\u0379\47\0\1\u03e2\11\0\1\u03fd\57\0"+
    "\1\u03e2\121\0\1\u03fe\60\0\1\u03ff\54\0\1\u03fc\1\0"+
    "\1\u03fc\6\0\1\u03fc\60\0\1\u0400\1\0\1\u0400\65\0"+
    "\1\u03e8\17\0\1\u0401\51\0\1\u0402\16\0\1\u0403\4\0"+
    "\1\u0403\45\0\1\u0404\134\0\1\u0340\56\0\1\u0405\41\0"+
    "\1\u03ed\2\0\1\u0230\55\0\1\u0230\10\0\1\u03ed\113\0"+
    "\1\u02c4\47\0\1\u03f0\14\0\1\u0406\73\0\1\u0407\110\0"+
    "\1\u0408\46\0\1\u0282\62\0\1\u0409\140\0\1\u03b9\17\0"+
    "\1\u040a\7\0\1\u040a\25\0\1\u040a\6\0\1\u040a\27\0"+
    "\1\u040b\67\0\1\u040c\1\0\1\u040c\70\0\2\u02aa\5\0"+
    "\1\u02aa\76\0\1\u040d\52\0\1\u03fb\14\0\1\u034c\65\0"+
    "\1\u040e\65\0\1\u0257\100\0\1\u0379\60\0\3\u040f\4\0"+
    "\1\u040f\63\0\1\u0410\120\0\1\u0411\36\0\1\u0404\14\0"+
    "\1\u0412\74\0\1\u020e\53\0\1\u0413\5\0\2\u0413\60\0"+
    "\1\u0414\3\0\1\u0415\6\0\1\u0415\114\0\1\u0416\47\0"+
    "\1\u0417\57\0\1\u0418\1\0\1\u0418\105\0\1\u0419\54\0"+
    "\3\u041a\4\0\1\u041a\112\0\1\u020e\111\0\1\u02e9\21\0"+
    "\1\u041b\5\0\1\u041b\3\0\1\u041b\124\0\1\u03e1\21\0"+
    "\1\u041c\76\0\1\u041d\77\0\2\u041e\55\0\1\u0414\4\0"+
    "\1\u041f\17\0\1\u041f\44\0\1\u0414\110\0\1\u01c1\102\0"+
    "\1\u0420\44\0\3\u0421\4\0\1\u0421\66\0\1\u03cd\64\0"+
    "\1\u0422\1\0\1\u0422\6\0\1\u0422\56\0\1\u041c\20\0"+
    "\1\u0423\63\0\2\u02f0\63\0\1\u0424\135\0\1\u0425\34\0"+
    "\1\u01c1\54\0\1\u0426\13\0\1\u0427\55\0\1\u0422\36\0"+
    "\1\u0428\32\0\1\u02cf\4\0\1\u0429\14\0\1\u02d0\51\0"+
    "\1\u042a\1\0\1\u042a\65\0\1\u042b\71\0\1\u0426\74\0"+
    "\1\u042c\73\0\1\u02f0\4\0\1\u02f0\57\0\1\u042b\20\0"+
    "\1\u042d\65\0\1\u03e1\54\0\1\u042e\21\0\1\u042f\47\0"+
    "\1\u042e\12\0\1\u0430\56\0\1\u042e\121\0\1\u0431\46\0"+
    "\1\u0432\71\0\1\u0433\103\0\1\u0434\52\0\1\u0435\71\0"+
    "\1\u0435\16\0\1\u0436\71\0\1\u0437\52\0\1\u0438\3\0"+
    "\1\u0439\6\0\1\u0439\56\0\1\u0438\3\0\1\u0264\65\0"+
    "\1\u0438\70\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[60552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\1\11\u02af\0\1\1\35\0\1\1"+
    "\1\0\1\1\167\0\1\1\33\0\1\1\145\0\1\1"+
    "\3\0\1\1\16\0\1\11\35\0\1\1\13\0\1\1"+
    "\2\0\1\11\20\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1081];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String OpenAdv=" [MWE_AdvP ";
  String CloseAdv=" MWE_AdvP] ";
  String OpenA=" [MWE_AP ";
  String CloseA=" MWE_AP] ";
  String OpenC=" [MWE_CP ";
  String CloseC=" MWE_CP] ";
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
  
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
  	out = _out;
  	while (!zzAtEOF) 
  	    yylex();
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Phrase_MWE(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Phrase_MWE(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
		  out.write("\n");
          }
        case 6: break;
        case 5: 
          { out.write(OpenA+yytext()+CloseA);
          }
        case 7: break;
        case 1: 
          { out.write(yytext());
          }
        case 8: break;
        case 4: 
          { out.write(OpenAdv+yytext()+CloseAdv);
          }
        case 9: break;
        case 3: 
          { out.write(OpenC+yytext()+CloseC);
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Phrase_MWE <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Phrase_MWE scanner = null;
        try {
          scanner = new Phrase_MWE( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
