/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:42 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */
 
/* This transducer groups together a sequence of noun phrases */
/* The phrases must agree in case */

package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:42 from the specification file
 * <tt>Phrase_NPs.flex</tt>
 */
public class Phrase_NPs {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\24\1\0\1\1\1\2\22\0\1\1\13\0\1\23"+
    "\1\14\3\0\3\0\15\0\1\16\1\0\1\22\1\0\1\0\7\0"+
    "\1\0\1\21\1\0\1\17\2\0\1\0\2\0\1\0\1\0\3\0"+
    "\1\15\1\0\1\20\1\0\1\0\1\0\1\13\1\0\1\0\1\10"+
    "\1\6\1\4\1\12\1\3\1\0\1\0\1\3\1\0\1\11\1\7"+
    "\1\5\1\0\2\0\1\11\1\0\1\0\1\3\1\0\1\3\175\0"+
    "\1\11\7\0\1\5\uff01\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\u0138\0\1\3\4\0\1\3\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\25\0\52\0\25\0\77\0\124\0\151\0\176"+
    "\0\223\0\250\0\275\0\322\0\347\0\374\0\u0111\0\u0126"+
    "\0\u013b\0\u0150\0\u0165\0\u017a\0\u018f\0\u01a4\0\u01b9\0\u01ce"+
    "\0\u01e3\0\u01f8\0\u020d\0\u0222\0\u0237\0\u024c\0\u0261\0\u0276"+
    "\0\u028b\0\u02a0\0\u02b5\0\u02ca\0\u02df\0\u02f4\0\u0309\0\u031e"+
    "\0\u0333\0\u0348\0\u035d\0\u0372\0\u0387\0\u039c\0\u03b1\0\u03c6"+
    "\0\u03db\0\u03f0\0\u0405\0\u041a\0\u042f\0\u0444\0\u0459\0\u046e"+
    "\0\u0483\0\u0498\0\u04ad\0\u04c2\0\u04d7\0\u04ec\0\u0501\0\u0516"+
    "\0\u052b\0\u0540\0\u0555\0\u056a\0\u057f\0\u0594\0\u05a9\0\u05be"+
    "\0\u05d3\0\u05e8\0\u05fd\0\u0612\0\u0627\0\u063c\0\u0651\0\u0666"+
    "\0\u067b\0\u0690\0\u06a5\0\u06ba\0\u06cf\0\u06e4\0\u06f9\0\u070e"+
    "\0\u0723\0\u0738\0\u074d\0\u0762\0\u0777\0\u078c\0\u07a1\0\u07b6"+
    "\0\u07cb\0\u07e0\0\u07f5\0\u080a\0\u081f\0\u0834\0\u0849\0\u085e"+
    "\0\u0873\0\u0888\0\u089d\0\u08b2\0\u08c7\0\u08dc\0\u08f1\0\u0906"+
    "\0\u091b\0\u0930\0\u0945\0\u095a\0\u096f\0\u0984\0\u0999\0\u09ae"+
    "\0\u09c3\0\u09d8\0\u09ed\0\u0a02\0\u0a17\0\u0a2c\0\u0a41\0\u0a56"+
    "\0\u0a6b\0\u0a80\0\u0a95\0\u0aaa\0\u0abf\0\u0ad4\0\u0ae9\0\u0afe"+
    "\0\u0b13\0\u0b28\0\u0b3d\0\u0b52\0\u0b67\0\u0b7c\0\u0b91\0\u0ba6"+
    "\0\u0bbb\0\u0bd0\0\u0be5\0\u0bfa\0\u0c0f\0\u0c24\0\u0c39\0\u0c4e"+
    "\0\u0c63\0\u0c78\0\u0c8d\0\u0ca2\0\u0cb7\0\u0ccc\0\u0ce1\0\u0cf6"+
    "\0\u0d0b\0\u0d20\0\u0d35\0\u0d4a\0\u0d5f\0\u0d74\0\u0d89\0\u0d9e"+
    "\0\u0db3\0\u0dc8\0\u0ddd\0\u0df2\0\u0e07\0\u0e1c\0\u0e31\0\u0e46"+
    "\0\u0e5b\0\u0e70\0\u0e85\0\u0e9a\0\u0eaf\0\u0ec4\0\u0ed9\0\u0eee"+
    "\0\u0f03\0\u0f18\0\u0f2d\0\u0f42\0\u0f57\0\u0f6c\0\u0f81\0\u0f96"+
    "\0\u0fab\0\u0fc0\0\u0fd5\0\u0fea\0\u0fff\0\u1014\0\u1029\0\u103e"+
    "\0\u1053\0\u1068\0\u107d\0\u1092\0\u10a7\0\u10bc\0\u10d1\0\u10e6"+
    "\0\u10fb\0\u1110\0\u1125\0\u113a\0\u114f\0\u1164\0\u1179\0\u118e"+
    "\0\u11a3\0\u11b8\0\u11cd\0\u11e2\0\u11f7\0\u120c\0\u1221\0\u1236"+
    "\0\u124b\0\u1260\0\u1275\0\u128a\0\u129f\0\u12b4\0\u12c9\0\u12de"+
    "\0\u12f3\0\u1308\0\u131d\0\u1332\0\u1347\0\u135c\0\u1371\0\u1386"+
    "\0\u139b\0\u13b0\0\u13c5\0\u13da\0\u13ef\0\u1404\0\u1419\0\u142e"+
    "\0\u1443\0\u1458\0\u146d\0\u1482\0\u1497\0\u14ac\0\u14c1\0\u14d6"+
    "\0\u14eb\0\u1500\0\u1515\0\u152a\0\u153f\0\u1554\0\u1569\0\u157e"+
    "\0\u1593\0\u15a8\0\u15bd\0\u15d2\0\u15e7\0\u15fc\0\u1611\0\u1626"+
    "\0\u163b\0\u1650\0\u1665\0\u167a\0\u168f\0\u16a4\0\u16b9\0\u16ce"+
    "\0\u16e3\0\u16f8\0\u170d\0\u1722\0\u1737\0\u174c\0\u1761\0\u1776"+
    "\0\u178b\0\u17a0\0\u17b5\0\u17ca\0\u17df\0\u17f4\0\u1809\0\u181e"+
    "\0\u1833\0\u1848\0\u185d\0\u1872\0\u1887\0\u189c\0\u18b1\0\u18c6"+
    "\0\u18db\0\u18f0\0\u1905\0\u191a\0\u192f\0\u1944\0\u1959\0\u196e"+
    "\0\u1983\0\u1998\0\u19ad\0\u19c2\0\25\0\u19d7\0\u19ec\0\u1a01"+
    "\0\u1a16\0\u0d4a\0\u1a2b\0\u1a40\0\u1a55\0\u1a6a\0\u1a7f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\15\2\1\3\6\2\1\4\46\0\1\5\22\0\1\6"+
    "\14\0\1\7\1\10\1\0\1\11\1\12\11\0\1\13"+
    "\1\7\1\14\16\13\1\15\2\13\1\14\1\16\1\10"+
    "\1\17\16\16\1\20\2\16\1\17\1\21\1\11\1\22"+
    "\16\21\1\23\2\21\1\22\1\24\1\12\1\25\16\24"+
    "\1\26\2\24\1\25\1\13\1\27\1\14\16\13\1\15"+
    "\2\13\22\14\1\30\3\14\1\13\1\27\1\14\14\13"+
    "\1\31\1\13\1\15\2\13\1\14\1\16\1\32\1\17"+
    "\16\16\1\20\2\16\22\17\1\33\3\17\1\16\1\32"+
    "\1\17\14\16\1\34\1\16\1\20\2\16\1\17\1\21"+
    "\1\35\1\22\16\21\1\23\2\21\22\22\1\36\3\22"+
    "\1\21\1\35\1\22\14\21\1\37\1\21\1\23\2\21"+
    "\1\22\1\24\1\40\1\25\16\24\1\26\2\24\22\25"+
    "\1\41\3\25\1\24\1\40\1\25\14\24\1\42\1\24"+
    "\1\26\2\24\1\25\1\14\1\27\5\14\1\43\11\14"+
    "\1\30\22\14\1\44\1\14\1\30\3\14\1\13\1\27"+
    "\1\14\15\13\1\45\1\15\2\13\1\14\1\17\1\32"+
    "\5\17\1\46\11\17\1\33\22\17\1\47\1\17\1\33"+
    "\3\17\1\16\1\32\1\17\15\16\1\50\1\20\2\16"+
    "\1\17\1\22\1\35\5\22\1\51\11\22\1\36\22\22"+
    "\1\52\1\22\1\36\3\22\1\21\1\35\1\22\15\21"+
    "\1\53\1\23\2\21\1\22\1\25\1\40\5\25\1\54"+
    "\11\25\1\41\22\25\1\55\1\25\1\41\3\25\1\24"+
    "\1\40\1\25\15\24\1\56\1\26\2\24\1\25\3\14"+
    "\1\57\15\14\1\30\23\14\1\60\1\30\3\14\1\61"+
    "\1\62\1\0\12\61\1\63\6\61\1\0\3\17\1\64"+
    "\15\17\1\33\23\17\1\65\1\33\3\17\1\66\1\67"+
    "\1\0\12\66\1\70\6\66\1\0\3\22\1\71\15\22"+
    "\1\36\23\22\1\72\1\36\3\22\1\73\1\74\1\0"+
    "\21\73\1\0\3\25\1\75\15\25\1\41\23\25\1\76"+
    "\1\41\3\25\1\77\1\100\1\0\12\77\1\101\6\77"+
    "\1\0\4\14\1\102\1\14\1\102\12\14\1\30\3\14"+
    "\1\0\1\103\13\0\1\104\7\0\1\61\1\105\1\0"+
    "\21\61\2\0\1\62\5\0\1\106\5\0\1\107\5\0"+
    "\1\110\1\0\1\61\1\105\1\0\16\61\1\111\2\61"+
    "\1\0\4\17\1\112\1\17\1\112\12\17\1\33\3\17"+
    "\1\0\1\113\13\0\1\114\7\0\1\66\1\115\1\0"+
    "\21\66\2\0\1\67\5\0\1\116\5\0\1\117\5\0"+
    "\1\120\1\0\1\66\1\115\1\0\16\66\1\121\2\66"+
    "\1\0\4\22\1\122\1\22\1\122\12\22\1\36\3\22"+
    "\1\0\1\123\23\0\1\73\1\124\1\0\21\73\2\0"+
    "\1\74\5\0\1\125\5\0\1\126\5\0\1\127\1\0"+
    "\4\25\1\130\1\25\1\130\12\25\1\41\3\25\1\0"+
    "\1\131\13\0\1\132\7\0\1\77\1\133\1\0\21\77"+
    "\2\0\1\100\5\0\1\134\5\0\1\135\5\0\1\136"+
    "\1\0\1\77\1\133\1\0\16\77\1\137\2\77\1\0"+
    "\5\14\3\140\11\14\1\30\3\14\1\0\1\103\13\0"+
    "\1\107\5\0\1\110\22\0\1\141\4\0\1\105\5\0"+
    "\1\106\20\0\1\142\42\0\1\143\1\144\3\0\1\145"+
    "\23\0\1\61\1\105\1\0\14\61\1\146\4\61\1\0"+
    "\5\17\3\147\11\17\1\33\3\17\1\0\1\113\13\0"+
    "\1\117\5\0\1\120\22\0\1\150\4\0\1\115\5\0"+
    "\1\116\20\0\1\151\42\0\1\152\1\153\3\0\1\154"+
    "\23\0\1\66\1\115\1\0\14\66\1\155\4\66\1\0"+
    "\5\22\3\156\11\22\1\36\3\22\1\0\1\123\13\0"+
    "\1\126\5\0\1\127\2\0\1\124\5\0\1\125\20\0"+
    "\1\157\42\0\1\160\1\161\3\0\1\162\23\0\5\25"+
    "\3\163\11\25\1\41\3\25\1\0\1\131\13\0\1\135"+
    "\5\0\1\136\22\0\1\164\4\0\1\133\5\0\1\134"+
    "\20\0\1\165\42\0\1\166\1\167\3\0\1\170\23\0"+
    "\1\77\1\133\1\0\14\77\1\171\4\77\1\0\12\14"+
    "\1\172\1\14\1\172\4\14\1\30\3\14\17\0\1\173"+
    "\11\0\1\174\1\0\1\174\35\0\1\175\24\0\1\176"+
    "\6\0\1\145\21\0\1\177\1\0\1\61\1\105\1\0"+
    "\7\61\1\13\11\61\1\0\12\17\1\200\1\17\1\200"+
    "\4\17\1\33\3\17\17\0\1\201\11\0\1\202\1\0"+
    "\1\202\35\0\1\203\24\0\1\204\6\0\1\154\21\0"+
    "\1\205\1\0\1\66\1\115\1\0\7\66\1\16\11\66"+
    "\1\0\12\22\1\206\1\22\1\206\4\22\1\36\3\22"+
    "\4\0\1\207\1\0\1\207\35\0\1\210\24\0\1\211"+
    "\6\0\1\162\21\0\1\212\1\0\12\25\1\213\1\25"+
    "\1\213\4\25\1\41\3\25\17\0\1\214\11\0\1\215"+
    "\1\0\1\215\35\0\1\216\24\0\1\217\6\0\1\170"+
    "\21\0\1\220\1\0\1\77\1\133\1\0\7\77\1\24"+
    "\11\77\1\0\11\14\1\221\7\14\1\30\3\14\12\0"+
    "\1\14\17\0\3\222\24\0\1\223\2\0\1\14\12\0"+
    "\22\176\1\224\2\176\1\0\1\225\23\0\11\17\1\226"+
    "\7\17\1\33\3\17\12\0\1\17\17\0\3\227\25\0"+
    "\1\223\1\0\1\17\12\0\22\204\1\230\2\204\1\0"+
    "\1\231\23\0\11\22\1\232\7\22\1\36\3\22\5\0"+
    "\3\233\27\0\1\223\12\0\22\211\1\234\2\211\1\0"+
    "\1\235\23\0\11\25\1\236\7\25\1\41\3\25\12\0"+
    "\1\25\17\0\3\237\27\0\1\25\1\223\11\0\22\217"+
    "\1\240\2\217\1\0\1\241\23\0\1\14\1\242\17\14"+
    "\1\30\3\14\12\0\1\243\1\0\1\243\10\0\1\244"+
    "\1\223\1\0\21\244\1\0\17\176\1\245\2\176\1\224"+
    "\2\176\1\0\1\225\13\0\1\246\7\0\1\17\1\247"+
    "\17\17\1\33\3\17\12\0\1\250\1\0\1\250\10\0"+
    "\17\204\1\251\2\204\1\230\2\204\1\0\1\231\13\0"+
    "\1\252\7\0\1\22\1\253\17\22\1\36\3\22\12\0"+
    "\1\254\1\0\1\254\10\0\17\211\1\255\2\211\1\234"+
    "\2\211\1\0\1\235\13\0\1\256\7\0\1\25\1\257"+
    "\17\25\1\41\3\25\12\0\1\260\1\0\1\260\10\0"+
    "\17\217\1\261\2\217\1\240\2\217\1\0\1\241\13\0"+
    "\1\262\7\0\1\13\1\242\1\14\16\13\1\263\2\13"+
    "\1\14\11\0\1\264\13\0\1\244\1\265\1\0\21\244"+
    "\1\0\20\176\1\266\1\176\1\224\2\176\21\0\1\267"+
    "\3\0\1\16\1\247\1\17\16\16\1\270\2\16\1\17"+
    "\11\0\1\271\13\0\20\204\1\272\1\204\1\230\2\204"+
    "\16\0\1\273\2\0\1\274\3\0\1\21\1\253\1\22"+
    "\16\21\1\275\2\21\1\22\11\0\1\276\13\0\20\211"+
    "\1\277\1\211\1\234\2\211\21\0\1\300\3\0\1\24"+
    "\1\257\1\25\16\24\1\301\2\24\1\25\11\0\1\302"+
    "\13\0\20\217\1\303\1\217\1\240\2\217\16\0\1\304"+
    "\2\0\1\305\3\0\1\13\1\27\1\14\14\13\1\306"+
    "\1\13\1\15\2\13\1\14\1\0\1\307\24\0\1\265"+
    "\5\0\1\310\16\0\1\311\42\0\1\312\5\0\1\16"+
    "\1\32\1\17\14\16\1\313\1\16\1\20\2\16\1\17"+
    "\1\0\1\314\24\0\1\315\42\0\1\316\24\0\1\317"+
    "\5\0\1\21\1\35\1\22\14\21\1\320\1\21\1\23"+
    "\2\21\1\22\1\0\1\321\24\0\1\322\42\0\1\323"+
    "\5\0\1\24\1\40\1\25\14\24\1\324\1\24\1\26"+
    "\2\24\1\25\1\0\1\325\24\0\1\326\42\0\1\327"+
    "\24\0\1\330\5\0\1\13\1\27\1\14\15\13\1\331"+
    "\1\15\2\13\1\14\1\61\1\307\1\0\16\61\1\332"+
    "\2\61\4\0\1\333\22\0\1\311\13\0\1\334\16\0"+
    "\1\335\15\0\1\16\1\32\1\17\15\16\1\336\1\20"+
    "\2\16\1\17\1\66\1\314\1\0\16\66\1\337\2\66"+
    "\2\0\1\315\13\0\1\340\17\0\1\341\24\0\1\342"+
    "\14\0\1\21\1\35\1\22\15\21\1\343\1\23\2\21"+
    "\1\22\1\73\1\321\1\0\16\73\1\344\2\73\2\0"+
    "\1\322\13\0\1\345\21\0\1\346\12\0\1\24\1\40"+
    "\1\25\15\24\1\347\1\26\2\24\1\25\1\77\1\325"+
    "\1\0\16\77\1\350\2\77\2\0\1\326\13\0\1\351"+
    "\22\0\1\352\24\0\1\353\11\0\1\61\1\354\1\0"+
    "\12\61\1\63\6\61\1\0\1\61\1\105\1\0\14\61"+
    "\1\355\4\61\5\0\1\356\1\0\1\356\37\0\1\357"+
    "\3\0\21\335\1\360\3\335\1\66\1\361\1\0\12\66"+
    "\1\70\6\66\1\0\1\66\1\115\1\0\14\66\1\362"+
    "\4\66\17\0\1\363\2\0\1\364\3\0\16\341\1\365"+
    "\6\341\21\342\1\366\3\342\1\73\1\367\1\0\21\73"+
    "\1\0\1\73\1\124\1\0\14\73\1\370\4\73\22\0"+
    "\1\371\3\0\21\346\1\372\3\346\1\77\1\373\1\0"+
    "\12\77\1\101\6\77\1\0\1\77\1\133\1\0\14\77"+
    "\1\374\4\77\17\0\1\375\2\0\1\376\3\0\16\352"+
    "\1\377\6\352\21\353\1\u0100\3\353\1\0\1\354\5\0"+
    "\1\106\5\0\1\u0101\5\0\1\110\1\0\1\61\1\105"+
    "\1\0\15\61\1\u0102\3\61\6\0\3\u0103\34\0\1\u0104"+
    "\5\0\17\335\1\u0105\1\335\1\360\3\335\1\0\1\361"+
    "\5\0\1\116\5\0\1\u0106\5\0\1\120\1\0\1\66"+
    "\1\115\1\0\15\66\1\u0107\3\66\20\0\1\u0108\24\0"+
    "\1\u0109\5\0\16\341\1\365\1\u010a\5\341\17\342\1\u010b"+
    "\1\342\1\366\3\342\1\0\1\367\5\0\1\125\5\0"+
    "\1\u010c\5\0\1\127\1\0\1\73\1\124\1\0\15\73"+
    "\1\u010d\3\73\20\0\1\u010e\5\0\17\346\1\u010f\1\346"+
    "\1\372\3\346\1\0\1\373\5\0\1\134\5\0\1\u0110"+
    "\5\0\1\136\1\0\1\77\1\133\1\0\15\77\1\u0111"+
    "\3\77\20\0\1\u0112\24\0\1\u0113\5\0\16\352\1\377"+
    "\1\u0114\5\352\17\353\1\u0115\1\353\1\u0100\3\353\21\0"+
    "\1\u0116\1\144\2\0\1\61\1\u0117\1\0\21\61\13\0"+
    "\1\u0118\1\0\1\u0118\17\0\1\u0119\15\0\20\335\1\u011a"+
    "\1\360\3\335\21\0\1\u011b\1\153\2\0\1\66\1\u011c"+
    "\1\0\21\66\11\0\1\u011d\24\0\1\u0119\14\0\16\341"+
    "\1\365\1\341\1\u011e\4\341\20\342\1\u011e\1\366\3\342"+
    "\21\0\1\u011f\1\161\2\0\1\73\1\u0120\1\0\21\73"+
    "\13\0\1\u0119\12\0\20\346\1\u0121\1\372\3\346\21\0"+
    "\1\u0122\1\167\2\0\1\77\1\u0123\1\0\21\77\14\0"+
    "\1\u011d\24\0\1\u0119\11\0\16\352\1\377\1\352\1\u0124"+
    "\4\352\20\353\1\u0124\1\u0100\3\353\17\0\1\u0125\6\0"+
    "\1\u0117\5\0\1\106\5\0\1\334\20\0\1\u0126\13\0"+
    "\21\u0119\1\u0127\3\u0119\1\0\1\u0128\42\0\1\u0129\6\0"+
    "\1\u011c\5\0\1\116\5\0\1\u012a\7\0\16\u011d\1\u012b"+
    "\6\u011d\1\0\1\u012c\42\0\1\u012d\6\0\1\u0120\5\0"+
    "\1\125\5\0\1\345\10\0\1\u012e\42\0\1\u012f\6\0"+
    "\1\u0123\5\0\1\134\5\0\1\u0130\10\0\1\u0131\32\0"+
    "\1\u0132\2\0\1\14\13\0\1\u0133\23\0\17\u0119\1\u0134"+
    "\1\u0119\1\u0127\3\u0119\1\0\1\u0128\13\0\1\u0135\5\0"+
    "\1\110\11\0\1\u0132\1\0\1\17\33\0\1\364\3\0"+
    "\16\u011d\1\u012b\1\u0136\5\u011d\1\0\1\u012c\13\0\1\u0137"+
    "\5\0\1\120\13\0\1\u0132\13\0\1\u012e\13\0\1\u0138"+
    "\5\0\1\127\13\0\1\25\1\u0132\32\0\1\376\4\0"+
    "\1\u0131\13\0\1\u0139\5\0\1\136\1\0\1\u013a\1\u0132"+
    "\1\u0119\16\u013a\1\u013b\2\u013a\1\u0119\1\244\1\u0133\1\0"+
    "\16\244\1\u013c\2\244\1\0\20\u0119\1\u013d\1\u0127\3\u0119"+
    "\22\0\1\144\2\0\16\u011d\1\u012b\1\u011d\1\u013d\4\u011d"+
    "\22\0\1\153\24\0\1\161\24\0\1\167\2\0\1\u013a"+
    "\1\u013e\1\u0119\16\u013a\1\u013b\2\u013a\1\u0119\1\u013a\1\u013e"+
    "\1\u0119\14\u013a\1\u013f\1\u013a\1\u013b\2\u013a\1\u0119\1\244"+
    "\1\265\1\0\14\244\1\u0140\4\244\1\0\1\u0119\1\u013e"+
    "\5\u0119\1\u0141\11\u0119\1\u0127\3\u0119\1\u013a\1\u013e\1\u0119"+
    "\15\u013a\1\u0142\1\u013b\2\u013a\1\u0119\1\244\1\265\1\0"+
    "\15\244\1\u0142\3\244\1\0\3\u0119\1\u0143\15\u0119\1\u0127"+
    "\7\u0119\1\u0144\1\u0119\1\u0144\12\u0119\1\u0127\10\u0119\3\u0145"+
    "\11\u0119\1\u0127\15\u0119\1\u0146\1\u0119\1\u0146\4\u0119\1\u0127"+
    "\14\u0119\1\u0147\7\u0119\1\u0127\4\u0119\1\u0132\17\u0119\1\u0127"+
    "\3\u0119";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6804];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\u0138\0\1\11\4\0\1\1"+
    "\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String NPOpen=" [NPs ";
  String NPClose=" NPs] ";
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Phrase_NPs(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Phrase_NPs(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { out.write(NPOpen+yytext()+NPClose);
          }
        case 4: break;
        case 1: 
          { out.write(yytext());
          }
        case 5: break;
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
	out.write("\n");
          }
        case 6: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Phrase_NPs <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Phrase_NPs scanner = null;
        try {
          scanner = new Phrase_NPs( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
