/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:42 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */
 
/* This transducer marks genitive qualifers (noun phrases) */
package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:42 from the specification file
 * <tt>Func_QUAL.flex</tt>
 */
public class Func_QUAL {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\21\1\0\1\1\1\2\22\0\1\1\13\0\1\0"+
    "\1\0\3\0\3\0\15\0\1\0\1\0\1\0\1\0\1\17\7\0"+
    "\1\15\1\12\1\0\1\10\2\0\1\0\2\0\1\13\1\16\3\0"+
    "\1\7\1\0\1\11\1\0\1\20\1\0\1\6\1\0\1\0\1\0"+
    "\1\3\1\0\1\4\1\0\1\14\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\2\0\1\5\1\0\1\0\1\0\1\0\1\0\175\0"+
    "\1\0\7\0\1\0\uff01\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\35\0\1\3\71\0\1\3\35\0"+
    "\1\1\3\0\1\1\3\0\1\1\63\0\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\22\0\44\0\22\0\66\0\110\0\132\0\154"+
    "\0\176\0\220\0\242\0\264\0\306\0\330\0\352\0\374"+
    "\0\u010e\0\u0120\0\u0132\0\u0144\0\u0156\0\u0168\0\u017a\0\u018c"+
    "\0\u019e\0\u01b0\0\u01c2\0\u01d4\0\u01e6\0\u01f8\0\u020a\0\u021c"+
    "\0\u022e\0\u0240\0\u0252\0\u0264\0\u0276\0\u0288\0\u029a\0\u02ac"+
    "\0\u02be\0\u02d0\0\u02e2\0\u02f4\0\u0306\0\u0318\0\u032a\0\u033c"+
    "\0\u034e\0\u0360\0\u0372\0\u0384\0\u0396\0\u03a8\0\u03ba\0\u03cc"+
    "\0\u03de\0\u03f0\0\u0402\0\u0414\0\u0426\0\u0438\0\u044a\0\u045c"+
    "\0\u046e\0\u0480\0\u0492\0\u04a4\0\u04b6\0\u04c8\0\u04da\0\u04ec"+
    "\0\u04fe\0\u0510\0\u0522\0\u0534\0\u0546\0\u0558\0\u056a\0\u057c"+
    "\0\u058e\0\u05a0\0\u05b2\0\u05c4\0\u05d6\0\u05e8\0\u05fa\0\u060c"+
    "\0\u061e\0\u0630\0\u0642\0\22\0\u0654\0\u0666\0\u0678\0\u068a"+
    "\0\u069c\0\u06ae\0\u06c0\0\u06d2\0\u06e4\0\u06f6\0\u0708\0\u071a"+
    "\0\u072c\0\u073e\0\u0750\0\u0762\0\u0774\0\u0786\0\u0798\0\u07aa"+
    "\0\u07bc\0\u07ce\0\u07e0\0\u07f2\0\u0804\0\u0816\0\u0828\0\u083a"+
    "\0\u084c\0\u0306\0\u085e\0\u0870\0\u0882\0\u034e\0\u0894\0\u08a6"+
    "\0\u08b8\0\352\0\u08ca\0\u08dc\0\u08ee\0\u0900\0\u0912\0\u0924"+
    "\0\u0936\0\u0948\0\u095a\0\u096c\0\u097e\0\u0990\0\u09a2\0\u09b4"+
    "\0\u09c6\0\u09d8\0\u09ea\0\u09fc\0\u0a0e\0\u0a20\0\u0a32\0\u0a44"+
    "\0\u0a56\0\u0a68\0\u0a7a\0\u0a8c\0\u0a9e\0\u0ab0\0\u0ac2\0\u0ad4"+
    "\0\u0ae6\0\u0af8\0\u0b0a\0\u0b1c\0\u0b2e\0\u0b40\0\u0b52\0\u0b64"+
    "\0\u0b76\0\u0b88\0\u0b9a\0\u0bac\0\u0bbe\0\u0bd0\0\u0be2\0\u0bf4"+
    "\0\u0c06\0\u0c18\0\u0c2a\0\u0c3c\0\u0c4e\0\u0900\0\u0522";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\2\1\3\11\2\1\4\32\0\1\5\1\0\1\6"+
    "\1\7\16\0\1\10\21\0\1\11\21\0\1\12\11\0"+
    "\1\13\1\14\1\0\16\13\5\0\1\15\1\16\14\0"+
    "\5\17\1\20\5\17\1\21\1\22\5\17\1\13\1\23"+
    "\1\0\16\13\1\0\1\13\1\14\1\0\4\13\1\24"+
    "\11\13\1\0\12\15\1\25\7\15\1\0\1\26\20\0"+
    "\13\17\1\21\6\17\13\20\1\27\6\20\10\17\1\30"+
    "\2\17\1\21\6\17\13\22\1\31\6\22\1\0\1\23"+
    "\4\0\1\32\13\0\1\13\1\23\1\0\12\13\1\33"+
    "\3\13\1\0\10\15\1\34\1\15\1\25\7\15\1\0"+
    "\1\26\5\0\1\35\12\0\10\20\1\36\2\20\1\27"+
    "\6\20\11\17\1\37\1\17\1\21\6\17\10\22\1\40"+
    "\2\22\1\31\6\22\3\0\1\37\16\0\1\13\1\23"+
    "\1\0\13\13\1\41\2\13\1\0\11\15\1\42\1\25"+
    "\7\15\12\0\1\43\7\0\5\20\1\44\3\20\1\45"+
    "\1\20\1\27\6\20\1\0\1\46\20\0\11\22\1\47"+
    "\1\22\1\31\1\50\5\22\1\13\1\23\1\0\14\13"+
    "\1\51\1\13\2\0\1\52\30\0\1\53\11\0\11\20"+
    "\1\54\1\20\1\27\6\20\1\55\1\56\11\55\1\57"+
    "\6\55\1\0\1\46\5\0\1\60\12\0\1\61\1\62"+
    "\11\61\1\63\6\61\11\22\1\54\1\22\1\31\6\22"+
    "\1\13\1\23\1\0\15\13\1\64\2\0\1\52\5\0"+
    "\1\65\16\0\1\66\15\0\1\17\1\67\11\17\1\21"+
    "\6\17\13\55\1\57\7\55\1\56\5\55\1\70\3\55"+
    "\1\57\16\55\1\71\2\55\1\57\6\55\12\0\1\72"+
    "\7\0\13\61\1\63\7\61\1\62\5\61\1\73\3\61"+
    "\1\63\16\61\1\74\2\61\1\63\6\61\1\13\1\23"+
    "\1\0\5\13\1\75\10\13\13\0\1\76\7\0\12\66"+
    "\1\77\7\66\1\17\1\67\5\17\1\100\3\17\1\21"+
    "\6\17\12\55\1\101\1\57\13\55\1\102\5\55\1\57"+
    "\6\55\10\0\1\103\11\0\12\61\1\104\1\63\21\61"+
    "\1\63\1\105\5\61\1\13\1\23\1\0\5\13\1\106"+
    "\10\13\11\0\1\107\11\0\10\66\1\110\1\66\1\77"+
    "\7\66\12\17\1\111\1\21\6\17\10\55\1\112\2\55"+
    "\1\57\17\55\1\37\1\55\1\57\6\55\4\0\1\113"+
    "\1\114\14\0\10\61\1\115\2\61\1\63\17\61\1\37"+
    "\1\61\1\63\6\61\1\106\1\116\1\117\3\106\1\120"+
    "\12\106\1\117\4\0\1\15\15\0\5\66\1\121\4\66"+
    "\1\77\7\66\10\17\1\122\2\17\1\21\6\17\4\55"+
    "\1\123\1\124\5\55\1\57\6\55\12\113\1\125\7\113"+
    "\1\0\1\126\20\0\4\61\1\127\1\130\5\61\1\63"+
    "\6\61\1\117\1\116\4\117\1\131\21\117\1\132\13\117"+
    "\1\106\1\116\1\117\1\133\2\106\1\120\12\106\1\117"+
    "\11\66\1\134\1\77\7\66\4\17\1\135\1\136\5\17"+
    "\1\21\6\17\12\123\1\137\1\140\6\123\1\55\1\141"+
    "\11\55\1\57\6\55\10\113\1\142\1\113\1\125\7\113"+
    "\1\0\1\126\5\0\1\143\12\0\12\127\1\144\1\145"+
    "\6\127\1\61\1\146\11\61\1\63\6\61\3\117\1\147"+
    "\2\117\1\132\16\117\1\150\2\117\1\132\13\117\1\106"+
    "\1\151\1\117\3\106\1\120\12\106\1\117\12\135\1\152"+
    "\1\153\6\135\1\17\1\154\11\17\1\21\6\17\10\123"+
    "\1\155\1\123\1\137\1\140\16\123\1\156\1\123\1\137"+
    "\1\140\6\123\1\55\1\141\5\55\1\157\3\55\1\57"+
    "\6\55\11\113\1\2\1\125\7\113\12\0\1\160\7\0"+
    "\10\127\1\161\1\127\1\144\1\145\16\127\1\162\1\127"+
    "\1\144\1\145\6\127\1\61\1\146\5\61\1\163\3\61"+
    "\1\63\6\61\1\117\1\164\4\117\1\132\14\117\1\165"+
    "\4\117\1\132\13\117\1\0\1\151\4\0\1\32\6\0"+
    "\1\166\4\0\10\135\1\167\1\135\1\152\1\153\16\135"+
    "\1\170\1\135\1\152\1\153\6\135\1\17\1\154\5\17"+
    "\1\171\3\17\1\21\6\17\11\123\1\172\1\137\1\140"+
    "\13\123\1\173\4\123\1\137\1\140\6\123\12\55\1\174"+
    "\1\57\6\55\10\0\1\175\11\0\11\127\1\176\1\144"+
    "\1\145\20\127\1\144\1\145\1\177\5\127\12\61\1\200"+
    "\1\63\6\61\1\0\1\164\5\0\1\60\5\0\1\166"+
    "\5\0\1\165\13\0\1\166\22\0\1\201\3\0\11\135"+
    "\1\202\1\152\1\153\17\135\1\203\1\152\1\153\6\135"+
    "\12\17\1\204\1\21\6\17\11\123\1\203\1\137\1\140"+
    "\6\123\10\55\1\205\2\55\1\57\6\55\4\0\1\206"+
    "\15\0\11\127\1\203\1\144\1\145\6\127\10\61\1\207"+
    "\2\61\1\63\6\61\17\0\1\210\2\0\1\113\1\211"+
    "\10\113\1\125\7\113\10\17\1\212\2\17\1\21\6\17"+
    "\4\55\1\213\6\55\1\57\6\55\12\206\1\214\7\206"+
    "\4\61\1\215\6\61\1\63\6\61\20\0\1\216\1\0"+
    "\1\113\1\211\5\113\1\217\2\113\1\125\7\113\4\17"+
    "\1\220\6\17\1\21\6\17\12\213\1\221\1\222\6\213"+
    "\10\206\1\223\1\206\1\214\7\206\12\215\1\224\1\225"+
    "\6\215\10\0\1\226\11\0\12\113\1\227\7\113\12\220"+
    "\1\230\1\231\6\220\10\213\1\232\1\213\1\221\1\222"+
    "\16\213\1\233\1\213\1\221\1\222\6\213\5\206\1\234"+
    "\4\206\1\214\7\206\10\215\1\235\1\215\1\224\1\225"+
    "\16\215\1\236\1\215\1\224\1\225\6\215\10\0\1\237"+
    "\11\0\10\113\1\240\1\113\1\125\7\113\10\220\1\241"+
    "\1\220\1\230\1\231\16\220\1\242\1\220\1\230\1\231"+
    "\6\220\5\213\1\243\4\213\1\221\1\222\13\213\1\244"+
    "\4\213\1\221\1\222\6\213\11\206\1\2\1\214\7\206"+
    "\5\215\1\245\4\215\1\224\1\225\20\215\1\224\1\225"+
    "\1\246\5\215\11\0\1\37\10\0\5\113\1\247\3\113"+
    "\1\2\1\125\7\113\5\220\1\250\4\220\1\230\1\231"+
    "\17\220\1\251\1\230\1\231\6\220\11\213\1\172\1\221"+
    "\1\222\17\213\1\251\1\221\1\222\6\213\11\215\1\176"+
    "\1\224\1\225\17\215\1\251\1\224\1\225\6\215\1\113"+
    "\1\252\10\113\1\125\7\113\11\220\1\202\1\230\1\231"+
    "\6\220\1\206\1\253\10\206\1\214\7\206\1\113\1\252"+
    "\5\113\1\254\2\113\1\125\7\113\1\206\1\253\5\206"+
    "\1\255\2\206\1\214\7\206\12\113\1\256\7\113\12\206"+
    "\1\257\7\206\10\113\1\260\1\113\1\125\7\113\10\206"+
    "\1\261\1\206\1\214\7\206\4\113\1\262\4\113\1\2"+
    "\1\125\7\113\4\206\1\262\1\234\4\206\1\214\7\206"+
    "\12\262\1\263\17\262\1\264\1\262\1\263\14\262\1\265"+
    "\3\262\1\266\1\263\20\262\1\267\1\263\7\262";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3168];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\35\0\1\1\71\0\1\11"+
    "\35\0\1\1\3\0\1\1\3\0\1\1\63\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  String OpenQual="{*QUAL ";
  String CloseQual=" *QUAL}";
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Func_QUAL(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Func_QUAL(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
		out.write("\n");
          }
        case 4: break;
        case 1: 
          { out.write(yytext());
          }
        case 5: break;
        case 3: 
          { out.write(OpenQual+yytext()+CloseQual);
          }
        case 6: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Func_QUAL <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Func_QUAL scanner = null;
        try {
          scanner = new Func_QUAL( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
