/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:44 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */
 
/* This transducer prints each phrase of a sentence on a separate line */
package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:44 from the specification file
 * <tt>Phrase_Per_Line.flex</tt>
 */
public class Phrase_Per_Line {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FUNC = 2;
  public static final int YYINITIAL = 0;
  public static final int PHRASE = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\40\1\0\2\1\22\0\1\36\11\0\1\23\21\0"+
    "\1\30\1\0\1\30\2\0\1\2\1\25\1\13\1\0\1\21\3\0"+
    "\1\14\1\26\1\0\1\32\1\17\1\7\1\27\1\5\1\31\1\0"+
    "\1\12\1\33\1\24\1\10\1\20\1\34\2\0\1\35\1\0\1\41"+
    "\1\0\1\22\2\0\1\11\1\0\1\3\2\0\1\11\1\0\1\11"+
    "\1\16\3\0\1\15\1\0\1\11\2\0\1\6\2\0\1\4\4\0"+
    "\1\37\1\0\1\42\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\4\1\1\2\3\3\1\4\2\3\32\0\1\5"+
    "\44\0\1\6\6\0\1\7\1\0\1\10\41\0\1\11"+
    "\6\0\1\12\4\0\1\13\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\214"+
    "\0\214\0\365\0\u0118\0\214\0\u013b\0\u015e\0\151\0\u0181"+
    "\0\u01a4\0\u01c7\0\u01ea\0\u020d\0\u0230\0\u0253\0\u0276\0\u0299"+
    "\0\u02bc\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1"+
    "\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9"+
    "\0\u0181\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be"+
    "\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6"+
    "\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee"+
    "\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906"+
    "\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\214\0\u09d8\0\u09fb"+
    "\0\u0a1e\0\u0a41\0\u0a64\0\u0a87\0\214\0\u0aaa\0\214\0\u0acd"+
    "\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5"+
    "\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd"+
    "\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\u0e15"+
    "\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d"+
    "\0\214\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\214"+
    "\0\u1022\0\u1045\0\u1068\0\u108b\0\214\0\u10ae\0\u10d1\0\u10f4"+
    "\0\u1117";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\33\4\1\6\1\5\1\7\1\10\2\5"+
    "\35\11\1\12\1\13\1\11\1\14\40\11\1\15\1\16"+
    "\1\14\2\11\1\17\1\0\33\17\1\0\1\20\51\0"+
    "\1\21\2\0\1\22\1\0\1\23\1\24\1\0\1\25"+
    "\1\22\1\26\2\0\1\27\46\0\1\30\21\0\1\31"+
    "\2\0\1\32\1\0\1\33\1\34\1\0\1\35\1\32"+
    "\1\36\2\0\1\37\25\0\1\40\2\0\1\41\1\0"+
    "\1\42\1\43\1\0\1\44\1\41\1\45\2\0\1\46"+
    "\46\0\1\47\42\0\1\50\17\0\1\51\1\0\33\51"+
    "\11\0\1\52\1\0\1\53\42\0\1\54\42\0\1\53"+
    "\42\0\1\55\50\0\1\22\44\0\1\56\45\0\1\57"+
    "\34\0\1\60\1\61\1\62\12\0\1\63\1\0\1\64"+
    "\1\0\1\65\12\0\1\66\1\0\1\67\42\0\1\70"+
    "\42\0\1\67\42\0\1\71\50\0\1\32\44\0\1\72"+
    "\45\0\1\73\25\0\1\74\1\0\1\75\42\0\1\76"+
    "\42\0\1\75\42\0\1\77\50\0\1\41\44\0\1\100"+
    "\45\0\1\101\34\0\1\102\1\103\1\104\12\0\1\105"+
    "\1\0\1\106\1\0\1\107\21\0\1\110\1\111\1\112"+
    "\12\0\1\113\1\0\1\114\1\0\1\115\13\0\1\22"+
    "\44\0\1\54\27\0\1\116\42\0\1\116\12\0\1\54"+
    "\2\0\1\54\24\0\1\116\22\0\1\22\45\0\1\117"+
    "\45\0\1\120\45\0\1\121\42\0\1\63\40\0\1\122"+
    "\41\0\1\123\32\0\1\124\32\0\1\32\44\0\1\70"+
    "\27\0\1\125\42\0\1\125\12\0\1\70\2\0\1\70"+
    "\24\0\1\125\22\0\1\32\45\0\1\126\25\0\1\41"+
    "\44\0\1\76\32\0\1\127\42\0\1\127\7\0\1\76"+
    "\2\0\1\76\27\0\1\127\17\0\1\41\45\0\1\130"+
    "\45\0\1\131\45\0\1\132\42\0\1\105\40\0\1\133"+
    "\41\0\1\134\32\0\1\135\52\0\1\136\45\0\1\137"+
    "\42\0\1\113\40\0\1\140\41\0\1\141\32\0\1\142"+
    "\50\0\1\143\45\0\1\144\34\0\1\145\51\0\1\146"+
    "\16\0\1\147\57\0\1\150\45\0\1\151\42\0\1\152"+
    "\45\0\1\153\34\0\1\154\51\0\1\155\16\0\1\156"+
    "\57\0\1\157\50\0\1\160\34\0\1\161\51\0\1\162"+
    "\16\0\1\163\57\0\1\164\25\0\1\165\2\0\1\22"+
    "\5\0\1\22\55\0\1\166\21\0\1\166\37\0\1\145"+
    "\4\0\1\167\20\0\1\170\5\0\1\171\36\0\1\170"+
    "\31\0\1\172\23\0\1\173\2\0\1\32\5\0\1\32"+
    "\31\0\1\174\2\0\1\41\5\0\1\41\55\0\1\175"+
    "\21\0\1\175\37\0\1\154\4\0\1\176\20\0\1\177"+
    "\11\0\1\200\32\0\1\177\31\0\1\201\47\0\1\202"+
    "\21\0\1\202\37\0\1\161\4\0\1\203\20\0\1\204"+
    "\5\0\1\205\36\0\1\204\31\0\1\206\24\0\1\52"+
    "\1\0\1\54\65\0\1\170\5\0\1\171\33\0\1\207"+
    "\51\0\1\171\40\0\1\170\11\0\1\66\1\0\1\70"+
    "\40\0\1\74\1\0\1\76\65\0\1\177\11\0\1\200"+
    "\27\0\1\210\55\0\1\200\34\0\1\177\36\0\1\204"+
    "\5\0\1\205\33\0\1\211\51\0\1\205\40\0\1\204"+
    "\25\0\1\166\42\0\1\175\42\0\1\202\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4410];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\2\1\2\11\2\1\1\11\2\1"+
    "\32\0\1\1\44\0\1\11\6\0\1\11\1\0\1\11"+
    "\41\0\1\11\6\0\1\11\4\0\1\11\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[137];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer str = new StringBuffer();
  int count = 0;
  int funcCount = 0;
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Phrase_Per_Line(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Phrase_Per_Line(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 128) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { /* System.err.println("PhraseLabel open " + yytext()); */
		  count++; 
		  str.append(yytext());
          }
        case 12: break;
        case 9: 
          { /* System.err.println("InitFunc open " + yytext()); */
		  funcCount++; 
		  str.append(yytext()); 
		  yybegin(FUNC);
          }
        case 13: break;
        case 4: 
          { System.out.print(yytext());
          }
        case 14: break;
        case 3: 
          { str.append(yytext());
          }
        case 15: break;
        case 8: 
          { count--; 
		  /* System.err.println("PhraseLabel close " + yytext()); */
		  str.append(yytext());
		  if (count == 0) { 
		  	/*System.out.println("Match");*/
			out.write(str.toString());
			out.write("\n");
			str.setLength(0);
			yybegin(YYINITIAL);
		  }
          }
        case 16: break;
        case 1: 
          { ;
          }
        case 17: break;
        case 11: 
          { /* System.err.println("Func open2 " + yytext()); */
		  funcCount++; str.append(yytext());
          }
        case 18: break;
        case 5: 
          { out.write(yytext()); out.write("\n");
          }
        case 19: break;
        case 10: 
          { /* System.err.println("Func close " + yytext()); */
		  funcCount--; 
		  str.append(yytext());
		  if (funcCount == 0) { 
			out.write(str.toString());
			out.write("\n");
			str.setLength(0);
			yybegin(YYINITIAL);
		  }
          }
        case 20: break;
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
		  out.write("\n");
          }
        case 21: break;
        case 6: 
          { /* System.err.println("InitLabel open " + yytext()); */
		  count++; str.append(yytext()); 
		  yybegin(PHRASE);
          }
        case 22: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Phrase_Per_Line <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Phrase_Per_Line scanner = null;
        try {
          scanner = new Phrase_Per_Line( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
