/* The following code was generated by JFlex 1.4.1 on 6.8.2009 21:44 */

/*
 * Copyright (C) 2009 Hrafn Loftsson
 *
 * This file is part of the IceNLP toolkit.
 * IceNLP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * IceNLP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with IceNLP. If not,  see <http://www.gnu.org/licenses/>.
 *
 * Contact information:
 * Hrafn Loftsson, School of Computer Science, Reykjavik University.
 * hrafn@ru.is
 */
 
/* This transducer marks objects of complement adjective phrases */
/* Also marks standalone accusative NP, temporal expressions like 	 */
/* [NP eitt foheo vor nheo NP] as having a *TIMEX function 	 */

package is.iclt.icenlp.flex.iceparser;
import java.io.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6.8.2009 21:44 from the specification file
 * <tt>Func_OBJ3.flex</tt>
 */
public class Func_OBJ3 {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\46\1\0\1\1\1\2\22\0\1\26\11\0\1\32"+
    "\1\0\1\0\1\0\3\0\3\0\10\0\1\41\1\0\1\41\2\0"+
    "\1\20\1\37\1\24\1\0\1\30\3\0\1\43\1\40\1\0\1\35"+
    "\1\27\1\23\1\42\1\21\1\33\1\0\1\25\1\44\1\34\1\0"+
    "\1\0\1\45\2\0\1\17\1\0\1\22\1\0\1\0\1\0\1\14"+
    "\1\0\1\0\1\10\1\6\1\4\1\12\1\3\1\0\1\0\1\3"+
    "\1\0\1\0\1\7\1\5\1\16\2\0\1\13\1\15\1\0\1\3"+
    "\1\0\1\3\2\0\1\31\1\0\1\36\170\0\1\0\7\0\1\11"+
    "\uff01\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\315\0\1\1\47\0\1\3\37\0"+
    "\1\1\24\0\1\3\43\0\2\3\16\0\1\4\1\0"+
    "\1\5\22\0\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[377];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\47\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492"+
    "\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca"+
    "\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702"+
    "\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a"+
    "\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972"+
    "\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa"+
    "\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2"+
    "\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a"+
    "\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52"+
    "\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a"+
    "\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa"+
    "\0\u1221\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332"+
    "\0\u1359\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a"+
    "\0\u1491\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2"+
    "\0\u15c9\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da"+
    "\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\u1812"+
    "\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923\0\u194a"+
    "\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82"+
    "\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba"+
    "\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2"+
    "\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a"+
    "\0\u1e51\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62"+
    "\0\u1f89\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a"+
    "\0\u20c1\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab\0\u21d2"+
    "\0\u21f9\0\u2220\0\u2247\0\u226e\0\u1fd7\0\u2295\0\u22bc\0\u22e3"+
    "\0\u230a\0\u2331\0\u2358\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b"+
    "\0\u2442\0\u2469\0\u2490\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553"+
    "\0\u257a\0\u25a1\0\47\0\u25c8\0\u25ef\0\u2616\0\u263d\0\u2664"+
    "\0\u268b\0\u26b2\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775\0\u279c"+
    "\0\u27c3\0\u27ea\0\u2811\0\u2838\0\u285f\0\u2886\0\u28ad\0\u28d4"+
    "\0\u28fb\0\u2922\0\u2949\0\u2970\0\u2997\0\u29be\0\u29e5\0\u2a0c"+
    "\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf\0\u2af6\0\u2b1d\0\u2b44"+
    "\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0\0\u2c07\0\u2c2e\0\u2c55\0\u2c7c"+
    "\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18\0\u2d3f\0\u2d66\0\u2d8d\0\u0cf3"+
    "\0\u2db4\0\u2ddb\0\u2e02\0\u2e29\0\u2e50\0\u2e77\0\u2e9e\0\u2ec5"+
    "\0\u2eec\0\u2f13\0\u2f3a\0\u2f61\0\u2f88\0\u2faf\0\u2fd6\0\u2ffd"+
    "\0\u3024\0\u304b\0\u3072\0\u3099\0\u30c0\0\u30e7\0\u310e\0\u3135"+
    "\0\u315c\0\u3183\0\u31aa\0\u31d1\0\u31f8\0\u321f\0\u3246\0\u326d"+
    "\0\u3294\0\u32bb\0\u32e2\0\u0eee\0\u1491\0\u3309\0\u3330\0\u3357"+
    "\0\u337e\0\u33a5\0\u33cc\0\u33f3\0\u341a\0\u3441\0\u2a81\0\u3468"+
    "\0\u348f\0\u34b6\0\u34dd\0\47\0\u3504\0\u352b\0\u3552\0\u3579"+
    "\0\u35a0\0\u35c7\0\u35ee\0\u3615\0\u363c\0\u3663\0\u368a\0\u36b1"+
    "\0\u36d8\0\u36ff\0\u3726\0\u374d\0\u3774\0\u379b\0\u37c2\0\u37e9"+
    "\0\47";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[377];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\17\2\1\3\11\2\1\4\14\2\1\5\70\0\1\6"+
    "\1\0\1\7\55\0\1\10\35\0\1\11\46\0\1\12"+
    "\51\0\1\13\1\14\5\0\1\15\6\0\1\16\1\17"+
    "\1\20\2\0\26\11\1\21\20\11\10\0\1\22\2\0"+
    "\1\23\1\24\74\0\1\25\40\0\1\26\46\0\1\27"+
    "\51\0\1\30\51\0\1\31\47\0\1\32\3\0\21\11"+
    "\1\33\4\11\1\21\20\11\23\22\1\34\23\22\1\0"+
    "\1\35\24\0\1\35\20\0\1\36\1\37\1\0\23\36"+
    "\1\37\17\36\30\0\1\40\56\0\1\41\27\0\1\42"+
    "\66\0\1\43\45\0\1\44\36\0\1\45\17\0\21\11"+
    "\1\46\4\11\1\21\20\11\21\22\1\47\1\22\1\34"+
    "\23\22\1\0\1\35\15\0\1\50\6\0\1\35\20\0"+
    "\1\36\1\51\1\0\23\36\1\51\17\36\1\0\1\36"+
    "\1\37\1\0\14\36\1\52\6\36\1\37\17\36\22\0"+
    "\1\53\65\0\1\54\43\0\1\55\31\0\1\56\2\0"+
    "\1\57\15\0\1\60\45\0\1\61\36\0\1\62\16\0"+
    "\22\11\1\2\3\11\1\21\20\11\22\22\1\63\1\34"+
    "\23\22\23\0\1\64\24\0\1\51\2\0\1\65\2\0"+
    "\1\66\5\0\1\67\10\0\1\51\20\0\1\36\1\51"+
    "\1\0\15\36\1\70\5\36\1\51\17\36\1\0\1\71"+
    "\1\72\24\71\1\72\3\71\1\73\6\71\1\74\5\71"+
    "\32\54\1\75\14\54\32\55\1\76\14\55\21\0\1\77"+
    "\67\0\1\100\4\0\32\60\1\101\14\60\41\0\1\102"+
    "\52\0\1\103\2\0\1\104\24\0\1\104\41\0\1\105"+
    "\32\0\1\106\6\0\1\106\35\0\1\107\47\0\1\106"+
    "\1\110\6\0\1\110\1\0\1\110\30\0\1\36\1\51"+
    "\1\0\16\36\1\111\4\36\1\51\17\36\1\0\32\71"+
    "\1\73\15\71\1\72\15\71\1\112\6\71\1\72\3\71"+
    "\1\73\40\71\1\113\5\71\1\73\15\71\1\72\24\71"+
    "\1\72\3\71\1\73\14\71\25\54\1\114\4\54\1\75"+
    "\14\54\32\55\1\76\1\115\13\55\41\0\1\60\34\0"+
    "\1\77\17\0\32\60\1\101\7\60\1\116\4\60\32\102"+
    "\1\117\14\102\32\103\1\120\14\103\1\0\1\104\24\0"+
    "\1\104\2\0\1\121\25\0\1\122\41\0\1\123\47\0"+
    "\1\124\1\0\1\124\41\0\1\125\24\0\1\125\20\0"+
    "\1\111\1\126\1\127\15\111\1\130\5\111\1\126\17\111"+
    "\1\127\20\71\1\131\11\71\1\73\46\71\1\73\7\71"+
    "\1\132\4\71\32\54\1\75\1\54\1\133\12\54\32\55"+
    "\1\76\1\55\1\134\12\55\32\60\1\101\4\60\1\135"+
    "\7\60\32\102\1\117\10\102\1\136\3\102\32\103\1\120"+
    "\11\103\1\137\2\103\32\0\1\140\14\0\23\122\1\141"+
    "\23\122\4\0\1\142\1\0\1\142\45\0\3\143\1\0"+
    "\1\143\35\0\1\144\1\125\1\0\23\144\1\125\17\144"+
    "\1\0\1\127\1\126\2\127\1\145\2\127\1\146\5\127"+
    "\1\147\2\127\1\150\5\127\1\126\40\127\1\150\26\127"+
    "\1\111\1\126\1\127\15\111\1\130\1\151\4\111\1\126"+
    "\17\111\1\127\21\71\1\152\10\71\1\73\43\71\1\153"+
    "\2\71\1\73\14\71\32\54\1\75\4\54\1\154\7\54"+
    "\20\55\1\155\11\55\1\76\14\55\32\60\1\101\5\60"+
    "\1\156\6\60\32\102\1\117\7\102\1\157\4\102\32\103"+
    "\1\120\10\103\1\160\3\103\24\0\1\161\6\0\1\162"+
    "\13\0\21\122\1\163\1\122\1\141\23\122\5\0\3\110"+
    "\1\0\1\110\36\0\1\164\10\0\1\165\13\0\1\164"+
    "\20\0\1\144\1\166\1\0\23\144\1\166\17\144\1\0"+
    "\5\127\1\167\6\127\1\167\3\127\1\150\31\127\1\170"+
    "\14\127\1\150\32\127\1\167\1\171\6\127\1\171\1\127"+
    "\1\171\1\127\1\150\46\127\1\150\1\172\25\127\1\111"+
    "\1\126\1\127\15\111\1\130\1\111\1\173\3\111\1\126"+
    "\17\111\1\127\20\152\1\174\11\152\1\175\14\152\21\71"+
    "\1\176\10\71\1\73\14\71\32\54\1\75\5\54\1\177"+
    "\6\54\32\55\1\76\2\55\1\200\11\55\20\60\1\201"+
    "\2\60\1\202\6\60\1\101\6\60\1\203\5\60\32\102"+
    "\1\117\4\102\1\204\7\102\27\103\1\205\2\103\1\120"+
    "\14\103\42\0\1\206\40\0\1\207\12\0\13\122\1\210"+
    "\7\122\1\141\23\122\1\211\1\164\1\0\23\211\1\164"+
    "\17\211\2\0\1\164\24\0\1\164\21\0\1\166\5\0"+
    "\1\212\16\0\1\166\20\0\3\127\1\213\14\127\1\150"+
    "\32\127\1\214\1\127\1\214\11\127\1\150\27\127\1\215"+
    "\16\127\1\150\5\127\1\215\40\127\1\150\1\127\1\216"+
    "\24\127\1\36\1\217\1\0\23\36\1\217\17\36\1\0"+
    "\20\152\1\174\1\220\10\152\1\175\34\152\1\174\3\152"+
    "\1\221\5\152\1\175\14\152\32\71\1\73\3\71\1\2"+
    "\2\71\1\222\5\71\32\54\1\75\3\54\1\2\2\54"+
    "\1\223\5\54\32\55\1\76\3\55\1\2\10\55\21\60"+
    "\1\224\10\60\1\101\46\60\1\101\7\60\1\225\36\60"+
    "\1\101\3\60\1\2\10\60\32\102\1\117\5\102\1\226"+
    "\6\102\30\103\1\227\1\103\1\120\14\103\27\0\1\230"+
    "\37\0\1\231\26\0\22\122\1\63\1\141\23\122\1\211"+
    "\1\232\1\0\23\211\1\232\17\211\4\0\1\233\43\0"+
    "\4\127\1\234\1\127\1\234\11\127\1\150\33\127\3\235"+
    "\1\127\1\235\6\127\1\150\26\127\1\236\1\215\1\127"+
    "\15\236\1\237\5\236\1\215\17\236\1\127\1\36\1\216"+
    "\1\0\23\36\1\216\17\36\1\0\1\36\1\217\1\0"+
    "\1\36\1\240\2\36\1\241\5\36\1\242\10\36\1\217"+
    "\17\36\1\0\20\152\1\174\1\152\1\243\7\152\1\175"+
    "\34\152\1\174\11\152\1\175\7\152\1\244\4\152\32\71"+
    "\1\73\3\71\1\2\10\71\32\54\1\75\3\54\1\2"+
    "\10\54\32\60\1\101\6\60\1\203\34\60\1\224\2\60"+
    "\1\101\14\60\32\102\1\117\6\102\1\245\5\102\32\103"+
    "\1\120\12\103\1\246\1\103\21\0\1\247\62\0\1\250"+
    "\12\0\1\232\2\0\1\251\10\0\1\252\10\0\1\232"+
    "\24\0\1\253\1\0\1\253\40\0\5\127\3\171\1\127"+
    "\1\171\6\127\1\150\27\127\1\254\10\127\1\255\5\127"+
    "\1\150\5\127\1\254\20\127\1\236\1\256\1\127\15\236"+
    "\1\237\5\236\1\256\17\236\1\127\1\236\1\256\1\127"+
    "\15\236\1\237\1\257\4\236\1\256\17\236\1\127\1\36"+
    "\1\51\1\0\2\36\1\260\6\36\1\260\11\36\1\51"+
    "\17\36\1\0\1\36\1\51\1\0\1\261\22\36\1\51"+
    "\17\36\1\0\1\36\1\51\1\0\1\36\1\260\1\262"+
    "\6\36\1\262\1\36\1\262\7\36\1\51\17\36\1\0"+
    "\1\71\1\263\24\71\1\263\3\71\1\73\14\71\20\152"+
    "\1\174\6\152\1\264\2\152\1\175\14\152\32\102\1\117"+
    "\3\102\1\2\10\102\32\103\1\120\3\103\1\2\10\103"+
    "\1\0\1\265\24\0\1\265\12\0\1\266\5\0\32\250"+
    "\1\267\14\250\5\0\1\270\6\0\1\270\36\0\1\270"+
    "\1\271\6\0\1\271\1\0\1\271\35\0\3\272\1\0"+
    "\1\272\35\0\1\273\1\254\1\127\15\273\1\274\5\273"+
    "\1\254\17\273\2\127\1\254\16\127\1\150\5\127\1\254"+
    "\21\127\1\256\5\127\1\275\10\127\1\150\5\127\1\256"+
    "\20\127\1\236\1\256\1\127\15\236\1\237\1\236\1\276"+
    "\3\236\1\256\17\236\1\127\1\36\1\51\1\0\1\277"+
    "\22\36\1\51\17\36\1\0\1\36\1\51\1\0\1\36"+
    "\1\300\1\36\1\300\17\36\1\51\17\36\1\0\1\36"+
    "\1\301\1\0\23\36\1\301\17\36\1\0\1\71\1\263"+
    "\24\71\1\263\3\71\1\302\14\71\20\152\1\174\1\303"+
    "\10\152\1\175\14\152\1\0\1\265\15\0\1\304\6\0"+
    "\1\265\21\0\1\265\24\0\1\265\20\0\32\250\1\267"+
    "\1\305\13\250\3\0\1\306\44\0\1\307\24\0\1\307"+
    "\21\0\1\307\10\0\1\271\13\0\1\307\20\0\1\273"+
    "\1\310\1\127\15\273\1\274\5\273\1\310\17\273\1\127"+
    "\1\273\1\310\1\127\15\273\1\274\1\311\4\273\1\310"+
    "\17\273\4\127\1\312\14\127\1\150\26\127\1\313\1\314"+
    "\1\0\23\313\1\314\17\313\1\0\1\36\1\51\1\0"+
    "\1\36\1\315\1\36\1\315\17\36\1\51\17\36\1\0"+
    "\1\36\1\51\1\0\2\36\3\316\1\36\1\316\14\36"+
    "\1\51\17\36\1\0\1\144\1\301\1\0\1\144\1\317"+
    "\2\144\1\320\5\144\1\321\10\144\1\301\17\144\1\0"+
    "\24\71\1\322\5\71\1\73\14\71\20\152\1\174\11\152"+
    "\1\175\3\152\1\323\2\152\1\324\5\152\20\0\1\325"+
    "\26\0\32\250\1\267\1\250\1\326\12\250\4\0\1\327"+
    "\1\0\1\327\41\0\1\307\21\0\1\330\2\0\1\307"+
    "\20\0\1\127\1\310\2\127\1\331\10\127\1\332\2\127"+
    "\1\150\5\127\1\310\20\127\1\273\1\310\1\127\15\273"+
    "\1\274\1\273\1\333\3\273\1\310\17\273\5\127\1\334"+
    "\1\127\1\334\11\127\1\150\26\127\1\313\1\335\1\0"+
    "\23\313\1\335\17\313\1\0\1\36\1\314\1\0\4\36"+
    "\1\336\16\36\1\314\17\36\1\0\1\36\1\51\1\0"+
    "\2\36\3\262\1\36\1\262\14\36\1\51\17\36\1\0"+
    "\1\36\1\337\1\0\7\36\1\340\13\36\1\337\17\36"+
    "\1\0\1\144\1\166\1\0\2\144\1\341\6\144\1\341"+
    "\11\144\1\166\17\144\1\0\1\144\1\166\1\0\1\342"+
    "\22\144\1\166\17\144\1\0\1\144\1\166\1\0\1\144"+
    "\1\341\1\343\6\144\1\343\1\144\1\343\7\144\1\166"+
    "\17\144\1\0\32\71\1\73\7\71\1\344\4\71\20\345"+
    "\1\346\26\345\20\152\1\174\11\152\1\175\3\152\1\323"+
    "\10\152\21\0\1\347\25\0\20\250\1\350\11\250\1\267"+
    "\14\250\5\0\3\271\1\0\1\271\56\0\1\351\25\0"+
    "\5\127\1\352\6\127\1\352\3\127\1\150\32\127\1\352"+
    "\1\353\6\127\1\353\1\127\1\353\1\127\1\150\26\127"+
    "\1\354\1\355\1\0\23\354\1\355\17\354\1\0\5\127"+
    "\3\356\1\127\1\356\6\127\1\150\26\127\1\0\1\335"+
    "\2\0\1\65\2\0\1\357\5\0\1\67\10\0\1\335"+
    "\20\0\1\36\1\51\1\0\1\360\22\36\1\51\17\36"+
    "\1\0\1\211\1\337\1\0\1\211\1\361\2\211\1\362"+
    "\5\211\1\363\10\211\1\337\17\211\1\0\1\36\1\337"+
    "\1\0\23\36\1\337\17\36\1\0\1\144\1\166\1\0"+
    "\1\364\22\144\1\166\17\144\1\0\1\144\1\166\1\0"+
    "\1\144\1\365\1\144\1\365\17\144\1\166\17\144\1\0"+
    "\1\144\1\366\1\0\23\144\1\366\17\144\1\0\27\71"+
    "\1\367\2\71\1\73\14\71\20\345\1\346\1\370\25\345"+
    "\20\347\1\371\26\347\32\250\1\267\2\250\1\372\11\250"+
    "\22\0\1\373\24\0\3\127\1\374\14\127\1\150\27\127"+
    "\1\375\16\127\1\150\5\127\1\375\20\127\1\354\1\376"+
    "\1\0\23\354\1\376\17\354\1\0\1\36\1\355\1\0"+
    "\1\36\1\377\10\36\1\u0100\10\36\1\355\17\36\1\0"+
    "\1\127\1\375\10\127\1\353\5\127\1\150\5\127\1\375"+
    "\20\127\3\0\1\u0101\43\0\1\36\1\51\1\0\1\36"+
    "\1\u0102\1\36\1\u0102\17\36\1\51\17\36\1\0\1\211"+
    "\1\232\1\0\2\211\1\u0103\6\211\1\u0103\11\211\1\232"+
    "\17\211\1\0\1\211\1\232\1\0\1\u0104\22\211\1\232"+
    "\17\211\1\0\1\211\1\232\1\0\1\211\1\u0103\1\u0105"+
    "\6\211\1\u0105\1\211\1\u0105\7\211\1\232\17\211\1\0"+
    "\1\144\1\166\1\0\1\144\1\u0106\1\144\1\u0106\17\144"+
    "\1\166\17\144\1\0\1\144\1\166\1\0\2\144\3\u0107"+
    "\1\144\1\u0107\14\144\1\166\17\144\1\0\1\144\1\366"+
    "\1\0\4\144\1\u0108\16\144\1\366\17\144\1\0\21\71"+
    "\1\u0109\10\71\1\73\14\71\20\345\1\346\1\345\1\u010a"+
    "\24\345\20\347\1\371\1\u010b\25\347\32\250\1\267\3\250"+
    "\1\u010c\10\250\4\127\1\u010d\1\127\1\u010d\11\127\1\150"+
    "\27\127\1\375\16\127\1\150\2\127\1\u010e\2\127\1\375"+
    "\20\127\1\0\1\376\2\0\1\u010f\2\0\1\66\5\0"+
    "\1\u0110\10\0\1\376\20\0\1\36\1\51\1\0\2\36"+
    "\1\u0111\6\36\1\u0111\11\36\1\51\17\36\1\0\1\36"+
    "\1\51\1\0\1\36\1\u0111\1\u0112\6\36\1\u0112\1\36"+
    "\1\u0112\7\36\1\51\17\36\5\0\1\u0113\1\0\1\u0113"+
    "\40\0\1\36\1\51\1\0\2\36\3\u0114\1\36\1\u0114"+
    "\14\36\1\51\17\36\1\0\1\211\1\232\1\0\1\u0115"+
    "\22\211\1\232\17\211\1\0\1\211\1\232\1\0\1\211"+
    "\1\u0116\1\211\1\u0116\17\211\1\232\17\211\1\0\1\211"+
    "\1\u0117\1\0\23\211\1\u0117\17\211\1\0\1\144\1\166"+
    "\1\0\2\144\3\343\1\144\1\343\14\144\1\166\17\144"+
    "\1\0\1\144\1\u0118\1\0\7\144\1\u0119\13\144\1\u0118"+
    "\17\144\1\0\1\144\1\166\1\0\1\u011a\22\144\1\166"+
    "\17\144\1\0\32\71\1\73\3\71\1\u011b\2\71\1\u011c"+
    "\5\71\1\0\1\u011d\24\0\1\u011d\20\0\20\347\1\371"+
    "\1\347\1\u011e\24\347\1\0\1\u011f\24\0\1\u011f\20\0"+
    "\5\127\3\353\1\127\1\353\6\127\1\150\46\127\1\150"+
    "\1\u0120\25\127\5\0\1\u0121\6\0\1\u0121\36\0\1\u0121"+
    "\1\u0122\6\0\1\u0122\1\0\1\u0122\30\0\1\36\1\51"+
    "\1\0\1\u0123\22\36\1\51\17\36\1\0\1\36\1\u0124"+
    "\1\0\23\36\1\u0124\17\36\6\0\3\u0125\1\0\1\u0125"+
    "\35\0\1\36\1\u0124\1\0\7\36\1\u0112\13\36\1\u0124"+
    "\17\36\1\0\1\211\1\232\1\0\1\211\1\u0126\1\211"+
    "\1\u0126\17\211\1\232\17\211\1\0\1\211\1\232\1\0"+
    "\2\211\3\u0127\1\211\1\u0127\14\211\1\232\17\211\1\0"+
    "\1\144\1\u0117\1\0\1\144\1\u0128\10\144\1\u0129\10\144"+
    "\1\u0117\17\144\1\0\1\211\1\u0118\1\0\4\211\1\u012a"+
    "\16\211\1\u0118\17\211\1\0\1\144\1\u0118\1\0\23\144"+
    "\1\u0118\17\144\1\0\1\144\1\166\1\0\1\144\1\u012b"+
    "\1\144\1\u012b\17\144\1\166\17\144\2\0\1\u012c\24\0"+
    "\1\u012c\20\0\32\71\1\73\3\71\1\u011b\10\71\1\0"+
    "\1\u011d\24\0\1\u011d\3\0\1\u012d\15\0\1\u012e\24\0"+
    "\1\u012e\21\0\1\u011f\24\0\1\u011f\2\0\1\u012f\15\0"+
    "\20\127\1\150\1\127\1\u0130\24\127\3\0\1\u0131\44\0"+
    "\1\u0132\24\0\1\u0132\20\0\1\36\1\51\1\0\1\36"+
    "\1\u0133\1\36\1\u0133\17\36\1\51\17\36\2\0\1\u0124"+
    "\2\0\1\65\2\0\1\66\5\0\1\67\5\0\1\330"+
    "\2\0\1\u0124\21\0\1\u0134\10\0\1\u0135\13\0\1\u0134"+
    "\20\0\1\211\1\232\1\0\2\211\3\u0105\1\211\1\u0105"+
    "\14\211\1\232\17\211\1\0\1\211\1\u0136\1\0\7\211"+
    "\1\u0137\13\211\1\u0136\17\211\1\0\1\144\1\166\1\0"+
    "\2\144\1\u0138\6\144\1\u0138\11\144\1\166\17\144\1\0"+
    "\1\144\1\166\1\0\1\144\1\u0138\1\u0139\6\144\1\u0139"+
    "\1\144\1\u0139\7\144\1\166\17\144\1\0\1\211\1\232"+
    "\1\0\1\u013a\22\211\1\232\17\211\1\0\1\144\1\166"+
    "\1\0\2\144\3\u013b\1\144\1\u013b\14\144\1\166\17\144"+
    "\2\0\1\u012c\15\0\1\u013c\6\0\1\u012c\44\0\1\u013d"+
    "\23\0\1\u012e\24\0\1\u012e\3\0\1\u013e\46\0\1\u013f"+
    "\20\0\1\u0140\1\0\1\u0140\40\0\1\144\1\u0132\1\0"+
    "\20\144\1\u0141\2\144\1\u0132\17\144\1\0\1\36\1\51"+
    "\1\0\2\36\3\u0112\1\36\1\u0112\14\36\1\51\17\36"+
    "\1\0\1\211\1\u0134\1\0\20\211\1\u0142\2\211\1\u0134"+
    "\17\211\2\0\1\u0134\24\0\1\u0134\20\0\1\211\1\u0136"+
    "\1\0\1\211\1\u0143\10\211\1\u0144\10\211\1\u0136\17\211"+
    "\1\0\1\211\1\u0136\1\0\23\211\1\u0136\17\211\1\0"+
    "\1\144\1\166\1\0\1\u0145\22\144\1\166\17\144\1\0"+
    "\1\144\1\u0146\1\0\23\144\1\u0146\17\144\1\0\1\211"+
    "\1\232\1\0\1\211\1\u0147\1\211\1\u0147\17\211\1\232"+
    "\17\211\1\0\1\144\1\u0146\1\0\7\144\1\u0139\13\144"+
    "\1\u0146\17\144\24\0\1\u0148\65\0\1\u0149\30\0\1\u014a"+
    "\46\0\1\161\27\0\3\u0122\1\0\1\u0122\35\0\1\144"+
    "\1\166\1\0\16\144\1\u014b\4\144\1\166\17\144\1\0"+
    "\1\211\1\232\1\0\16\211\1\u014c\4\211\1\232\17\211"+
    "\1\0\1\211\1\232\1\0\2\211\1\u014d\6\211\1\u014d"+
    "\11\211\1\232\17\211\1\0\1\211\1\232\1\0\1\211"+
    "\1\u014d\1\u014e\6\211\1\u014e\1\211\1\u014e\7\211\1\232"+
    "\17\211\1\0\1\144\1\166\1\0\1\144\1\u014f\1\144"+
    "\1\u014f\17\144\1\166\17\144\2\0\1\u0146\5\0\1\212"+
    "\13\0\1\330\2\0\1\u0146\20\0\1\211\1\232\1\0"+
    "\2\211\3\u0150\1\211\1\u0150\14\211\1\232\17\211\22\0"+
    "\1\u0151\54\0\1\u0152\61\0\1\u0153\4\0\1\144\1\166"+
    "\1\0\17\144\1\u0154\3\144\1\166\17\144\1\0\1\211"+
    "\1\232\1\0\17\211\1\u0155\3\211\1\232\17\211\1\0"+
    "\1\211\1\232\1\0\1\u0156\22\211\1\232\17\211\1\0"+
    "\1\211\1\u0157\1\0\23\211\1\u0157\17\211\1\0\1\144"+
    "\1\166\1\0\2\144\3\u0139\1\144\1\u0139\14\144\1\166"+
    "\17\144\1\0\1\211\1\u0157\1\0\7\211\1\u014e\13\211"+
    "\1\u0157\17\211\11\0\1\u0158\2\0\1\u0159\54\0\1\u015a"+
    "\54\0\1\u015b\17\0\1\211\1\232\1\0\1\211\1\u015c"+
    "\1\211\1\u015c\17\211\1\232\17\211\2\0\1\u0157\2\0"+
    "\1\251\10\0\1\252\5\0\1\330\2\0\1\u0157\20\0"+
    "\23\u0158\1\u015d\23\u0158\1\0\1\u015e\24\0\1\u015e\56\0"+
    "\1\u015f\2\0\1\u0160\26\0\1\u0161\25\0\1\211\1\232"+
    "\1\0\2\211\3\u014e\1\211\1\u014e\14\211\1\232\17\211"+
    "\1\0\21\u0158\1\u0162\1\u0158\1\u015d\23\u0158\1\0\1\u015e"+
    "\15\0\1\u0163\6\0\1\u015e\56\0\1\u015f\46\0\1\u0164"+
    "\2\0\1\u0165\5\0\22\u0158\1\u0166\1\u015d\23\u0158\23\0"+
    "\1\u0167\61\0\1\u0164\11\0\1\u0168\24\0\1\u0168\41\0"+
    "\1\u0169\26\0\1\u0168\24\0\1\u0168\2\0\1\u016a\25\0"+
    "\1\u016b\70\0\1\u016c\14\0\23\u016b\1\u016d\23\u016b\33\0"+
    "\1\u016e\13\0\21\u016b\1\u016f\1\u016b\1\u016d\23\u016b\34\0"+
    "\1\u0170\12\0\13\u016b\1\u0171\7\u016b\1\u016d\23\u016b\20\0"+
    "\1\u0172\26\0\22\u016b\1\u0166\1\u016d\23\u016b\35\0\1\u0173"+
    "\11\0\32\u0173\1\u0174\46\u0173\1\u0174\1\u0175\45\u0173\1\u0174"+
    "\1\u0173\1\u0176\32\u0173\1\u0177\11\u0173\1\u0174\46\u0173\1\u0174"+
    "\2\u0173\1\u0178\43\u0173\1\u0174\3\u0173\1\u0179\10\u0173";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\315\0\1\1\47\0\1\11"+
    "\37\0\1\1\24\0\1\1\43\0\2\1\16\0\1\11"+
    "\1\0\1\1\22\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[377];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  
  String ObjAP1Open=" {*OBJAP< ";
  String ObjAP1Close=" *OBJAP<} ";
  String ObjAP2Open=" {*OBJAP> ";
  String ObjAP2Close=" *OBJAP>} ";  
  
  String TempOpen = " {*TIMEX ";
  String TempClose=" *TIMEX} ";  
  
  int theIndex = 0;
  
  //java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out, "UTF-8"));
  java.io.Writer out = new BufferedWriter(new OutputStreamWriter(System.out));
      
  public void parse(java.io.Writer _out) throws java.io.IOException
  {
      	out = _out;
      	while (!zzAtEOF) 
      	    yylex();
  }
  
  


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Func_OBJ3(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Func_OBJ3(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try {
	  out.flush();	
	} 
	catch (IOException e) {
            e.printStackTrace();
        }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { /* Find where the Complement function ended and insert the OBJ label */
			theIndex = StringSearch.splitString(yytext(),"*COMP<}", true, 7);		
			if (theIndex == -1)
				theIndex = StringSearch.splitString(yytext(),"*COMP}", true, 6);			
			out.write(StringSearch.firstString+ObjAP1Open+StringSearch.nextString+ObjAP1Close);
          }
        case 6: break;
        case 4: 
          { /* Find where the Complement function started and insert the OBJ label */
			theIndex = StringSearch.splitString(yytext(),"{*COMP<", true, -1);		
			if (theIndex == -1)
				theIndex = StringSearch.splitString(yytext(),"{*COMP", true, -1);			
			out.write(ObjAP2Open+StringSearch.firstString+ObjAP2Close+StringSearch.nextString);
          }
        case 7: break;
        case 3: 
          { out.write(TempOpen+yytext()+TempClose);
          }
        case 8: break;
        case 1: 
          { out.write(yytext());
          }
        case 9: break;
        case 2: 
          { //System.err.print("Reading line: " + Integer.toString(yyline+1) + "\r"); 
			out.write("\n");
          }
        case 10: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Func_OBJ3 <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Func_OBJ3 scanner = null;
        try {
          scanner = new Func_OBJ3( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
