/* The following code was generated by JFlex 1.6.1 */

package is.iclt.icenlp.core.icestagger;
import java.util.*;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>SwedishTokenizer.flex</tt>
 */
public class SwedishTokenizer extends Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\1\112\1\112\1\14\22\0\1\102\1\52\1\54"+
    "\1\30\1\37\1\31\1\30\1\36\1\46\1\42\1\54\1\31\1\51"+
    "\1\27\1\26\1\24\1\20\2\111\1\45\6\20\1\6\1\34\1\44"+
    "\1\41\1\50\1\53\1\32\1\101\1\104\1\75\1\5\1\72\1\23"+
    "\1\100\1\21\1\11\1\33\1\107\1\105\1\76\1\73\1\40\1\22"+
    "\1\33\1\77\1\10\1\3\1\74\1\110\1\25\1\103\1\47\1\33"+
    "\1\1\1\30\1\12\1\43\1\7\1\54\1\101\1\104\1\75\1\5"+
    "\1\72\1\23\1\100\1\21\1\11\1\33\1\107\1\105\1\76\1\73"+
    "\1\40\1\22\1\33\1\77\1\10\1\3\1\74\1\110\1\25\1\35"+
    "\1\47\1\33\3\54\1\30\6\0\1\16\32\0\1\13\37\54\27\57"+
    "\1\54\37\57\1\54\70\57\2\4\115\57\1\2\u01f0\0\220\60\u0200\0"+
    "\140\61\12\62\206\61\12\62\6\61\120\0\60\61\100\0\12\17\u0136\0"+
    "\146\63\12\64\20\63\146\0\12\17\166\0\12\17\166\0\12\17\166\0"+
    "\12\17\166\0\12\17\166\0\12\17\166\0\12\17\166\0\12\17\166\0"+
    "\12\17\140\0\12\17\166\0\12\17\106\0\12\17\u0116\0\12\17\106\0"+
    "\12\17\146\0\u0100\66\u05e0\0\12\17\46\0\12\17\u012c\0\12\17\200\0"+
    "\12\17\246\0\12\17\6\0\12\17\266\0\12\17\126\0\12\17\206\0"+
    "\12\17\6\0\12\17\166\0\60\63\u0200\0\u0100\60\16\13\2\0\30\54"+
    "\1\56\1\56\33\54\345\0\1\106\u0ed5\0\1\55\37\54\40\0\300\65"+
    "\60\0\140\66\u0270\0\u19c0\67\100\0\u5200\67\u0620\0\12\17\u02a6\0\12\17"+
    "\6\0\40\63\12\17\126\0\40\66\120\0\12\17\26\0\12\17\126\0"+
    "\12\17\u0196\0\12\17\u2bb6\0\120\66\100\71\60\70\u0790\71\u1b50\0\u02b0\61"+
    "\160\0\220\61\20\0\12\17\113\0\73\65\u0500\0\12\17\u0bbc\0\12\17"+
    "\200\0\12\17\74\0\12\17\220\0\12\17\u0116\0\12\17\u01d6\0\12\17"+
    "\u0176\0\12\17\146\0\12\17\u0216\0\12\17\u5176\0\12\17\346\0\12\17"+
    "\u6c74\0\62\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u280f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\2\2\2\3\1\2\1\4"+
    "\1\0\1\5\2\6\2\3\1\2\1\3\1\7\2\2"+
    "\1\3\1\2\1\3\6\2\1\7\2\2\1\10\1\11"+
    "\1\6\1\12\1\6\1\13\1\14\1\15\1\1\4\3"+
    "\1\6\2\0\1\3\2\0\1\3\1\0\1\3\1\0"+
    "\2\3\1\0\1\16\1\0\1\3\1\16\2\0\1\16"+
    "\1\2\1\0\1\17\1\0\1\20\3\0\1\6\2\3"+
    "\1\0\1\3\2\0\2\3\1\6\1\0\1\2\1\0"+
    "\1\16\1\3\2\0\1\3\1\0\1\3\2\0\1\16"+
    "\1\0\1\16\1\2\1\0\1\16\1\0\3\3\2\0"+
    "\1\3\2\0\1\3\1\0\2\3\14\0\3\6\1\3"+
    "\3\0\2\3\1\16\2\0\1\3\1\16\4\0\1\16"+
    "\1\3\4\0\1\6\1\0\1\3\2\21\1\0\1\3"+
    "\5\0\1\3\1\0\1\3\4\0\1\3\2\0\1\21"+
    "\1\0\1\22\2\0\1\21\2\0\1\22\2\21\1\23"+
    "\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\113\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a"+
    "\0\u0465\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u0627\0\u0672"+
    "\0\u06bd\0\u0708\0\u0753\0\u079e\0\u07e9\0\u0834\0\u087f\0\u08ca"+
    "\0\u0915\0\u02ee\0\u0384\0\u0960\0\u09ab\0\u09f6\0\u0a41\0\u0a8c"+
    "\0\113\0\113\0\113\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03"+
    "\0\u0c4e\0\u0c99\0\u0ce4\0\u0d2f\0\u0d7a\0\u020d\0\u0dc5\0\u0e10"+
    "\0\u0e5b\0\u0ea6\0\u0ef1\0\u0f3c\0\u0f87\0\u0ce4\0\u0fd2\0\u101d"+
    "\0\113\0\u06bd\0\u079e\0\u1068\0\u1068\0\u10b3\0\u02ee\0\u10fe"+
    "\0\u1149\0\u1194\0\u11df\0\u122a\0\u0dc5\0\u1275\0\u12c0\0\u130b"+
    "\0\u1356\0\u13a1\0\u13ec\0\u1437\0\u1482\0\u14cd\0\u1518\0\u1563"+
    "\0\u1068\0\u15ae\0\u15f9\0\u1644\0\u168f\0\u16da\0\u1725\0\u1770"+
    "\0\u17bb\0\u1806\0\u0753\0\u1851\0\u07e9\0\u189c\0\u18e7\0\u1932"+
    "\0\u197d\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1b3f\0\u1b8a"+
    "\0\u1bd5\0\113\0\u1c20\0\u0d7a\0\u1c6b\0\u1cb6\0\u1d01\0\u1d4c"+
    "\0\u1d97\0\u1de2\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4"+
    "\0\u1fef\0\u1194\0\u1c20\0\u122a\0\u203a\0\u2085\0\u20d0\0\u211b"+
    "\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292\0\u22dd\0\u020d\0\u2328"+
    "\0\u2373\0\u23be\0\u2409\0\u2454\0\u0fd2\0\u249f\0\u24ea\0\u2535"+
    "\0\u2580\0\u1c6b\0\u25cb\0\u2616\0\113\0\u020d\0\u2661\0\u26ac"+
    "\0\u26f7\0\u2742\0\u278d\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904"+
    "\0\u294f\0\u299a\0\u29e5\0\u2a30\0\u020d\0\u2a7b\0\u2ac6\0\u2b11"+
    "\0\u2b5c\0\u2ba7\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u2d1e\0\u2d69"+
    "\0\u2db4\0\u2dff\0\113\0\u1e78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\2\16\1\17\1\20"+
    "\1\21\1\6\1\22\1\23\1\24\1\25\1\26\1\13"+
    "\1\10\1\13\1\12\1\27\1\30\1\13\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\20\1\37\1\12\1\13"+
    "\1\40\2\41\1\13\1\42\1\43\1\4\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\2"+
    "\1\55\2\12\1\56\1\57\3\12\1\14\1\12\1\60"+
    "\1\12\1\2\2\12\1\61\116\0\1\62\5\0\1\62"+
    "\104\0\4\4\1\63\1\0\2\4\6\0\4\4\1\0"+
    "\1\4\1\0\1\64\3\0\1\4\1\0\1\4\1\65"+
    "\1\0\1\4\4\0\1\4\1\0\1\4\7\0\1\4"+
    "\12\0\10\4\1\0\3\4\1\0\3\4\3\0\1\4"+
    "\1\12\1\4\1\12\1\63\1\66\2\12\6\0\1\67"+
    "\3\12\1\0\1\12\1\70\1\71\1\0\1\66\1\72"+
    "\1\12\1\0\1\12\1\65\1\0\1\73\4\0\1\67"+
    "\1\0\1\12\7\0\1\4\12\0\1\74\7\12\1\75"+
    "\3\12\1\0\2\12\1\67\3\0\1\4\1\12\1\4"+
    "\1\6\1\76\1\66\1\11\1\12\6\0\1\67\1\12"+
    "\1\6\1\12\1\0\1\12\1\77\1\100\1\0\1\66"+
    "\1\72\1\12\1\101\1\12\1\65\1\102\1\12\1\101"+
    "\1\103\2\0\1\67\1\103\1\12\7\0\1\4\12\0"+
    "\10\12\1\0\3\12\1\0\2\12\1\67\6\0\1\104"+
    "\2\0\1\104\11\0\1\104\4\0\1\105\6\0\1\106"+
    "\1\104\1\101\1\0\1\104\3\0\1\104\47\0\1\66"+
    "\1\0\1\66\1\0\3\66\6\0\4\66\1\0\3\66"+
    "\1\0\1\66\1\72\1\66\1\0\1\66\2\0\1\66"+
    "\4\0\1\66\1\0\1\66\22\0\10\66\1\0\3\66"+
    "\1\0\3\66\3\0\1\4\1\12\1\4\1\11\1\76"+
    "\1\66\1\11\1\12\6\0\1\67\1\12\1\11\1\12"+
    "\1\0\1\12\1\77\1\100\1\0\1\66\1\72\1\12"+
    "\1\101\1\12\1\65\1\102\1\12\1\0\1\102\2\0"+
    "\1\67\1\102\1\12\7\0\1\4\12\0\10\12\1\0"+
    "\3\12\1\0\2\12\1\67\3\0\1\4\1\12\1\4"+
    "\1\12\1\63\1\66\2\12\6\0\1\67\3\12\1\0"+
    "\1\12\1\77\1\71\1\0\1\66\1\72\1\12\1\0"+
    "\1\12\1\65\1\0\1\12\4\0\1\67\1\0\1\12"+
    "\7\0\1\4\12\0\10\12\1\0\3\12\1\0\2\12"+
    "\1\67\14\0\1\107\1\15\2\16\36\0\1\107\1\16"+
    "\23\0\1\107\25\0\1\16\110\0\1\16\1\110\2\111"+
    "\36\0\1\16\1\111\23\0\1\16\27\0\2\17\5\0"+
    "\1\112\16\0\1\17\3\0\1\112\10\0\1\17\1\0"+
    "\1\17\24\0\1\17\3\0\1\4\1\67\1\4\1\67"+
    "\1\113\1\66\2\67\5\0\1\17\1\20\3\67\1\0"+
    "\1\67\1\114\1\71\1\0\1\66\1\72\1\67\1\0"+
    "\1\67\1\65\1\0\1\67\4\0\1\20\1\0\1\67"+
    "\1\0\1\112\5\0\1\4\2\0\1\17\1\0\1\17"+
    "\5\0\1\115\7\67\1\0\3\67\1\0\2\67\1\61"+
    "\3\0\1\4\1\116\1\4\1\12\1\63\1\66\2\12"+
    "\6\0\1\67\3\12\1\0\1\12\1\77\1\71\1\0"+
    "\1\66\1\72\1\12\1\0\1\12\1\65\1\0\1\12"+
    "\4\0\1\67\1\0\1\12\7\0\1\4\12\0\10\12"+
    "\1\0\3\12\1\0\2\12\1\67\3\0\1\4\1\117"+
    "\1\4\1\12\1\63\1\66\2\12\6\0\1\67\3\12"+
    "\1\0\1\12\1\120\1\71\1\0\1\66\1\72\1\12"+
    "\1\0\1\12\1\65\1\0\1\12\4\0\1\67\1\0"+
    "\1\12\7\0\1\4\12\0\5\12\1\121\2\12\1\122"+
    "\3\12\1\123\1\124\1\12\1\67\25\0\1\23\70\0"+
    "\1\4\1\12\1\4\1\12\1\63\1\66\2\12\6\0"+
    "\1\67\3\12\1\0\1\125\1\77\1\71\1\0\1\66"+
    "\1\72\1\12\1\0\1\12\1\65\1\0\1\12\4\0"+
    "\1\67\1\0\1\12\7\0\1\4\12\0\10\12\1\0"+
    "\3\12\1\0\2\12\1\67\4\0\1\66\1\0\1\66"+
    "\1\0\3\66\6\0\4\66\1\0\1\66\1\25\1\66"+
    "\1\0\1\66\1\72\1\66\1\0\1\66\2\0\1\66"+
    "\4\0\1\66\1\0\1\66\2\0\2\41\16\0\10\66"+
    "\1\0\3\66\1\0\3\66\4\0\1\66\1\0\1\66"+
    "\1\0\3\66\5\0\1\17\1\126\3\66\1\0\2\66"+
    "\1\127\1\0\1\66\1\72\1\66\1\0\1\66\2\0"+
    "\1\66\4\0\1\126\1\0\1\66\1\130\11\0\1\17"+
    "\1\0\1\17\5\0\10\66\1\0\3\66\1\0\2\66"+
    "\1\126\6\0\1\104\2\0\1\104\11\0\1\104\4\0"+
    "\1\131\6\0\1\106\1\104\1\101\1\0\1\104\3\0"+
    "\1\104\46\0\1\4\1\12\1\4\1\132\1\63\1\66"+
    "\1\132\1\12\6\0\1\67\1\12\1\132\1\12\1\0"+
    "\1\12\1\77\1\133\1\0\1\66\1\72\1\12\1\0"+
    "\1\12\1\134\1\104\1\12\1\0\1\104\2\0\1\67"+
    "\1\104\1\12\7\0\1\4\12\0\10\12\1\0\3\12"+
    "\1\0\2\12\1\67\6\0\1\102\1\101\1\0\1\102"+
    "\11\0\1\102\4\0\1\135\4\0\1\101\2\0\1\102"+
    "\2\0\1\102\3\0\1\102\46\0\1\136\1\12\1\4"+
    "\1\12\1\63\1\137\1\140\1\12\6\0\1\67\3\12"+
    "\1\0\1\12\1\141\1\71\1\0\1\66\1\72\1\12"+
    "\1\0\1\12\1\65\1\0\1\12\4\0\1\67\1\0"+
    "\1\12\7\0\1\4\12\0\10\12\1\142\3\12\1\0"+
    "\2\12\1\67\6\0\1\143\14\0\1\143\17\0\1\143"+
    "\3\0\1\143\51\0\1\103\1\101\1\0\1\102\11\0"+
    "\1\103\4\0\1\135\4\0\1\101\2\0\1\102\1\0"+
    "\1\101\1\103\3\0\1\103\53\0\1\144\33\0\1\145"+
    "\76\0\1\146\14\0\1\147\1\150\52\0\1\103\1\101"+
    "\1\0\1\102\11\0\1\103\4\0\1\135\4\0\1\101"+
    "\2\0\1\102\1\0\1\101\1\103\3\0\1\103\1\151"+
    "\114\0\1\40\113\0\2\41\117\0\1\44\113\0\2\45"+
    "\47\0\2\17\5\0\1\112\16\0\1\17\3\0\1\112"+
    "\7\0\1\45\1\46\1\0\1\17\24\0\1\17\64\0"+
    "\2\47\45\0\2\17\5\0\1\112\16\0\1\17\3\0"+
    "\1\112\10\0\1\17\1\47\1\50\24\0\1\17\71\0"+
    "\2\53\23\0\1\4\1\152\1\4\1\12\1\63\1\66"+
    "\2\12\6\0\1\67\3\12\1\0\1\12\1\120\1\71"+
    "\1\0\1\66\1\72\1\12\1\0\1\12\1\65\1\0"+
    "\1\12\4\0\1\67\1\0\1\12\7\0\1\4\12\0"+
    "\10\12\1\122\3\12\1\123\1\124\1\12\1\67\3\0"+
    "\1\4\1\12\1\4\1\12\1\63\1\66\2\12\6\0"+
    "\1\67\3\12\1\0\1\12\1\77\1\71\1\0\1\66"+
    "\1\72\1\12\1\0\1\12\1\65\1\0\1\12\4\0"+
    "\1\67\1\0\1\12\7\0\1\4\12\0\7\12\1\153"+
    "\1\0\3\12\1\0\2\12\1\67\3\0\1\4\1\12"+
    "\1\4\1\12\1\63\1\66\2\12\6\0\1\67\2\12"+
    "\1\154\1\0\1\12\1\155\1\71\1\0\1\66\1\72"+
    "\1\12\1\0\1\12\1\65\1\0\1\12\4\0\1\67"+
    "\1\0\1\12\7\0\1\4\12\0\10\12\1\156\3\12"+
    "\1\0\2\12\1\67\3\0\1\4\1\12\1\4\1\12"+
    "\1\63\1\66\2\12\6\0\1\67\3\12\1\0\1\12"+
    "\1\77\1\71\1\0\1\66\1\72\1\12\1\0\1\12"+
    "\1\65\1\0\1\12\4\0\1\67\1\0\1\12\7\0"+
    "\1\4\12\0\10\12\1\0\2\12\1\157\1\0\2\12"+
    "\1\67\3\0\1\4\1\67\1\4\1\67\1\160\1\66"+
    "\2\67\5\0\1\17\1\20\3\67\1\0\1\67\1\114"+
    "\1\71\1\0\1\66\1\72\1\67\1\0\1\67\1\65"+
    "\1\0\1\67\4\0\1\20\1\0\1\67\1\0\1\112"+
    "\5\0\1\4\2\0\1\17\1\0\1\17\5\0\1\115"+
    "\6\67\1\115\1\0\3\67\1\0\2\67\1\61\4\0"+
    "\1\161\111\0\1\162\5\0\1\162\61\0\1\163\1\164"+
    "\5\0\1\165\13\0\4\4\2\0\2\4\6\0\4\4"+
    "\1\0\1\4\5\0\1\4\1\0\1\4\2\0\1\4"+
    "\4\0\1\4\1\0\1\4\7\0\1\4\12\0\10\4"+
    "\1\0\3\4\1\0\3\4\3\0\1\162\5\0\1\162"+
    "\104\0\1\4\1\67\1\4\1\67\1\63\1\66\2\67"+
    "\6\0\4\67\1\0\1\67\1\66\1\71\1\0\1\66"+
    "\1\72\1\67\1\0\1\67\1\65\1\0\1\67\4\0"+
    "\1\67\1\0\1\67\7\0\1\4\12\0\10\67\1\0"+
    "\3\67\1\0\3\67\3\0\1\166\1\66\1\0\1\66"+
    "\1\0\1\66\1\167\1\66\6\0\4\66\1\0\3\66"+
    "\1\0\1\66\1\72\1\66\1\0\1\66\2\0\1\170"+
    "\4\0\1\66\1\0\1\66\22\0\1\171\1\172\1\66"+
    "\1\173\4\66\1\75\3\66\1\0\3\66\3\0\1\4"+
    "\1\67\1\4\1\67\1\0\1\66\2\67\6\0\4\67"+
    "\1\0\1\67\2\66\1\0\1\66\1\72\1\67\1\0"+
    "\1\67\2\0\1\67\4\0\1\67\1\0\1\67\7\0"+
    "\1\4\12\0\10\67\1\0\3\67\1\0\3\67\4\0"+
    "\1\174\1\0\1\174\2\0\2\174\6\0\4\174\1\0"+
    "\3\174\3\0\1\174\1\0\1\174\2\0\1\174\4\0"+
    "\1\174\1\0\1\174\22\0\10\174\1\0\3\174\1\0"+
    "\3\174\3\0\1\4\1\12\1\4\1\12\1\63\1\66"+
    "\2\12\6\0\1\67\3\12\1\0\1\12\1\175\1\71"+
    "\1\0\1\66\1\72\1\12\1\0\1\12\1\65\1\0"+
    "\1\12\4\0\1\67\1\0\1\12\7\0\1\4\12\0"+
    "\4\12\1\153\3\12\1\176\3\12\1\0\2\12\1\67"+
    "\3\0\1\4\1\12\1\4\1\12\1\63\1\66\2\12"+
    "\6\0\1\67\3\12\1\0\1\12\1\77\1\71\1\0"+
    "\1\66\1\72\1\12\1\0\1\153\1\65\1\0\1\12"+
    "\4\0\1\67\1\0\1\12\7\0\1\4\12\0\10\12"+
    "\1\0\1\153\2\12\1\0\2\12\1\67\41\0\1\177"+
    "\31\0\1\200\22\0\1\166\1\66\1\0\1\66\1\0"+
    "\1\66\1\167\1\66\6\0\4\66\1\0\3\66\1\0"+
    "\1\66\1\72\1\66\1\0\1\66\2\0\1\201\4\0"+
    "\1\66\1\0\1\66\22\0\1\66\1\172\1\66\1\173"+
    "\4\66\1\0\3\66\1\0\3\66\3\0\1\4\1\67"+
    "\1\4\1\67\1\101\1\66\2\67\6\0\4\67\1\0"+
    "\1\67\2\66\1\0\1\66\1\72\1\67\1\101\1\67"+
    "\2\0\1\67\4\0\1\67\1\0\1\67\7\0\1\4"+
    "\12\0\10\67\1\0\3\67\1\0\3\67\6\0\1\104"+
    "\2\0\1\104\11\0\1\104\14\0\1\104\2\0\1\104"+
    "\3\0\1\104\51\0\1\104\2\0\1\104\11\0\1\104"+
    "\4\0\1\131\7\0\1\104\2\0\1\104\3\0\1\104"+
    "\61\0\1\111\110\0\1\111\1\110\2\111\36\0\2\111"+
    "\23\0\1\111\27\0\2\202\24\0\1\202\14\0\1\202"+
    "\1\0\1\202\24\0\1\202\3\0\1\162\5\0\1\162"+
    "\61\0\1\203\1\164\5\0\1\165\14\0\1\66\1\0"+
    "\1\66\1\0\3\66\5\0\1\202\1\204\3\66\1\0"+
    "\3\66\1\0\1\66\1\72\1\66\1\0\1\66\2\0"+
    "\1\66\4\0\1\204\1\0\1\66\12\0\1\202\1\0"+
    "\1\202\5\0\10\66\1\0\3\66\1\0\2\66\1\204"+
    "\3\0\1\4\1\117\1\4\1\12\1\63\1\66\2\12"+
    "\6\0\1\67\3\12\1\0\1\12\1\77\1\71\1\0"+
    "\1\66\1\72\1\12\1\0\1\12\1\65\1\0\1\12"+
    "\4\0\1\67\1\0\1\12\7\0\1\4\12\0\10\12"+
    "\1\0\3\12\1\0\2\12\1\67\3\0\1\4\1\12"+
    "\1\4\1\12\1\63\1\66\2\12\6\0\1\67\1\12"+
    "\1\205\1\12\1\0\1\12\1\77\1\71\1\0\1\66"+
    "\1\72\1\12\1\0\1\12\1\65\1\0\1\12\4\0"+
    "\1\67\1\0\1\12\7\0\1\4\12\0\10\12\1\0"+
    "\3\12\1\0\2\12\1\67\3\0\1\166\1\66\1\0"+
    "\1\66\1\0\1\66\1\167\1\66\6\0\4\66\1\0"+
    "\3\66\1\0\1\66\1\72\1\66\1\0\1\66\2\0"+
    "\1\201\4\0\1\66\1\0\1\66\22\0\1\66\1\172"+
    "\1\66\1\173\4\66\1\122\3\66\1\123\1\206\2\66"+
    "\3\0\1\4\1\12\1\4\1\12\1\63\1\66\2\12"+
    "\6\0\1\67\3\12\1\0\1\12\1\207\1\71\1\0"+
    "\1\66\1\72\1\12\1\0\1\12\1\65\1\0\1\73"+
    "\4\0\1\67\1\0\1\12\7\0\1\4\12\0\10\12"+
    "\1\210\3\12\1\0\2\12\1\67\107\0\2\123\102\0"+
    "\1\211\15\0\1\4\1\12\1\4\1\12\1\63\1\66"+
    "\2\12\6\0\1\67\3\12\1\0\1\12\1\77\1\71"+
    "\1\0\1\66\1\72\1\12\1\0\1\12\1\65\1\0"+
    "\1\12\4\0\1\67\1\0\1\12\7\0\1\4\12\0"+
    "\5\12\1\153\2\12\1\0\3\12\1\0\2\12\1\67"+
    "\3\0\1\4\1\12\1\4\1\12\1\63\1\66\2\12"+
    "\6\0\1\67\3\12\1\0\1\212\1\77\1\71\1\0"+
    "\1\66\1\72\1\12\1\0\1\12\1\65\1\0\1\12"+
    "\4\0\1\67\1\0\1\12\7\0\1\4\12\0\10\12"+
    "\1\0\3\12\1\0\2\12\1\67\4\0\1\66\1\0"+
    "\1\66\1\0\3\66\5\0\1\17\1\126\3\66\1\0"+
    "\1\66\1\114\1\66\1\0\1\66\1\72\1\66\1\0"+
    "\1\66\2\0\1\66\4\0\1\126\1\0\1\66\1\0"+
    "\1\112\10\0\1\17\1\0\1\17\5\0\10\66\1\0"+
    "\3\66\1\0\2\66\1\126\4\0\1\66\1\0\1\66"+
    "\1\0\3\66\6\0\4\66\1\0\2\66\1\127\1\0"+
    "\1\66\1\72\1\66\1\0\1\66\2\0\1\66\4\0"+
    "\1\66\1\0\1\66\1\130\21\0\10\66\1\0\3\66"+
    "\1\0\3\66\51\0\1\130\44\0\1\4\1\12\1\4"+
    "\1\132\1\63\1\66\1\132\1\12\6\0\1\67\1\12"+
    "\1\132\1\12\1\0\1\12\1\77\1\71\1\0\1\66"+
    "\1\72\1\12\1\0\1\12\1\65\1\104\1\12\1\0"+
    "\1\104\2\0\1\67\1\104\1\12\7\0\1\4\12\0"+
    "\10\12\1\0\3\12\1\0\2\12\1\67\3\0\1\4"+
    "\1\67\1\4\1\213\1\0\1\66\1\213\1\67\6\0"+
    "\2\67\1\213\1\67\1\0\1\67\2\66\1\0\1\66"+
    "\1\72\1\67\1\0\1\67\1\0\1\104\1\67\1\0"+
    "\1\104\2\0\1\67\1\104\1\67\7\0\1\4\12\0"+
    "\10\67\1\0\3\67\1\0\3\67\3\0\1\162\2\0"+
    "\1\104\2\0\1\104\11\0\1\104\4\0\1\131\7\0"+
    "\1\104\2\0\1\104\3\0\1\104\52\0\1\101\25\0"+
    "\1\101\60\0\4\4\1\63\1\0\2\4\6\0\4\4"+
    "\1\0\1\4\1\214\1\64\3\0\1\4\1\0\1\4"+
    "\1\65\1\0\1\4\4\0\1\4\1\0\1\4\7\0"+
    "\1\4\12\0\10\4\1\215\3\4\1\0\1\4\1\216"+
    "\1\4\4\0\1\66\1\0\1\66\1\0\3\66\6\0"+
    "\4\66\1\0\3\66\1\0\1\66\1\72\1\66\1\0"+
    "\1\66\2\0\1\217\4\0\1\66\1\0\1\66\22\0"+
    "\10\66\1\0\3\66\1\0\3\66\3\0\1\4\1\12"+
    "\1\4\1\12\1\63\1\66\2\12\6\0\1\67\3\12"+
    "\1\0\1\12\1\220\1\71\1\0\1\66\1\72\1\12"+
    "\1\0\1\12\1\65\1\0\1\12\4\0\1\67\1\0"+
    "\1\12\7\0\1\4\12\0\10\12\1\215\3\12\1\0"+
    "\1\12\1\153\1\67\3\0\1\221\1\66\1\0\1\66"+
    "\1\0\1\66\1\222\1\66\6\0\4\66\1\0\3\66"+
    "\1\0\1\66\1\72\1\66\1\0\1\66\2\0\1\201"+
    "\4\0\1\66\1\0\1\66\22\0\1\66\1\172\1\66"+
    "\1\173\4\66\1\142\3\66\1\0\3\66\3\0\1\223"+
    "\5\0\1\223\111\0\1\144\33\0\1\224\76\0\1\146"+
    "\112\0\1\146\14\0\1\147\113\0\1\150\107\0\1\101"+
    "\52\0\1\4\1\12\1\4\1\12\1\63\1\66\2\12"+
    "\6\0\1\67\3\12\1\0\1\12\1\77\1\71\1\0"+
    "\1\66\1\72\1\12\1\0\1\12\1\65\1\0\1\12"+
    "\4\0\1\67\1\0\1\12\7\0\1\4\12\0\3\12"+
    "\1\153\4\12\1\0\3\12\1\0\2\12\1\67\3\0"+
    "\1\4\1\12\1\4\1\12\1\63\1\66\2\12\6\0"+
    "\1\67\3\12\1\0\1\12\1\225\1\71\1\0\1\66"+
    "\1\72\1\12\1\0\1\12\1\65\1\0\1\12\4\0"+
    "\1\67\1\0\1\12\7\0\1\4\12\0\10\12\1\0"+
    "\3\12\1\0\2\12\1\67\3\0\1\4\1\12\1\4"+
    "\1\12\1\63\1\66\2\12\6\0\1\67\3\12\1\0"+
    "\1\12\1\77\1\71\1\0\1\66\1\72\1\12\1\0"+
    "\1\12\1\65\1\0\1\12\4\0\1\67\1\0\1\12"+
    "\7\0\1\4\12\0\10\12\1\0\2\12\1\153\1\0"+
    "\2\12\1\67\3\0\1\166\1\66\1\0\1\66\1\0"+
    "\1\66\1\167\1\66\6\0\3\66\1\226\1\0\3\66"+
    "\1\0\1\66\1\72\1\66\1\0\1\66\2\0\1\201"+
    "\4\0\1\66\1\0\1\66\22\0\1\66\1\172\1\66"+
    "\1\173\4\66\1\156\3\66\1\0\3\66\24\0\1\227"+
    "\71\0\1\4\1\12\1\4\1\12\1\63\1\66\2\12"+
    "\6\0\1\67\3\12\1\0\1\12\1\230\1\71\1\0"+
    "\1\66\1\72\1\12\1\0\1\12\1\65\1\0\1\12"+
    "\4\0\1\67\1\0\1\12\7\0\1\4\12\0\7\12"+
    "\1\153\1\231\3\12\1\0\2\12\1\67\3\0\1\162"+
    "\5\0\1\162\61\0\1\203\1\164\5\0\1\232\15\0"+
    "\1\233\4\0\1\233\174\0\1\164\116\0\1\234\105\0"+
    "\1\235\23\0\1\66\1\0\1\66\1\0\3\66\6\0"+
    "\4\66\1\0\3\66\1\0\1\66\1\72\1\66\1\0"+
    "\1\66\2\0\1\66\4\0\1\66\1\0\1\66\22\0"+
    "\1\236\7\66\1\0\3\66\1\0\3\66\4\0\1\66"+
    "\1\0\1\66\1\0\3\66\6\0\4\66\1\0\1\66"+
    "\1\237\1\66\1\0\1\66\1\72\1\66\1\0\1\66"+
    "\2\0\1\66\4\0\1\66\1\0\1\66\22\0\4\66"+
    "\1\240\1\241\2\66\1\176\3\66\1\0\3\66\4\0"+
    "\1\66\1\0\1\66\1\0\3\66\6\0\4\66\1\0"+
    "\3\66\1\0\1\66\1\72\1\66\1\0\1\240\2\0"+
    "\1\66\4\0\1\66\1\0\1\66\22\0\10\66\1\0"+
    "\1\240\2\66\1\0\3\66\4\0\1\66\1\0\1\66"+
    "\1\0\3\66\6\0\4\66\1\0\3\66\1\0\1\66"+
    "\1\72\1\66\1\0\1\66\2\0\1\66\4\0\1\66"+
    "\1\0\1\66\22\0\1\242\1\66\1\236\5\66\1\0"+
    "\3\66\1\0\3\66\4\0\1\66\1\0\1\66\1\0"+
    "\3\66\6\0\4\66\1\0\3\66\1\0\1\66\1\72"+
    "\1\66\1\0\1\66\2\0\1\243\4\0\1\66\1\0"+
    "\1\66\22\0\10\66\1\0\3\66\1\0\3\66\4\0"+
    "\1\174\1\0\1\174\2\0\2\174\6\0\4\174\1\0"+
    "\1\174\1\244\1\174\3\0\1\174\1\0\1\174\2\0"+
    "\1\174\4\0\1\174\1\0\1\174\22\0\10\174\1\0"+
    "\3\174\1\0\3\174\3\0\1\166\1\66\1\0\1\66"+
    "\1\0\1\66\1\167\1\66\6\0\4\66\1\0\3\66"+
    "\1\0\1\66\1\72\1\66\1\0\1\66\2\0\1\201"+
    "\4\0\1\66\1\0\1\66\22\0\1\66\1\172\1\66"+
    "\1\173\1\240\3\66\1\176\3\66\1\0\3\66\77\0"+
    "\1\211\42\0\1\245\47\0\1\211\3\0\1\176\45\0"+
    "\1\211\45\0\1\211\12\0\1\66\1\0\1\66\1\0"+
    "\3\66\6\0\4\66\1\0\3\66\1\0\1\66\1\72"+
    "\1\66\1\0\1\66\2\0\1\66\4\0\1\66\1\0"+
    "\1\66\22\0\5\66\1\241\2\66\1\0\3\66\1\0"+
    "\3\66\3\0\1\246\1\12\1\4\1\12\1\247\1\66"+
    "\1\250\1\12\6\0\1\67\3\12\1\0\1\12\1\77"+
    "\1\71\1\0\1\66\1\72\1\12\1\0\1\12\1\65"+
    "\1\0\1\12\4\0\1\67\1\0\1\12\7\0\1\4"+
    "\12\0\10\12\1\0\3\12\1\0\2\12\1\67\4\0"+
    "\1\66\1\0\1\66\1\0\3\66\6\0\4\66\1\0"+
    "\3\66\1\0\1\66\1\72\1\66\1\0\1\66\2\0"+
    "\1\66\4\0\1\66\1\0\1\66\22\0\5\66\1\240"+
    "\2\66\1\0\3\66\1\0\3\66\3\0\1\166\1\66"+
    "\1\0\1\66\1\0\1\66\1\167\1\66\6\0\4\66"+
    "\1\0\3\66\1\0\1\66\1\72\1\66\1\0\1\66"+
    "\2\0\1\170\4\0\1\66\1\0\1\66\22\0\1\66"+
    "\1\172\1\66\1\173\4\66\1\210\3\66\1\0\3\66"+
    "\41\0\1\177\100\0\1\162\66\0\1\4\1\12\1\4"+
    "\1\12\1\63\1\66\2\12\6\0\1\67\3\12\1\0"+
    "\1\12\1\251\1\71\1\0\1\66\1\72\1\12\1\0"+
    "\1\12\1\65\1\0\1\12\4\0\1\67\1\0\1\12"+
    "\7\0\1\4\12\0\10\12\1\0\3\12\1\0\2\12"+
    "\1\67\3\0\1\4\1\67\1\4\1\213\1\63\1\66"+
    "\1\213\1\67\6\0\2\67\1\213\1\67\1\0\1\67"+
    "\1\66\1\71\1\0\1\66\1\72\1\67\1\0\1\67"+
    "\1\65\1\104\1\67\1\0\1\104\2\0\1\67\1\104"+
    "\1\67\7\0\1\4\12\0\10\67\1\0\3\67\1\0"+
    "\3\67\103\0\1\215\5\0\1\211\112\0\1\211\4\0"+
    "\4\4\1\63\1\0\2\4\6\0\4\4\1\0\1\4"+
    "\1\162\1\64\3\0\1\4\1\0\1\4\1\65\1\0"+
    "\1\4\4\0\1\4\1\0\1\4\7\0\1\4\12\0"+
    "\10\4\1\0\3\4\1\0\3\4\3\0\1\166\1\66"+
    "\1\0\1\66\1\0\1\66\1\167\1\66\6\0\4\66"+
    "\1\0\3\66\1\0\1\66\1\72\1\66\1\0\1\66"+
    "\2\0\1\201\4\0\1\66\1\0\1\66\22\0\1\66"+
    "\1\172\1\66\1\173\4\66\1\215\3\66\1\0\1\66"+
    "\1\240\1\66\27\0\1\214\43\0\1\235\7\0\1\215"+
    "\5\0\1\211\5\0\1\66\1\0\1\66\1\0\3\66"+
    "\6\0\4\66\1\0\1\66\1\252\1\66\1\0\1\66"+
    "\1\72\1\66\1\0\1\66\2\0\1\66\4\0\1\66"+
    "\1\0\1\66\22\0\1\236\7\66\1\215\3\66\1\0"+
    "\1\66\1\240\1\66\27\0\1\214\53\0\1\215\5\0"+
    "\1\211\45\0\1\224\52\0\1\66\1\0\1\66\1\0"+
    "\3\66\6\0\4\66\1\0\3\66\1\0\1\66\1\72"+
    "\1\66\1\0\1\66\2\0\1\66\4\0\1\66\1\0"+
    "\1\66\22\0\10\66\1\0\2\66\1\240\1\0\3\66"+
    "\106\0\1\211\7\0\1\166\1\66\1\0\1\66\1\0"+
    "\1\66\1\167\1\66\6\0\4\66\1\0\3\66\1\0"+
    "\1\66\1\72\1\66\1\0\1\66\2\0\1\201\4\0"+
    "\1\66\1\0\1\66\22\0\1\66\1\172\1\66\1\173"+
    "\3\66\1\240\1\231\3\66\1\0\3\66\102\0\1\211"+
    "\16\0\1\253\107\0\1\162\5\0\1\162\62\0\1\254"+
    "\22\0\1\66\1\0\1\66\1\0\3\66\6\0\4\66"+
    "\1\0\3\66\1\0\1\66\1\72\1\66\1\0\1\66"+
    "\2\0\1\66\4\0\1\66\1\0\1\66\22\0\4\66"+
    "\1\240\3\66\1\176\3\66\1\0\3\66\4\0\1\66"+
    "\1\0\1\66\1\0\3\66\6\0\4\66\1\0\1\66"+
    "\1\255\1\66\1\0\1\66\1\72\1\66\1\0\1\66"+
    "\2\0\1\66\4\0\1\66\1\0\1\66\22\0\10\66"+
    "\1\0\3\66\1\0\3\66\4\0\1\66\1\0\1\66"+
    "\1\0\3\66\6\0\4\66\1\0\3\66\1\0\1\66"+
    "\1\72\1\66\1\0\1\66\2\0\1\66\4\0\1\66"+
    "\1\0\1\66\22\0\6\66\1\236\1\66\1\0\3\66"+
    "\1\0\3\66\4\0\1\236\1\0\1\66\1\0\3\66"+
    "\6\0\4\66\1\0\3\66\1\0\1\66\1\72\1\66"+
    "\1\0\1\66\2\0\1\66\4\0\1\66\1\0\1\66"+
    "\22\0\10\66\1\0\3\66\1\0\3\66\4\0\1\66"+
    "\1\0\1\66\1\0\3\66\6\0\4\66\1\0\3\66"+
    "\1\0\1\66\1\72\1\66\1\0\1\66\2\0\1\66"+
    "\4\0\1\66\1\0\1\66\22\0\4\66\1\236\3\66"+
    "\1\0\3\66\1\0\3\66\4\0\1\256\1\0\1\256"+
    "\2\0\2\256\6\0\1\174\3\256\1\0\1\256\1\244"+
    "\1\174\3\0\1\256\1\0\1\256\2\0\1\256\4\0"+
    "\1\174\1\0\1\256\22\0\10\256\1\0\3\256\1\0"+
    "\2\256\1\174\77\0\1\211\3\0\1\176\12\0\4\4"+
    "\1\247\1\0\2\4\6\0\4\4\1\0\1\4\1\0"+
    "\1\64\3\0\1\4\1\0\1\4\1\65\1\0\1\4"+
    "\4\0\1\4\1\0\1\4\7\0\1\4\12\0\10\4"+
    "\1\0\3\4\1\0\3\4\3\0\1\162\5\0\1\162"+
    "\13\0\1\257\45\0\1\163\1\164\5\0\1\165\13\0"+
    "\1\4\1\12\1\4\1\12\1\247\1\66\2\12\6\0"+
    "\1\67\3\12\1\0\1\12\1\77\1\71\1\0\1\66"+
    "\1\72\1\12\1\0\1\12\1\65\1\0\1\12\4\0"+
    "\1\67\1\0\1\12\7\0\1\4\12\0\10\12\1\0"+
    "\3\12\1\0\2\12\1\67\3\0\1\166\1\260\1\0"+
    "\1\260\1\0\1\66\2\260\6\0\4\260\1\0\1\260"+
    "\1\66\1\260\1\0\1\66\1\72\1\260\1\0\1\260"+
    "\2\0\1\260\4\0\1\260\1\0\1\260\22\0\10\260"+
    "\1\0\3\260\1\0\3\260\4\0\1\66\1\0\1\66"+
    "\1\0\3\66\6\0\4\66\1\0\3\66\1\0\1\66"+
    "\1\72\1\66\1\0\1\66\2\0\1\66\4\0\1\66"+
    "\1\0\1\66\22\0\10\66\1\215\3\66\1\0\1\66"+
    "\1\240\1\66\7\0\1\261\205\0\1\164\14\0\1\262"+
    "\1\0\1\262\2\0\2\262\6\0\1\174\3\262\1\0"+
    "\1\262\1\244\1\174\3\0\1\262\1\0\1\262\2\0"+
    "\1\262\4\0\1\174\1\0\1\262\22\0\10\262\1\0"+
    "\3\262\1\0\2\262\1\174\25\0\1\263\71\0\1\260"+
    "\1\0\1\260\1\264\1\66\2\260\6\0\4\260\1\265"+
    "\1\260\1\266\1\260\1\0\1\66\1\72\1\260\1\0"+
    "\1\260\2\0\1\260\4\0\1\260\1\0\1\260\22\0"+
    "\10\260\1\0\3\260\1\0\3\260\4\0\1\267\1\0"+
    "\1\267\1\0\3\267\6\0\4\267\1\0\1\267\1\0"+
    "\1\267\3\0\1\267\1\0\1\267\2\0\1\267\4\0"+
    "\1\267\1\0\1\267\22\0\10\267\1\0\3\267\1\0"+
    "\3\267\4\0\1\270\1\0\1\270\2\0\2\270\6\0"+
    "\1\174\3\270\1\0\1\270\1\244\1\174\3\0\1\270"+
    "\1\0\1\270\2\0\1\270\4\0\1\174\1\0\1\270"+
    "\22\0\10\270\1\0\3\270\1\0\2\270\1\174\4\0"+
    "\1\271\1\0\1\271\2\0\2\271\6\0\4\271\1\0"+
    "\1\271\1\0\1\271\3\0\1\271\1\0\1\271\2\0"+
    "\1\271\4\0\1\271\1\0\1\271\22\0\10\271\1\0"+
    "\3\271\1\0\3\271\21\0\1\272\24\0\1\272\43\0"+
    "\1\272\4\0\1\265\1\0\5\265\6\0\16\265\1\0"+
    "\4\265\2\0\3\265\1\0\1\265\1\0\1\265\16\0"+
    "\10\265\1\0\3\265\1\0\3\265\4\0\1\260\1\0"+
    "\1\260\1\0\1\66\2\260\6\0\4\260\1\0\1\260"+
    "\1\66\1\260\1\0\1\66\1\72\1\260\1\0\1\260"+
    "\2\0\1\260\4\0\1\260\1\0\1\260\22\0\10\260"+
    "\1\0\3\260\1\0\3\260\4\0\1\267\1\0\1\267"+
    "\1\0\3\267\1\273\5\0\4\267\1\0\1\267\1\0"+
    "\1\267\3\0\1\267\1\0\1\267\2\0\1\267\4\0"+
    "\1\267\1\0\1\267\22\0\10\267\1\0\3\267\1\0"+
    "\3\267\4\0\1\274\1\0\1\274\2\0\2\274\6\0"+
    "\1\174\3\274\1\0\1\274\1\244\1\174\3\0\1\274"+
    "\1\0\1\274\2\0\1\274\4\0\1\174\1\0\1\274"+
    "\22\0\10\274\1\0\3\274\1\0\2\274\1\174\4\0"+
    "\1\271\1\0\1\271\1\264\1\0\2\271\6\0\4\271"+
    "\1\265\1\271\1\263\1\271\3\0\1\271\1\0\1\271"+
    "\2\0\1\271\4\0\1\271\1\0\1\271\22\0\10\271"+
    "\1\0\3\271\1\0\3\271\21\0\1\272\3\0\1\265"+
    "\20\0\1\272\43\0\1\272\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\1\1\1\0\33\1\3\11"+
    "\6\1\2\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\3\0\3\1\1\0\1\1"+
    "\2\0\3\1\1\0\1\1\1\0\2\1\2\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\3\1\2\0\1\1\2\0\1\11\1\0\2\1"+
    "\14\0\4\1\3\0\3\1\2\0\2\1\4\0\2\1"+
    "\4\0\1\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\5\0\1\1\1\0\1\1\4\0\1\1\2\0\1\1"+
    "\1\0\1\1\2\0\1\1\2\0\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public ArrayList<Token> readSentence() throws IOException {
    ArrayList<Token> sentence = new ArrayList<Token>();
    Token token, lastNonSpace = null, lastSpace = null;

    while((token = yylex()) != null) {
        if(token.isSpace()) {
            if(token.type == Token.TOK_NEWLINES) {
                if(!sentence.isEmpty()) return sentence;
            }
            lastSpace = token;
        } else {
            if(!sentence.isEmpty()) {
                if(lastNonSpace != null &&
                   lastNonSpace.value.endsWith(".") &&
                   lastNonSpace.value.length() > 1 &&
                   token.isCapitalized())
                {
                    yypushback(yylength());
                    return sentence;
                } else if(token.type == Token.TOK_SENT_FINAL) {
                    if(lastNonSpace != null &&
                       lastNonSpace.value.length() == 1 &&
                       lastNonSpace.isCapitalized())
                    {
                    } else {
                        sentence.add(token);
                        return sentence;
                    }
                }
            }
            sentence.add(token);
            lastNonSpace = token;
        }
    }
    if(sentence.isEmpty()) return null;
    return sentence;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SwedishTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 536) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return(new Token(Token.TOK_UNKNOWN,yytext(),yychar));
            }
          case 20: break;
          case 2: 
            { return(new Token(Token.TOK_SYMBOL,yytext(),yychar));
            }
          case 21: break;
          case 3: 
            { return(new Token(Token.TOK_LATIN,yytext(),yychar));
            }
          case 22: break;
          case 4: 
            { return(new Token(Token.TOK_SPACE,yytext(),yychar));
            }
          case 23: break;
          case 5: 
            { return(new Token(Token.TOK_NEWLINE,yytext(),yychar));
            }
          case 24: break;
          case 6: 
            { return(new Token(Token.TOK_NUMBER,yytext(),yychar));
            }
          case 25: break;
          case 7: 
            { return(new Token(Token.TOK_SENT_FINAL,yytext(),yychar));
            }
          case 26: break;
          case 8: 
            { return(new Token(Token.TOK_GREEK,yytext(),yychar));
            }
          case 27: break;
          case 9: 
            { return(new Token(Token.TOK_ARABIC,yytext(),yychar));
            }
          case 28: break;
          case 10: 
            { return(new Token(Token.TOK_NAGARI,yytext(),yychar));
            }
          case 29: break;
          case 11: 
            { return(new Token(Token.TOK_KANA,yytext(),yychar));
            }
          case 30: break;
          case 12: 
            { return(new Token(Token.TOK_HANGUL,yytext(),yychar));
            }
          case 31: break;
          case 13: 
            { return(new Token(Token.TOK_HANZI,yytext(),yychar));
            }
          case 32: break;
          case 14: 
            { return(new Token(Token.TOK_SMILEY,yytext(),yychar));
            }
          case 33: break;
          case 15: 
            { return(new Token(Token.TOK_SPACES,yytext(),yychar));
            }
          case 34: break;
          case 16: 
            { return(new Token(Token.TOK_NEWLINES,yytext(),yychar));
            }
          case 35: break;
          case 17: 
            { return(new Token(Token.TOK_URL,yytext(),yychar));
            }
          case 36: break;
          case 18: 
            { return(new Token(Token.TOK_EMAIL,yytext(),yychar));
            }
          case 37: break;
          case 19: 
            { yychar = -yylength();
                      sentID = yytext().substring(6, yylength()-1);
            }
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
